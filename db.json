{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/bird_32_gray.png","path":"images/bird_32_gray.png","modified":1,"renderable":0},{"_id":"source/images/bird_32_gray_fail.png","path":"images/bird_32_gray_fail.png","modified":1,"renderable":0},{"_id":"source/images/code_bg.png","path":"images/code_bg.png","modified":1,"renderable":0},{"_id":"source/images/dotted-border.png","path":"images/dotted-border.png","modified":1,"renderable":0},{"_id":"source/images/email.png","path":"images/email.png","modified":1,"renderable":0},{"_id":"source/images/line-tile.png","path":"images/line-tile.png","modified":1,"renderable":0},{"_id":"source/images/rss.png","path":"images/rss.png","modified":1,"renderable":0},{"_id":"source/images/noise.png","path":"images/noise.png","modified":1,"renderable":0},{"_id":"source/images/rss555.png","path":"images/rss555.png","modified":1,"renderable":0},{"_id":"source/images/runtime_class2.png","path":"images/runtime_class2.png","modified":1,"renderable":0},{"_id":"source/images/runtime_class3.png","path":"images/runtime_class3.png","modified":1,"renderable":0},{"_id":"source/images/runtime_class6.png","path":"images/runtime_class6.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method3.png","path":"images/runtime_method3.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method4.png","path":"images/runtime_method4.png","modified":1,"renderable":0},{"_id":"source/images/runtime_variable1.png","path":"images/runtime_variable1.png","modified":1,"renderable":0},{"_id":"source/images/runtime_variable3.png","path":"images/runtime_variable3.png","modified":1,"renderable":0},{"_id":"source/images/runtime_variable2.png","path":"images/runtime_variable2.png","modified":1,"renderable":0},{"_id":"source/images/search.png","path":"images/search.png","modified":1,"renderable":0},{"_id":"source/images/webimage_flow.png","path":"images/webimage_flow.png","modified":1,"renderable":0},{"_id":"source/images/mvvm1.png","path":"images/mvvm1.png","modified":1,"renderable":0},{"_id":"source/images/mvvm2.png","path":"images/mvvm2.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method1.png","path":"images/runtime_method1.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method7.png","path":"images/runtime_method7.png","modified":1,"renderable":0},{"_id":"source/images/runtime_variable4.png","path":"images/runtime_variable4.png","modified":1,"renderable":0},{"_id":"source/images/sdwebimage_ifelse.png","path":"images/sdwebimage_ifelse.png","modified":1,"renderable":0},{"_id":"source/images/thread4.png","path":"images/thread4.png","modified":1,"renderable":0},{"_id":"source/images/downloadmanager.jpg","path":"images/downloadmanager.jpg","modified":1,"renderable":0},{"_id":"source/images/runtime_class5.png","path":"images/runtime_class5.png","modified":1,"renderable":0},{"_id":"source/images/runtime_variable5.png","path":"images/runtime_variable5.png","modified":1,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/images/mvvm3.png","path":"images/mvvm3.png","modified":1,"renderable":0},{"_id":"source/images/runtime_class4.png","path":"images/runtime_class4.png","modified":1,"renderable":0},{"_id":"source/images/runtime_forwarding1.png","path":"images/runtime_forwarding1.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method5.png","path":"images/runtime_method5.png","modified":1,"renderable":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"source/images/github_url.png","path":"images/github_url.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method8.png","path":"images/runtime_method8.png","modified":1,"renderable":0},{"_id":"source/images/thread1.png","path":"images/thread1.png","modified":1,"renderable":0},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"source/images/sdwebimage.jpg","path":"images/sdwebimage.jpg","modified":1,"renderable":0},{"_id":"source/images/thread3.png","path":"images/thread3.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method2.png","path":"images/runtime_method2.png","modified":1,"renderable":0},{"_id":"source/images/thread2.png","path":"images/thread2.png","modified":1,"renderable":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"source/images/runtime_forwarding2.png","path":"images/runtime_forwarding2.png","modified":1,"renderable":0},{"_id":"source/images/runtime_method6.png","path":"images/runtime_method6.png","modified":1,"renderable":0},{"_id":"source/images/mvc.png","path":"images/mvc.png","modified":1,"renderable":0},{"_id":"source/images/runtime_forwarding3.png","path":"images/runtime_forwarding3.png","modified":1,"renderable":0},{"_id":"source/images/runtime_class1.png","path":"images/runtime_class1.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1577957496433},{"_id":"themes/jacman/README.md","hash":"098545637b0aeb27b14707c15e429470c603d78d","modified":1577957496433},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1577957496433},{"_id":"themes/jacman/README_zh.md","hash":"9c73931bca4883de13eedd4be254da547d4ca52e","modified":1577957496433},{"_id":"themes/jacman/_config.yml","hash":"9b627edf866307b8850e4f94d0a03e18eb2fab41","modified":1577964320263},{"_id":"source/_posts/first-blog-test.md","hash":"1d58662a21f235c3b549afe7125dc472f8b7260a","modified":1578034242138},{"_id":"source/_posts/ji-lu-yi-xie-hao-de-wang-zhan-huo-bo-ke.md","hash":"bf86a2c4a89bdf2317b59aace3f7d2bb9f440734","modified":1577966077653},{"_id":"source/_posts/first-blog.md","hash":"56fe259000c5cd4acc0a5d1fc5bf886a17865919","modified":1578036469505},{"_id":"source/_posts/ji-yu-octopressde-github-pageschuang-jian.md","hash":"8c36164b828e5382185fe8e4acfa028eca934bab","modified":1577965872169},{"_id":"source/_posts/hello-world.md","hash":"b59bd771cdf80d4e6add33fab60828e8482c6aca","modified":1577965911533},{"_id":"source/_posts/ji-zhu-bo-ke.md","hash":"e496e143c4c4913bf5bf2124b8819c783f0a604f","modified":1577965859626},{"_id":"source/_posts/ruan-jian-jia-gou-mvvm.md","hash":"275b0357b58b4ed082f7337486c25a461b7240fe","modified":1578032965593},{"_id":"source/_posts/multi-thread.md","hash":"63cac0e0a25ad0471de1c8abecd7031745ce6abb","modified":1578036356965},{"_id":"source/_posts/runtimeyun-xing-shi-zhi-bian-liang.md","hash":"361de880a296b8521b5adeb3c739dad56eb7b44e","modified":1578033029257},{"_id":"source/_posts/runtimeyun-xing-shi-zhi-class.md","hash":"37008ef4da4fb6c723052f8803a0bab054bbcf96","modified":1578033044283},{"_id":"source/_posts/runtimeyun-xing-shi-de-li-jie.md","hash":"78ce9692acf444a89f595b6d7555546c66c7a6c2","modified":1578032995187},{"_id":"source/_posts/runtimeyun-xing-shi-zhi-fang-fa-method.md","hash":"2ed2a45fcfd14f07bcb09e1d5f5984174883fe39","modified":1578033055299},{"_id":"source/_posts/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding.md","hash":"693d9f4b392b06512372085cfed4c2b6f67c9749","modified":1578033071076},{"_id":"source/_posts/sdwebimageyuan-ma-fen-xi.md","hash":"6595e87ff85a0b5a0f5ad5d1099c7f72c27f034d","modified":1578033101848},{"_id":"source/_posts/shi-jian-ri-li-kong-jian.md","hash":"5120831cdb097a393fb8b93c4a0ab47729693a27","modified":1578033145513},{"_id":"source/_posts/zi-ding-yi-jian-pan-he-shu-ru-kuang.md","hash":"ea6f51c9b841c6b9a1c773c2231e48ab4399b25b","modified":1578033186343},{"_id":"source/images/bird_32_gray.png","hash":"d14826ea3c724cbac219497e7221019655c657d2","modified":1459398530000},{"_id":"source/images/bird_32_gray_fail.png","hash":"e32c5c1bfde4a0027b5582cb4d1faf3297e45978","modified":1459398530000},{"_id":"source/images/code_bg.png","hash":"f234231d5e15a38782ae064ab6433369ab6eada7","modified":1459398530000},{"_id":"source/images/dotted-border.png","hash":"ff805a8400e9f0147ec03f8d6bf2ff6e91838f79","modified":1459398530000},{"_id":"source/images/email.png","hash":"8360a8ceb0144288af7efbad8a7f4d7f83fa7fdd","modified":1459398530000},{"_id":"source/images/line-tile.png","hash":"54f2fb96fea67bc6f88c8dc7c0831ff25f12d476","modified":1459398530000},{"_id":"source/images/rss.png","hash":"b1ade4d8ba253eea4687174e43e76628fb36d86b","modified":1459398530000},{"_id":"source/images/noise.png","hash":"2b45462f5b06fb5d719e858c231ffa8c05302f55","modified":1459398530000},{"_id":"source/images/rss555.png","hash":"b1ade4d8ba253eea4687174e43e76628fb36d86b","modified":1459398530000},{"_id":"source/images/runtime_class2.png","hash":"560d034cd3fc35ab0a2f7121211c04c58c8edccb","modified":1459398530000},{"_id":"source/images/runtime_class3.png","hash":"1971038426615b7eae0a257d61baccbbcd99ffc7","modified":1459398530000},{"_id":"source/images/runtime_class6.png","hash":"5fd5a1812ae3d9e10a0e14f190b831fdff34a653","modified":1459398530000},{"_id":"source/images/runtime_method3.png","hash":"a28d7d02a235595bbef41a8843d983945a1834dd","modified":1459398530000},{"_id":"source/images/runtime_method4.png","hash":"5b7ecc882fc7d346104c1597c2b71d79183c9ff9","modified":1459398530000},{"_id":"source/images/runtime_variable1.png","hash":"3bf2f07a243c08fbf923353174c43802be69a244","modified":1459398530000},{"_id":"source/images/runtime_variable3.png","hash":"2af2bb2cbebdf0450f54342f7830c79a872afa71","modified":1459398530000},{"_id":"source/images/runtime_variable2.png","hash":"a1f0b491726d57c0f89f522226a8a4404e7166ff","modified":1459398530000},{"_id":"source/images/search.png","hash":"75432e9810d369aba1bb623cf980527490b559d1","modified":1459398530000},{"_id":"source/images/webimage_flow.png","hash":"23a4fa696e719427976557846b19bf305ad72844","modified":1459398530000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1577957496434},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1577957496434},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1577957496434},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1577957496441},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1577957496440},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1577957496440},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1577957496440},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1577957496440},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1577957496440},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1577957496441},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1577957496441},{"_id":"source/images/mvvm1.png","hash":"c58ad33b17c1901ed18c97becdff1e921b134a55","modified":1459398530000},{"_id":"source/images/mvvm2.png","hash":"65afdb0941af2e3c396313ca3521e53f4c10ca9a","modified":1459398530000},{"_id":"source/images/runtime_method1.png","hash":"fccd2da365734131b2726ac65ab1f15149c16267","modified":1465299120000},{"_id":"source/images/runtime_method7.png","hash":"5e542c5a3572154bd56949968a8b67768edffcc0","modified":1459398530000},{"_id":"source/images/runtime_variable4.png","hash":"99c8984cb26b5bf331072c1488cb3c1ccefa0846","modified":1459398530000},{"_id":"source/images/sdwebimage_ifelse.png","hash":"af2701f8ddbc7d05b1625ee5a413b0b071cb2da1","modified":1459398530000},{"_id":"source/images/thread4.png","hash":"95b5b575c931b98ca85a8735d437e4f7d02e50ed","modified":1459398530000},{"_id":"source/images/downloadmanager.jpg","hash":"f457e41e953c528d2fd252c327a5c681e799987f","modified":1459398530000},{"_id":"source/images/runtime_class5.png","hash":"e29a7e2a32818967196188e4cd327f046d8879ee","modified":1459398530000},{"_id":"source/images/runtime_variable5.png","hash":"f5b9295f170e56f6daadedd388ec5e423b41671e","modified":1459398530000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"3e1f1d8dc38b1e17c523d1176f7ee503fc648045","modified":1577957496434},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1577957496434},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1577957496434},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1577957496435},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1577957496437},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1577957496437},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1577957496438},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1577957496438},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1577957496438},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1577957496438},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1577957496438},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1577957496438},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"d49a8d609c5fbafa9e7ad328163565af03306519","modified":1577957496439},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1577957496439},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1577957496439},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1577957496439},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1577957496439},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1577957496440},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1577957496446},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577957496446},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577957496446},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577957496446},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577957496447},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577957496447},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577957496447},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577957496449},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577957496451},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577957496451},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577957496453},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1577957496453},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1577957496456},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1577957496457},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577957496458},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577957496461},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1577957496462},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1577957496464},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1577957496466},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1577957496465},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577957496468},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577957496469},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577957496469},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577957496469},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577957496469},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577957496469},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577957496470},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1577957496470},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1577957496470},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1577957496470},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1577957496470},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1577957496471},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1577957496471},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1577957496472},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1577957496472},{"_id":"source/images/mvvm3.png","hash":"0829a5e8ce5441e378940341b05870eb1e7340bb","modified":1459398530000},{"_id":"source/images/runtime_class4.png","hash":"070a7f9fad3455237e2cf6b71af1c94b8ccf5e7e","modified":1459398530000},{"_id":"source/images/runtime_forwarding1.png","hash":"c216ac56067935e7fdd3c6cced8babaf9bc934de","modified":1459398530000},{"_id":"source/images/runtime_method5.png","hash":"af2847340df0c316af24be10db71285c6c486e38","modified":1465299148000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1577957496455},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577957496460},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1577957496464},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1577957496470},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1577957496471},{"_id":"source/images/github_url.png","hash":"ff4f85fc13132336bf38dc4a409fa2ea524d37ee","modified":1459398530000},{"_id":"source/images/runtime_method8.png","hash":"ce697e05ada024759b213a3bc4d9cd2b16333c18","modified":1459398530000},{"_id":"source/images/thread1.png","hash":"6ccde81b1bdde074585ebf03f23f4a32713f744c","modified":1459398530000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"548c69c570d5aac567bc6f088e9ee0c02223b088","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1577957496436},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1577957496437},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1577957496442},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1577957496443},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1577957496443},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1577957496443},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1577957496444},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1577957496444},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1577957496444},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1577957496445},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1577957496445},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1577957496445},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1577957496445},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1577957496445},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577957496447},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577957496447},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577957496448},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577957496448},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577957496448},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577957496448},{"_id":"source/images/sdwebimage.jpg","hash":"a49b47aa2cd0cb57b46c977798c583e0cb93f0a7","modified":1459398530000},{"_id":"source/images/thread3.png","hash":"c4c666fa5fc1b0d275921cdc63b99273908ea0eb","modified":1459398530000},{"_id":"source/images/runtime_method2.png","hash":"fc3c4a8d6a5fe9135bef9a2416bc460f445e939e","modified":1465299133000},{"_id":"source/images/thread2.png","hash":"aae4f6bfe10146d4ebcfcd29a36be9e136472316","modified":1459398530000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1577957496442},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1577957496443},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577957496459},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1577957496468},{"_id":"source/images/runtime_forwarding2.png","hash":"36206ffa0d70b518da792f7f02bec7145ea744ce","modified":1465299305000},{"_id":"source/images/runtime_method6.png","hash":"9077a42dd48d137dd1ef81a044a70f9863dc73e1","modified":1465299172000},{"_id":"source/images/mvc.png","hash":"944e58f4c9fd3e2710ee042f031519c18aedc389","modified":1459398530000},{"_id":"source/images/runtime_forwarding3.png","hash":"8127a72357b4e8fb8a305dc6054e3f5da42f47b7","modified":1465299317000},{"_id":"source/images/runtime_class1.png","hash":"bbd8a3290cfe6ba42c786b4ce9ed041838beef96","modified":1459398530000},{"_id":"public/2019/12/31/first-blog-test/index.html","hash":"dd4836b69c4f4c128ff02e441cb5b1ca012a4728","modified":1578045479807},{"_id":"public/2016/05/11/ji-lu-yi-xie-hao-de-wang-zhan-huo-bo-ke/index.html","hash":"4013811e5afc27af8eb83a6ce146c41f5b2dfe9c","modified":1578045479807},{"_id":"public/2016/02/20/ji-zhu-bo-ke/index.html","hash":"4dc1efb8c19e1a4947073254b4fc26a6682fa26b","modified":1578045479807},{"_id":"public/archives/index.html","hash":"3ee00c460ad9384842931e7c2b35487834cdf38d","modified":1578045479807},{"_id":"public/archives/page/2/index.html","hash":"8305d40cfe33b67715a7517c30f1b5078e7cbdbb","modified":1578045479807},{"_id":"public/archives/2016/index.html","hash":"890d5fc74689f8718fa4e0685d780ed2fb61fc82","modified":1578045479807},{"_id":"public/archives/2016/page/2/index.html","hash":"8b41b4588ecd177f600d1ec1f1c7a88470b098bd","modified":1578045479807},{"_id":"public/archives/2016/02/index.html","hash":"04b8e0708fdcd5e7d394391986fa0f8781a713d2","modified":1578045479807},{"_id":"public/archives/2016/03/index.html","hash":"e86a7c969ba4eb43ca3b7d76e9a33ea21c970fc1","modified":1578045479807},{"_id":"public/archives/2016/05/index.html","hash":"966ae3db45d1531733c8241fb27488ef5b88132e","modified":1578045479807},{"_id":"public/archives/2016/06/index.html","hash":"b5b0304aeb2dc47c144119458f34db3668d8733d","modified":1578045479807},{"_id":"public/archives/2019/index.html","hash":"e09bf8bf68ca4eba5ec45ba00abea1e73e8e395d","modified":1578045479807},{"_id":"public/archives/2019/12/index.html","hash":"1ff7331397983fa4087d9383f8c54081378f12a7","modified":1578045479807},{"_id":"public/archives/2020/index.html","hash":"c3502bdf1c4042fc13d29a234c355487fd1b94c8","modified":1578045479807},{"_id":"public/archives/2020/01/index.html","hash":"08638452142f98f14cc4e2a8521d868861f683ff","modified":1578045479807},{"_id":"public/index.html","hash":"a39bd63c71339b5cc85474404aa7fadd84d3a971","modified":1578045479807},{"_id":"public/page/2/index.html","hash":"c6cebf276e101e724ab9a84c155e8381541a434d","modified":1578045479807},{"_id":"public/categories/OC/index.html","hash":"4a409934af239557035abf60bcde43719c30ac0f","modified":1578045479807},{"_id":"public/categories/开发/index.html","hash":"fbf52070307ee17623ea51457fd5957d9ac539e5","modified":1578045479807},{"_id":"public/categories/软件架构/index.html","hash":"eb242cfe0cc8e85cf2547b74ddd37bd3d2a08f1b","modified":1578045479807},{"_id":"public/categories/多线程/index.html","hash":"1aac7afab50f0c626d5e0fa0ea6eb17a4664a804","modified":1578045479807},{"_id":"public/categories/runtime/index.html","hash":"73342daa63253b4d7a2f3c3b3a1f03c2ae77f994","modified":1578045479807},{"_id":"public/categories/架构/index.html","hash":"05f2b06b73ae609e546a8f6a7107143ccc8f0e1b","modified":1578045479807},{"_id":"public/categories/图片下载/index.html","hash":"6f3af02ebf29c561135ff603131717813f532ad1","modified":1578045479807},{"_id":"public/categories/日历/index.html","hash":"bb10646964d6bc781224f71154fcf144d7a62e2b","modified":1578045479807},{"_id":"public/categories/键盘/index.html","hash":"0fd74ef0f1327bad532b59518addb32bafd55c29","modified":1578045479807},{"_id":"public/categories/macdown/index.html","hash":"a959eea5c71be61fc05752688508a97d4f923b97","modified":1578045479807},{"_id":"public/tags/测滑返回/index.html","hash":"8253dd1e20bd50b9e4780192e2087ba79d7cd38c","modified":1578045479807},{"_id":"public/tags/动画/index.html","hash":"13ab6ca5554dd7944f4b92f0c34e738a9408a217","modified":1578045479807},{"_id":"public/tags/MVVM/index.html","hash":"1a1bad7834f22509f68f3b3a9a5a2139d82206a5","modified":1578045479807},{"_id":"public/tags/线程安全/index.html","hash":"c602810ab25de7256b1f2a8af0cb99eaa87fed4f","modified":1578045479807},{"_id":"public/tags/线程的分类/index.html","hash":"31d8ef56a7f0b7febb50f2c4b265016252694d16","modified":1578045479807},{"_id":"public/tags/variable/index.html","hash":"772013065c729930208ea491c3a515403cb68071","modified":1578045479807},{"_id":"public/tags/class/index.html","hash":"5423ed3fc1bc33cfa3c1c676e853c14da4a1956e","modified":1578045479807},{"_id":"public/tags/运行时/index.html","hash":"b6a3898d8f7f40c9c19de80f777cbf754efa4a3a","modified":1578045479807},{"_id":"public/tags/method/index.html","hash":"9de6785c04e17f3534c530f5fb97da9e98fd0265","modified":1578045479807},{"_id":"public/tags/消息转发/index.html","hash":"2e4ce39a77c8d77a8d7859e55b53d0fa5b2001b0","modified":1578045479807},{"_id":"public/tags/sdwebimage/index.html","hash":"4c2f6af325abf78fd621e06855c784ef69e91671","modified":1578045479807},{"_id":"public/tags/NSCalendar/index.html","hash":"198f239cc406cc821a267409f68154ac09bab5bd","modified":1578045479807},{"_id":"public/tags/UITextField/index.html","hash":"35253ab8475e1b43fa55420e96dfad6775af32f7","modified":1578045479807},{"_id":"public/tags/inputView/index.html","hash":"51645abee61619a2bff94ee2a55155b36ba58693","modified":1578045479807},{"_id":"public/tags/macdown/index.html","hash":"b8b7a43b49f2479897261323885b78494a5369af","modified":1578045479807},{"_id":"public/2020/01/03/first-blog/index.html","hash":"a8956c597704cb74552839e134a258458a6f4325","modified":1578045479807},{"_id":"public/2019/12/31/hello-world/index.html","hash":"7593427e918713ccb60c88be1926868e2e00a7f4","modified":1578045479807},{"_id":"public/2016/06/07/zi-ding-yi-jian-pan-he-shu-ru-kuang/index.html","hash":"76343c291b7b5253cfffe8c59db7dbfd05c2dc7d","modified":1578045479807},{"_id":"public/2016/05/31/shi-jian-ri-li-kong-jian/index.html","hash":"ec3f14d428678eb1acb3e28fa6dcaca5b815f839","modified":1578045479807},{"_id":"public/2016/03/21/multi-thread/index.html","hash":"292f274ab27bfa76c5f9c7059d604e0822f20b1e","modified":1578045479807},{"_id":"public/2016/03/08/ruan-jian-jia-gou-mvvm/index.html","hash":"c308b90a846b7800f570b9e34f78e3dd982cf63a","modified":1578045479807},{"_id":"public/2016/02/29/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding/index.html","hash":"bbfd95f20bd2413aca57f2758b4807953dee1649","modified":1578045479807},{"_id":"public/2016/02/29/runtimeyun-xing-shi-zhi-fang-fa-method/index.html","hash":"052a57c643b228c0c5c5922ff4cc825f3a6e452f","modified":1578045479807},{"_id":"public/2016/02/29/runtimeyun-xing-shi-zhi-bian-liang/index.html","hash":"bff5eefbc5f752fcda94b6c3a4976119666ee21e","modified":1578045479807},{"_id":"public/2016/02/29/runtimeyun-xing-shi-zhi-class/index.html","hash":"197a381d57b1daef523773f2f37ab7e664ebf61b","modified":1578045479807},{"_id":"public/2016/02/29/runtimeyun-xing-shi-de-li-jie/index.html","hash":"465c5154aaa2a6996c88d0eccfbfa9600e4113cc","modified":1578045479807},{"_id":"public/2016/02/21/sdwebimageyuan-ma-fen-xi/index.html","hash":"9f1fea2409edafda49338baae3b0112e155a6cb5","modified":1578045479807},{"_id":"public/2016/02/15/ji-yu-octopressde-github-pageschuang-jian/index.html","hash":"993ecec70249cac70ff42a68fc90218c2bef4472","modified":1578045479807},{"_id":"public/images/bird_32_gray.png","hash":"d14826ea3c724cbac219497e7221019655c657d2","modified":1578045479807},{"_id":"public/images/bird_32_gray_fail.png","hash":"e32c5c1bfde4a0027b5582cb4d1faf3297e45978","modified":1578045479807},{"_id":"public/images/code_bg.png","hash":"f234231d5e15a38782ae064ab6433369ab6eada7","modified":1578045479807},{"_id":"public/images/email.png","hash":"8360a8ceb0144288af7efbad8a7f4d7f83fa7fdd","modified":1578045479807},{"_id":"public/images/dotted-border.png","hash":"ff805a8400e9f0147ec03f8d6bf2ff6e91838f79","modified":1578045479807},{"_id":"public/images/line-tile.png","hash":"54f2fb96fea67bc6f88c8dc7c0831ff25f12d476","modified":1578045479807},{"_id":"public/images/rss.png","hash":"b1ade4d8ba253eea4687174e43e76628fb36d86b","modified":1578045479807},{"_id":"public/images/rss555.png","hash":"b1ade4d8ba253eea4687174e43e76628fb36d86b","modified":1578045479807},{"_id":"public/images/noise.png","hash":"2b45462f5b06fb5d719e858c231ffa8c05302f55","modified":1578045479807},{"_id":"public/images/runtime_class2.png","hash":"560d034cd3fc35ab0a2f7121211c04c58c8edccb","modified":1578045479807},{"_id":"public/images/runtime_method4.png","hash":"5b7ecc882fc7d346104c1597c2b71d79183c9ff9","modified":1578045479807},{"_id":"public/images/runtime_class6.png","hash":"5fd5a1812ae3d9e10a0e14f190b831fdff34a653","modified":1578045479807},{"_id":"public/images/runtime_variable1.png","hash":"3bf2f07a243c08fbf923353174c43802be69a244","modified":1578045479807},{"_id":"public/images/runtime_variable3.png","hash":"2af2bb2cbebdf0450f54342f7830c79a872afa71","modified":1578045479807},{"_id":"public/images/runtime_method3.png","hash":"a28d7d02a235595bbef41a8843d983945a1834dd","modified":1578045479807},{"_id":"public/images/runtime_class3.png","hash":"1971038426615b7eae0a257d61baccbbcd99ffc7","modified":1578045479807},{"_id":"public/images/runtime_variable2.png","hash":"a1f0b491726d57c0f89f522226a8a4404e7166ff","modified":1578045479807},{"_id":"public/images/search.png","hash":"75432e9810d369aba1bb623cf980527490b559d1","modified":1578045479807},{"_id":"public/images/webimage_flow.png","hash":"23a4fa696e719427976557846b19bf305ad72844","modified":1578045479807},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578045479807},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578045479807},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578045479807},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578045479807},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578045479807},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578045479807},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1578045479807},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1578045479807},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1578045479807},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1578045479807},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1578045479807},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1578045479807},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1578045479807},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1578045479807},{"_id":"public/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1578045479807},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1578045479807},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578045479807},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578045479807},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578045479807},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578045479807},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578045479807},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578045479807},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578045479807},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1578045479807},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1578045479807},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1578045479807},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1578045479807},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578045479807},{"_id":"public/images/mvvm1.png","hash":"c58ad33b17c1901ed18c97becdff1e921b134a55","modified":1578045479807},{"_id":"public/images/mvvm2.png","hash":"65afdb0941af2e3c396313ca3521e53f4c10ca9a","modified":1578045479807},{"_id":"public/images/runtime_method7.png","hash":"5e542c5a3572154bd56949968a8b67768edffcc0","modified":1578045479807},{"_id":"public/images/runtime_method1.png","hash":"fccd2da365734131b2726ac65ab1f15149c16267","modified":1578045479807},{"_id":"public/images/runtime_variable4.png","hash":"99c8984cb26b5bf331072c1488cb3c1ccefa0846","modified":1578045479807},{"_id":"public/images/sdwebimage_ifelse.png","hash":"af2701f8ddbc7d05b1625ee5a413b0b071cb2da1","modified":1578045479807},{"_id":"public/images/thread4.png","hash":"95b5b575c931b98ca85a8735d437e4f7d02e50ed","modified":1578045479807},{"_id":"public/images/downloadmanager.jpg","hash":"f457e41e953c528d2fd252c327a5c681e799987f","modified":1578045479807},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1578045479807},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1578045479807},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1578045479807},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1578045479807},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1578045479807},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1578045479807},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1578045479807},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1578045479807},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578045479807},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1578045479807},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1578045479807},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578045479807},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1578045479807},{"_id":"public/css/style.css","hash":"1737965b2ad2e4999c93bfa7657bdfc9990675f3","modified":1578045479807},{"_id":"public/images/runtime_class5.png","hash":"e29a7e2a32818967196188e4cd327f046d8879ee","modified":1578045479807},{"_id":"public/images/runtime_class4.png","hash":"070a7f9fad3455237e2cf6b71af1c94b8ccf5e7e","modified":1578045479807},{"_id":"public/images/runtime_forwarding1.png","hash":"c216ac56067935e7fdd3c6cced8babaf9bc934de","modified":1578045479807},{"_id":"public/images/sdwebimage.jpg","hash":"a49b47aa2cd0cb57b46c977798c583e0cb93f0a7","modified":1578045479807},{"_id":"public/images/runtime_variable5.png","hash":"f5b9295f170e56f6daadedd388ec5e423b41671e","modified":1578045479807},{"_id":"public/images/thread1.png","hash":"6ccde81b1bdde074585ebf03f23f4a32713f744c","modified":1578045479807},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1578045479807},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1578045479807},{"_id":"public/images/mvvm3.png","hash":"0829a5e8ce5441e378940341b05870eb1e7340bb","modified":1578045479807},{"_id":"public/images/runtime_method8.png","hash":"ce697e05ada024759b213a3bc4d9cd2b16333c18","modified":1578045479807},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1578045479807},{"_id":"public/images/runtime_method5.png","hash":"af2847340df0c316af24be10db71285c6c486e38","modified":1578045479807},{"_id":"public/images/github_url.png","hash":"ff4f85fc13132336bf38dc4a409fa2ea524d37ee","modified":1578045479807},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1578045479807},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1578045479807},{"_id":"public/images/thread2.png","hash":"aae4f6bfe10146d4ebcfcd29a36be9e136472316","modified":1578045479807},{"_id":"public/images/runtime_forwarding2.png","hash":"36206ffa0d70b518da792f7f02bec7145ea744ce","modified":1578045479807},{"_id":"public/images/runtime_method2.png","hash":"fc3c4a8d6a5fe9135bef9a2416bc460f445e939e","modified":1578045479807},{"_id":"public/images/thread3.png","hash":"c4c666fa5fc1b0d275921cdc63b99273908ea0eb","modified":1578045479807},{"_id":"public/images/runtime_method6.png","hash":"9077a42dd48d137dd1ef81a044a70f9863dc73e1","modified":1578045479807},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1578045479807},{"_id":"public/images/runtime_forwarding3.png","hash":"8127a72357b4e8fb8a305dc6054e3f5da42f47b7","modified":1578045479807},{"_id":"public/images/mvc.png","hash":"944e58f4c9fd3e2710ee042f031519c18aedc389","modified":1578045479807},{"_id":"public/images/runtime_class1.png","hash":"bbd8a3290cfe6ba42c786b4ce9ed041838beef96","modified":1578045479807}],"Category":[{"name":"OC","_id":"ck4xzj9aa000488s60zx0c2jq"},{"name":"开发","_id":"ck4xzj9af000a88s65ubt4530"},{"name":"软件架构","_id":"ck4xzj9aj000g88s6818fc3w1"},{"name":"多线程","_id":"ck4xzj9an000l88s68kbgf45q"},{"name":"runtime","_id":"ck4xzj9ar000s88s6gkanfall"},{"name":"架构","_id":"ck4xzj9ay001a88s641tg4tx7"},{"name":"图片下载","_id":"ck4xzj9b2001l88s64oup5bzh"},{"name":"日历","_id":"ck4xzj9b3001q88s67rbo5wh4"},{"name":"键盘","_id":"ck4xzj9b4001v88s6ddu939jq"},{"name":"macdown","_id":"ck4xzj9bf002888s69mwaf5sd"}],"Data":[],"Page":[],"Post":[{"title":"first blog test","date":"2019-12-31T08:50:14.000Z","_content":"\nit is a test\n\n<!-- more -->\n\n##title1\n\ntest1\n\n###title2\n\ntest2\n\n","source":"_posts/first-blog-test.md","raw":"---\ntitle: first blog test\ndate: 2019-12-31 16:50:14\ntags:\n- 测滑返回\n- 动画\ncategories:\n- [OC]\n- [开发]\n---\n\nit is a test\n\n<!-- more -->\n\n##title1\n\ntest1\n\n###title2\n\ntest2\n\n","slug":"first-blog-test","published":1,"updated":"2020-01-03T06:50:42.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4xzj99w000088s67e771oji","content":"<p>it is a test</p>\n<a id=\"more\"></a>\n\n<p>##title1</p>\n<p>test1</p>\n<p>###title2</p>\n<p>test2</p>\n","site":{"data":{}},"excerpt":"<p>it is a test</p>","more":"<p>##title1</p>\n<p>test1</p>\n<p>###title2</p>\n<p>test2</p>"},{"layout":"post","title":"记录一些好的网站或博客","date":"2016-05-11T10:20:05.000Z","comments":1,"_content":"\n业务模块间解除耦合\n\nhttp://blog.cnbang.net/tech/3080/\n\n<!-- more -->\n\n### 业务模块间解除耦合\n\nhttp://blog.cnbang.net/tech/3080/\n\nhttp://wereadteam.github.io/2016/03/19/iOS-Component/\n\nhttp://www.w2bc.com/article/114030\n\nhttp://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/\n","source":"_posts/ji-lu-yi-xie-hao-de-wang-zhan-huo-bo-ke.md","raw":"---\nlayout: post\ntitle: \"记录一些好的网站或博客\"\ndate: 2016-05-11 18:20:05 +0800\ncomments: true\ncategories: \n---\n\n业务模块间解除耦合\n\nhttp://blog.cnbang.net/tech/3080/\n\n<!-- more -->\n\n### 业务模块间解除耦合\n\nhttp://blog.cnbang.net/tech/3080/\n\nhttp://wereadteam.github.io/2016/03/19/iOS-Component/\n\nhttp://www.w2bc.com/article/114030\n\nhttp://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/\n","slug":"ji-lu-yi-xie-hao-de-wang-zhan-huo-bo-ke","published":1,"updated":"2020-01-02T11:54:37.653Z","photos":[],"link":"","_id":"ck4xzj9a5000188s6g70m967k","content":"<p>业务模块间解除耦合</p>\n<p><a href=\"http://blog.cnbang.net/tech/3080/\" target=\"_blank\" rel=\"noopener\">http://blog.cnbang.net/tech/3080/</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"业务模块间解除耦合\"><a href=\"#业务模块间解除耦合\" class=\"headerlink\" title=\"业务模块间解除耦合\"></a>业务模块间解除耦合</h3><p><a href=\"http://blog.cnbang.net/tech/3080/\" target=\"_blank\" rel=\"noopener\">http://blog.cnbang.net/tech/3080/</a></p>\n<p><a href=\"http://wereadteam.github.io/2016/03/19/iOS-Component/\" target=\"_blank\" rel=\"noopener\">http://wereadteam.github.io/2016/03/19/iOS-Component/</a></p>\n<p><a href=\"http://www.w2bc.com/article/114030\" target=\"_blank\" rel=\"noopener\">http://www.w2bc.com/article/114030</a></p>\n<p><a href=\"http://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/\" target=\"_blank\" rel=\"noopener\">http://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/</a></p>\n","site":{"data":{}},"excerpt":"<p>业务模块间解除耦合</p>\n<p><a href=\"http://blog.cnbang.net/tech/3080/\" target=\"_blank\" rel=\"noopener\">http://blog.cnbang.net/tech/3080/</a></p>","more":"<h3 id=\"业务模块间解除耦合\"><a href=\"#业务模块间解除耦合\" class=\"headerlink\" title=\"业务模块间解除耦合\"></a>业务模块间解除耦合</h3><p><a href=\"http://blog.cnbang.net/tech/3080/\" target=\"_blank\" rel=\"noopener\">http://blog.cnbang.net/tech/3080/</a></p>\n<p><a href=\"http://wereadteam.github.io/2016/03/19/iOS-Component/\" target=\"_blank\" rel=\"noopener\">http://wereadteam.github.io/2016/03/19/iOS-Component/</a></p>\n<p><a href=\"http://www.w2bc.com/article/114030\" target=\"_blank\" rel=\"noopener\">http://www.w2bc.com/article/114030</a></p>\n<p><a href=\"http://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/\" target=\"_blank\" rel=\"noopener\">http://www.blackaile.com/2015/11/29/%E9%80%9A%E8%BF%87NSNotificationCenter%E4%BB%A5%E5%8F%8ARuntime%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E8%80%A6%E5%90%88/</a></p>"},{"layout":"post","title":"基于octopress的github-pages创建","date":"2016-02-15T13:56:10.000Z","comments":1,"_content":"\n具体搭建博客的步骤参考这些链接\n\nhttp://sherlockyao.com/blog/2014/05/23/hello-blogging/\n\n<!-- more -->\n\n### 具体搭建博客的步骤参考这些链接\n\nhttp://sherlockyao.com/blog/2014/05/23/hello-blogging/\n\nhttp://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/\n\nhttp://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html\n\nhttp://yinkang.me/archives/194\n\nhttp://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/\n\nhttp://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/\n\nhttp://jekyllthemes.org/\nhttps://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes\n\nhttp://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/\n\nhttp://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github\n\n### 发博文常用步骤\n\n```\ncd octopress\nrake setup_github_pages\n```\n输入要链接的URL ,就是github上面仓库为XXX.github.io里面的URL,我的是https://github.com/liu3399shuai/liu3399shuai.github.io.git\n\n![](/images/github_url.png)\n\n新建博文\n\n```\nrake new_post[\"输入博文的title\"]\n```\n完了后去source/_post里面就可以看到了\n\n打开博文，使用markdown软件编辑，[macDown](http://macdown.uranusjr.com/) 或者 [Mou](http://25.io/mou/)都可以,写完后去生成网页，发布\n\n```\nrake generate\nrake deploy\n或者两个命令连城一个 rake gen_deploy\n```\n这个是发布的，发布成功后，隔几秒，刷新下github-page主页\n\n`不要忘了`，保留更改的source文件\n\n```\ngit commit -m'msg'\ngit push origin source\n```\n\n### 注意问题\n\n在走到bundle install 这一步时候，经常失败，比如原因有如下这个\n\n```\nDon't run Bundler as root. Bundler can ask for sudo if it is needed, and\ninstalling your bundle as root will break this application for all non-root\nusers on this machine.\nFetching gem metadata from https://rubygems.org/...........\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...\nUsing rake 10.4.2\nUsing RedCloth 4.2.9\nUsing blankslate 2.1.2.4\nUsing hitimes 1.2.2\nUsing timers 4.0.1\nUsing celluloid 0.16.0\nUsing chunky_png 1.3.4\nUsing fast-stemmer 1.0.2\nUsing classifier-reborn 2.0.3\nUsing coffee-script-source 1.9.1.1\nUsing execjs 2.5.2\nUsing coffee-script 2.4.1\nUsing colorator 0.1\nUsing multi_json 1.11.2\nUsing sass 3.4.15\nUsing compass-core 1.0.3\nUsing compass-import-once 1.0.5\nUsing rb-fsevent 0.9.5\nUsing ffi 1.9.10\n\nGem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://rubygems.org/gems/rb-inotify-0.9.5.gem)\nAn error occurred while installing rb-inotify (0.9.5), and Bundler cannot\ncontinue.\nMake sure that `gem install rb-inotify -v '0.9.5'` succeeds before bundling.\n```\n\n因为国内被墙的原因，解决方案 :在执行目录下得到一个Gemfile文件，用文本编辑器打开，修改为\n```\nsource \"https://ruby.taobao.org\"\n```\n\n如果在使用 rake deploy rake gen_deploy 时候报出这样的错误，需要同步一下\n\n```\nPushing generated _deploy website\nTo https://github.com/liu3399shuai/liu3399shuai.github.io.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/liu3399shuai/liu3399shuai.github.io.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nGithub Pages deploy complete\n```\n\n同步命令\n\n```\ncd _deploy\ngit reset --hard origin/master\ncd ..\n```\n\n联系我 <liu3399shuai@163.com>\n\n或者我的网站 <https://github.com>\n","source":"_posts/ji-yu-octopressde-github-pageschuang-jian.md","raw":"---\nlayout: post\ntitle: \"基于octopress的github-pages创建\"\ndate: 2016-02-15 21:56:10 +0800\ncomments: true\ncategories: \n---\n\n具体搭建博客的步骤参考这些链接\n\nhttp://sherlockyao.com/blog/2014/05/23/hello-blogging/\n\n<!-- more -->\n\n### 具体搭建博客的步骤参考这些链接\n\nhttp://sherlockyao.com/blog/2014/05/23/hello-blogging/\n\nhttp://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/\n\nhttp://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html\n\nhttp://yinkang.me/archives/194\n\nhttp://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/\n\nhttp://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/\n\nhttp://jekyllthemes.org/\nhttps://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes\n\nhttp://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/\n\nhttp://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github\n\n### 发博文常用步骤\n\n```\ncd octopress\nrake setup_github_pages\n```\n输入要链接的URL ,就是github上面仓库为XXX.github.io里面的URL,我的是https://github.com/liu3399shuai/liu3399shuai.github.io.git\n\n![](/images/github_url.png)\n\n新建博文\n\n```\nrake new_post[\"输入博文的title\"]\n```\n完了后去source/_post里面就可以看到了\n\n打开博文，使用markdown软件编辑，[macDown](http://macdown.uranusjr.com/) 或者 [Mou](http://25.io/mou/)都可以,写完后去生成网页，发布\n\n```\nrake generate\nrake deploy\n或者两个命令连城一个 rake gen_deploy\n```\n这个是发布的，发布成功后，隔几秒，刷新下github-page主页\n\n`不要忘了`，保留更改的source文件\n\n```\ngit commit -m'msg'\ngit push origin source\n```\n\n### 注意问题\n\n在走到bundle install 这一步时候，经常失败，比如原因有如下这个\n\n```\nDon't run Bundler as root. Bundler can ask for sudo if it is needed, and\ninstalling your bundle as root will break this application for all non-root\nusers on this machine.\nFetching gem metadata from https://rubygems.org/...........\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...\nUsing rake 10.4.2\nUsing RedCloth 4.2.9\nUsing blankslate 2.1.2.4\nUsing hitimes 1.2.2\nUsing timers 4.0.1\nUsing celluloid 0.16.0\nUsing chunky_png 1.3.4\nUsing fast-stemmer 1.0.2\nUsing classifier-reborn 2.0.3\nUsing coffee-script-source 1.9.1.1\nUsing execjs 2.5.2\nUsing coffee-script 2.4.1\nUsing colorator 0.1\nUsing multi_json 1.11.2\nUsing sass 3.4.15\nUsing compass-core 1.0.3\nUsing compass-import-once 1.0.5\nUsing rb-fsevent 0.9.5\nUsing ffi 1.9.10\n\nGem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://rubygems.org/gems/rb-inotify-0.9.5.gem)\nAn error occurred while installing rb-inotify (0.9.5), and Bundler cannot\ncontinue.\nMake sure that `gem install rb-inotify -v '0.9.5'` succeeds before bundling.\n```\n\n因为国内被墙的原因，解决方案 :在执行目录下得到一个Gemfile文件，用文本编辑器打开，修改为\n```\nsource \"https://ruby.taobao.org\"\n```\n\n如果在使用 rake deploy rake gen_deploy 时候报出这样的错误，需要同步一下\n\n```\nPushing generated _deploy website\nTo https://github.com/liu3399shuai/liu3399shuai.github.io.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/liu3399shuai/liu3399shuai.github.io.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nGithub Pages deploy complete\n```\n\n同步命令\n\n```\ncd _deploy\ngit reset --hard origin/master\ncd ..\n```\n\n联系我 <liu3399shuai@163.com>\n\n或者我的网站 <https://github.com>\n","slug":"ji-yu-octopressde-github-pageschuang-jian","published":1,"updated":"2020-01-02T11:51:12.169Z","photos":[],"link":"","_id":"ck4xzj9aa000388s6et9o05ge","content":"<p>具体搭建博客的步骤参考这些链接</p>\n<p><a href=\"http://sherlockyao.com/blog/2014/05/23/hello-blogging/\" target=\"_blank\" rel=\"noopener\">http://sherlockyao.com/blog/2014/05/23/hello-blogging/</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"具体搭建博客的步骤参考这些链接\"><a href=\"#具体搭建博客的步骤参考这些链接\" class=\"headerlink\" title=\"具体搭建博客的步骤参考这些链接\"></a>具体搭建博客的步骤参考这些链接</h3><p><a href=\"http://sherlockyao.com/blog/2014/05/23/hello-blogging/\" target=\"_blank\" rel=\"noopener\">http://sherlockyao.com/blog/2014/05/23/hello-blogging/</a></p>\n<p><a href=\"http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/\" target=\"_blank\" rel=\"noopener\">http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/</a></p>\n<p><a href=\"http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html\" target=\"_blank\" rel=\"noopener\">http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html</a></p>\n<p><a href=\"http://yinkang.me/archives/194\" target=\"_blank\" rel=\"noopener\">http://yinkang.me/archives/194</a></p>\n<p><a href=\"http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/\" target=\"_blank\" rel=\"noopener\">http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/</a></p>\n<p><a href=\"http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/\" target=\"_blank\" rel=\"noopener\">http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/</a></p>\n<p><a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">http://jekyllthemes.org/</a><br><a href=\"https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>\n<p><a href=\"http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/\" target=\"_blank\" rel=\"noopener\">http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/</a></p>\n<p><a href=\"http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github</a></p>\n<h3 id=\"发博文常用步骤\"><a href=\"#发博文常用步骤\" class=\"headerlink\" title=\"发博文常用步骤\"></a>发博文常用步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd octopress</span><br><span class=\"line\">rake setup_github_pages</span><br></pre></td></tr></table></figure>\n<p>输入要链接的URL ,就是github上面仓库为XXX.github.io里面的URL,我的是<a href=\"https://github.com/liu3399shuai/liu3399shuai.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/liu3399shuai/liu3399shuai.github.io.git</a></p>\n<p><img src=\"/images/github_url.png\" alt=\"\"></p>\n<p>新建博文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_post[&quot;输入博文的title&quot;]</span><br></pre></td></tr></table></figure>\n<p>完了后去source/_post里面就可以看到了</p>\n<p>打开博文，使用markdown软件编辑，<a href=\"http://macdown.uranusjr.com/\" target=\"_blank\" rel=\"noopener\">macDown</a> 或者 <a href=\"http://25.io/mou/\" target=\"_blank\" rel=\"noopener\">Mou</a>都可以,写完后去生成网页，发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake generate</span><br><span class=\"line\">rake deploy</span><br><span class=\"line\">或者两个命令连城一个 rake gen_deploy</span><br></pre></td></tr></table></figure>\n<p>这个是发布的，发布成功后，隔几秒，刷新下github-page主页</p>\n<p><code>不要忘了</code>，保留更改的source文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m&#39;msg&#39;</span><br><span class=\"line\">git push origin source</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意问题\"><a href=\"#注意问题\" class=\"headerlink\" title=\"注意问题\"></a>注意问题</h3><p>在走到bundle install 这一步时候，经常失败，比如原因有如下这个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Don&#39;t run Bundler as root. Bundler can ask for sudo if it is needed, and</span><br><span class=\"line\">installing your bundle as root will break this application for all non-root</span><br><span class=\"line\">users on this machine.</span><br><span class=\"line\">Fetching gem metadata from https:&#x2F;&#x2F;rubygems.org&#x2F;...........</span><br><span class=\"line\">Fetching version metadata from https:&#x2F;&#x2F;rubygems.org&#x2F;...</span><br><span class=\"line\">Fetching dependency metadata from https:&#x2F;&#x2F;rubygems.org&#x2F;..</span><br><span class=\"line\">Resolving dependencies...</span><br><span class=\"line\">Using rake 10.4.2</span><br><span class=\"line\">Using RedCloth 4.2.9</span><br><span class=\"line\">Using blankslate 2.1.2.4</span><br><span class=\"line\">Using hitimes 1.2.2</span><br><span class=\"line\">Using timers 4.0.1</span><br><span class=\"line\">Using celluloid 0.16.0</span><br><span class=\"line\">Using chunky_png 1.3.4</span><br><span class=\"line\">Using fast-stemmer 1.0.2</span><br><span class=\"line\">Using classifier-reborn 2.0.3</span><br><span class=\"line\">Using coffee-script-source 1.9.1.1</span><br><span class=\"line\">Using execjs 2.5.2</span><br><span class=\"line\">Using coffee-script 2.4.1</span><br><span class=\"line\">Using colorator 0.1</span><br><span class=\"line\">Using multi_json 1.11.2</span><br><span class=\"line\">Using sass 3.4.15</span><br><span class=\"line\">Using compass-core 1.0.3</span><br><span class=\"line\">Using compass-import-once 1.0.5</span><br><span class=\"line\">Using rb-fsevent 0.9.5</span><br><span class=\"line\">Using ffi 1.9.10</span><br><span class=\"line\"></span><br><span class=\"line\">Gem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https:&#x2F;&#x2F;rubygems.org&#x2F;gems&#x2F;rb-inotify-0.9.5.gem)</span><br><span class=\"line\">An error occurred while installing rb-inotify (0.9.5), and Bundler cannot</span><br><span class=\"line\">continue.</span><br><span class=\"line\">Make sure that &#96;gem install rb-inotify -v &#39;0.9.5&#39;&#96; succeeds before bundling.</span><br></pre></td></tr></table></figure>\n\n<p>因为国内被墙的原因，解决方案 :在执行目录下得到一个Gemfile文件，用文本编辑器打开，修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &quot;https:&#x2F;&#x2F;ruby.taobao.org&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果在使用 rake deploy rake gen_deploy 时候报出这样的错误，需要同步一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pushing generated _deploy website</span><br><span class=\"line\">To https:&#x2F;&#x2F;github.com&#x2F;liu3399shuai&#x2F;liu3399shuai.github.io.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &#39;https:&#x2F;&#x2F;github.com&#x2F;liu3399shuai&#x2F;liu3399shuai.github.io.git&#39;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class=\"line\">hint: &#39;git pull ...&#39;) before pushing again.</span><br><span class=\"line\">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">Github Pages deploy complete</span><br></pre></td></tr></table></figure>\n\n<p>同步命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd _deploy</span><br><span class=\"line\">git reset --hard origin&#x2F;master</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>联系我 <a href=\"mailto:&#x6c;&#105;&#x75;&#x33;&#51;&#x39;&#x39;&#115;&#104;&#x75;&#97;&#x69;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;\">&#x6c;&#105;&#x75;&#x33;&#51;&#x39;&#x39;&#115;&#104;&#x75;&#97;&#x69;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;</a></p>\n<p>或者我的网站 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">https://github.com</a></p>\n","site":{"data":{}},"excerpt":"<p>具体搭建博客的步骤参考这些链接</p>\n<p><a href=\"http://sherlockyao.com/blog/2014/05/23/hello-blogging/\" target=\"_blank\" rel=\"noopener\">http://sherlockyao.com/blog/2014/05/23/hello-blogging/</a></p>","more":"<h3 id=\"具体搭建博客的步骤参考这些链接\"><a href=\"#具体搭建博客的步骤参考这些链接\" class=\"headerlink\" title=\"具体搭建博客的步骤参考这些链接\"></a>具体搭建博客的步骤参考这些链接</h3><p><a href=\"http://sherlockyao.com/blog/2014/05/23/hello-blogging/\" target=\"_blank\" rel=\"noopener\">http://sherlockyao.com/blog/2014/05/23/hello-blogging/</a></p>\n<p><a href=\"http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/\" target=\"_blank\" rel=\"noopener\">http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/</a></p>\n<p><a href=\"http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html\" target=\"_blank\" rel=\"noopener\">http://www.pchou.info/web-build/2014/07/04/build-github-blog-page-08.html</a></p>\n<p><a href=\"http://yinkang.me/archives/194\" target=\"_blank\" rel=\"noopener\">http://yinkang.me/archives/194</a></p>\n<p><a href=\"http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/\" target=\"_blank\" rel=\"noopener\">http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/</a></p>\n<p><a href=\"http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/\" target=\"_blank\" rel=\"noopener\">http://kejiwen.com/blog/2014/12/07/build-octopress-blog-record/</a></p>\n<p><a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">http://jekyllthemes.org/</a><br><a href=\"https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes\" target=\"_blank\" rel=\"noopener\">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>\n<p><a href=\"http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/\" target=\"_blank\" rel=\"noopener\">http://cnbin.github.io/blog/2015/05/18/octopressbo-ke-da-jian/</a></p>\n<p><a href=\"http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github</a></p>\n<h3 id=\"发博文常用步骤\"><a href=\"#发博文常用步骤\" class=\"headerlink\" title=\"发博文常用步骤\"></a>发博文常用步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd octopress</span><br><span class=\"line\">rake setup_github_pages</span><br></pre></td></tr></table></figure>\n<p>输入要链接的URL ,就是github上面仓库为XXX.github.io里面的URL,我的是<a href=\"https://github.com/liu3399shuai/liu3399shuai.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/liu3399shuai/liu3399shuai.github.io.git</a></p>\n<p><img src=\"/images/github_url.png\" alt=\"\"></p>\n<p>新建博文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake new_post[&quot;输入博文的title&quot;]</span><br></pre></td></tr></table></figure>\n<p>完了后去source/_post里面就可以看到了</p>\n<p>打开博文，使用markdown软件编辑，<a href=\"http://macdown.uranusjr.com/\" target=\"_blank\" rel=\"noopener\">macDown</a> 或者 <a href=\"http://25.io/mou/\" target=\"_blank\" rel=\"noopener\">Mou</a>都可以,写完后去生成网页，发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rake generate</span><br><span class=\"line\">rake deploy</span><br><span class=\"line\">或者两个命令连城一个 rake gen_deploy</span><br></pre></td></tr></table></figure>\n<p>这个是发布的，发布成功后，隔几秒，刷新下github-page主页</p>\n<p><code>不要忘了</code>，保留更改的source文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m&#39;msg&#39;</span><br><span class=\"line\">git push origin source</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意问题\"><a href=\"#注意问题\" class=\"headerlink\" title=\"注意问题\"></a>注意问题</h3><p>在走到bundle install 这一步时候，经常失败，比如原因有如下这个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Don&#39;t run Bundler as root. Bundler can ask for sudo if it is needed, and</span><br><span class=\"line\">installing your bundle as root will break this application for all non-root</span><br><span class=\"line\">users on this machine.</span><br><span class=\"line\">Fetching gem metadata from https:&#x2F;&#x2F;rubygems.org&#x2F;...........</span><br><span class=\"line\">Fetching version metadata from https:&#x2F;&#x2F;rubygems.org&#x2F;...</span><br><span class=\"line\">Fetching dependency metadata from https:&#x2F;&#x2F;rubygems.org&#x2F;..</span><br><span class=\"line\">Resolving dependencies...</span><br><span class=\"line\">Using rake 10.4.2</span><br><span class=\"line\">Using RedCloth 4.2.9</span><br><span class=\"line\">Using blankslate 2.1.2.4</span><br><span class=\"line\">Using hitimes 1.2.2</span><br><span class=\"line\">Using timers 4.0.1</span><br><span class=\"line\">Using celluloid 0.16.0</span><br><span class=\"line\">Using chunky_png 1.3.4</span><br><span class=\"line\">Using fast-stemmer 1.0.2</span><br><span class=\"line\">Using classifier-reborn 2.0.3</span><br><span class=\"line\">Using coffee-script-source 1.9.1.1</span><br><span class=\"line\">Using execjs 2.5.2</span><br><span class=\"line\">Using coffee-script 2.4.1</span><br><span class=\"line\">Using colorator 0.1</span><br><span class=\"line\">Using multi_json 1.11.2</span><br><span class=\"line\">Using sass 3.4.15</span><br><span class=\"line\">Using compass-core 1.0.3</span><br><span class=\"line\">Using compass-import-once 1.0.5</span><br><span class=\"line\">Using rb-fsevent 0.9.5</span><br><span class=\"line\">Using ffi 1.9.10</span><br><span class=\"line\"></span><br><span class=\"line\">Gem::RemoteFetcher::FetchError: Errno::ECONNRESET: Connection reset by peer - SSL_connect (https:&#x2F;&#x2F;rubygems.org&#x2F;gems&#x2F;rb-inotify-0.9.5.gem)</span><br><span class=\"line\">An error occurred while installing rb-inotify (0.9.5), and Bundler cannot</span><br><span class=\"line\">continue.</span><br><span class=\"line\">Make sure that &#96;gem install rb-inotify -v &#39;0.9.5&#39;&#96; succeeds before bundling.</span><br></pre></td></tr></table></figure>\n\n<p>因为国内被墙的原因，解决方案 :在执行目录下得到一个Gemfile文件，用文本编辑器打开，修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &quot;https:&#x2F;&#x2F;ruby.taobao.org&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果在使用 rake deploy rake gen_deploy 时候报出这样的错误，需要同步一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pushing generated _deploy website</span><br><span class=\"line\">To https:&#x2F;&#x2F;github.com&#x2F;liu3399shuai&#x2F;liu3399shuai.github.io.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &#39;https:&#x2F;&#x2F;github.com&#x2F;liu3399shuai&#x2F;liu3399shuai.github.io.git&#39;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class=\"line\">hint: &#39;git pull ...&#39;) before pushing again.</span><br><span class=\"line\">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">Github Pages deploy complete</span><br></pre></td></tr></table></figure>\n\n<p>同步命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd _deploy</span><br><span class=\"line\">git reset --hard origin&#x2F;master</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>联系我 <a href=\"mailto:&#x6c;&#105;&#x75;&#x33;&#51;&#x39;&#x39;&#115;&#104;&#x75;&#97;&#x69;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;\">&#x6c;&#105;&#x75;&#x33;&#51;&#x39;&#x39;&#115;&#104;&#x75;&#97;&#x69;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;</a></p>\n<p>或者我的网站 <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">https://github.com</a></p>"},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in\n\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in\n\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2019-12-31T08:32:46.534Z","updated":"2020-01-02T11:51:51.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4xzj9ab000588s6air07fq6","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in</p>\n<a id=\"more\"></a>\n\n<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in</p>","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"layout":"post","title":"技术博客","date":"2016-02-20T04:31:42.000Z","comments":1,"_content":"\n开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！\n\n<!-- more -->\n\n开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！\n\n努力！奋斗！\n","source":"_posts/ji-zhu-bo-ke.md","raw":"---\nlayout: post\ntitle: \"技术博客\"\ndate: 2016-02-20 12:31:42 +0800\ncomments: true\ncategories: \n---\n\n开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！\n\n<!-- more -->\n\n开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！\n\n努力！奋斗！\n","slug":"ji-zhu-bo-ke","published":1,"updated":"2020-01-02T11:50:59.626Z","photos":[],"link":"","_id":"ck4xzj9ac000688s69xlo3wty","content":"<p>开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！</p>\n<a id=\"more\"></a>\n\n<p>开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！</p>\n<p>努力！奋斗！</p>\n","site":{"data":{}},"excerpt":"<p>开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！</p>","more":"<p>开通了技术博客，希望以后在这里写点东西，可以自己写一些总结之类的，也可以翻译国外的优秀文章，希望每个月能有一篇漂亮的博文！</p>\n<p>努力！奋斗！</p>"},{"layout":"post","title":"软件设计层次架构","date":"2016-03-08T10:33:52.000Z","comments":1,"_content":"\n软件层次\n\n`工具层`(utility，通用的工具，和具体的业务无关)\n\n`网络层`(负责和server进行交互)\n\n<!-- more -->\n\n### 软件层次\n\n`工具层`(utility，通用的工具，和具体的业务无关)\n\n`网络层`(负责和server进行交互)\n\n`数据持久层`(本地缓存、数据库)\n\n`model层`(原始数据的类载体，比如来自网络或数据库的时间戳，不进行处数据理)\n\n`逻辑层`(viewmodel层，软件业务功能逻辑相关，可以给每个界面增加个逻辑层，也可以给一个业务功能多个界面增加一个逻辑层)\n\n`UI层`(显示的view)\n\n`控制层`(controller是个大杂炖，上面那些层都在这个controller里面彼此交互)\n\n### 软件框架\n\n##### 大多是`MVC`模式\n\n![](/images/mvc.png)\n\n缺点：经常会导致C很臃肿，不易管理，所以出现了MVVM。\n\n##### MVVM模式\n\n`MVVM`就是将业务逻辑从controller里面抽出来单独生成一个类，降低耦合\n\n如果要想把业务逻辑从controller中抽取出来，以实现逻辑层(viewmodel)是逻辑的载体，那么逻辑层至少需要\n\n```\n1 实时的接受view里面各种数据源和事件源的变化(比如输入框、按钮等)\n2 逻辑任务处理完成后将数据、动作输出至view/controller\n```\n\n要实现这两条，就需要`响应式编程`的概念。\n\n```\n函数响应式编程(Functional Reactive Programing : FRP)  :  面向数据流的变化传播(管道处理，比如过滤，类型映射，订阅，组合,属性绑定)\n```\n\n比如 excel 3-8数码管 订阅(公众号、日报),详见[wiki](https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B)\n\n数据流，逻辑流 这种概念思想很重要,和命令式编程大不一样\n\n由此，`Reactive Cocoa` 应运而生。\n\nReactive Cocoa 可以承担以下任务\n\n1 数据流统一封装分发\n\n![](/images/mvvm3.png)\n\n2 数据(双向)绑定\n\n![](/images/mvvm1.png)\n\n3 动作事件通知\n\n![](/images/mvvm2.png)\n\n代码实例\n\n```\n// data binding\nRAC(_viewModel,phone) = _phoneTF.rac_textSignal; // 这样可以(只能)观察到textField 源于键盘输入导致的值变化\nRAC(_phoneTF,text) = [RACObserve(_viewModel, phone) distinctUntilChanged];\n\n// 清空_phoneTF\n_viewModel.phone = @\"\"; // 代码实现\n// _phoneTF.text = nil; // 这种方式不行\n```\n\n关于使用RAC(...)，有时会有这样的错误`error : is already bound to key path \"\" on object  rac`，原因是\n\n```\nRAC(self.viewModel,smsCode) = _phoneTF.rac_textSignal;\nRAC(self.viewModel,smsCode) = _codeTF.rac_textSignal;\n给smsCode只能绑定一次,绑给别的信号了，就不能再绑给另外一个信号了,所以绑定慎用，但可以subscribeNext啊\n```\n\n[RACSignal createSignal] 方式创建signal，只创建一次就OK\n\n```\n-(RACSignal *)validatePhoneSignal\n{\n    if (!_validatePhoneSignal) {\n        _validatePhoneSignal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {\n            \n            if (isValid([[UserBaseInfo share] identityName]) && _idCode.length != 15 && _idCode.length != 18) {\n                [subscriber sendError:Error(errCode_toast, @\"请输入正确的15或18位身份证号\")];\n                return nil;\n            }\n            \n            [_service verifyCode:_smsCode idCard:_idCode finish:^(NSError *error) {\n                \n                if (error) {\n                    [subscriber sendError:error];\n                }else{\n                    \n                    [subscriber sendNext:@(YES)];\n                    [subscriber sendCompleted];\n                }\n            }];\n            \n            return nil;\n        }];\n    }\n    \n    return _validatePhoneSignal;\n}\n```\n\n[RACSubject subject] 创建的signal，每次都得创建\n\n```\n-(RACSignal *)rechargeSignal\n{    \n    RACReplaySubject *subject = [RACReplaySubject subject];\n    _rechargeSignal = [subject deliverOnMainThread];\n    \n    [self.submitSignal subscribeNext:^(NSNumber *x) {\n        \n        if (x.boolValue) {\n            [subject sendNext:@(YES)];\n            [subject sendCompleted];\n        }else{\n            [self.querySignal subscribeNext:^(id x) {\n                [subject sendNext:@(YES)];\n                [subject sendCompleted];\n            } error:^(NSError *error) {\n                [subject sendError:error];\n            }];\n        }\n        \n    } error:^(NSError *error) {\n        [subject sendError:error];\n    }];\n            \n    return _rechargeSignal;\n}\n```\n\n\n","source":"_posts/ruan-jian-jia-gou-mvvm.md","raw":"---\nlayout: post\ntitle: \"软件设计层次架构\"\ndate: 2016-03-08 18:33:52 +0800\ncomments: true\ntags:\n- MVVM\ncategories:\n- [软件架构]\n- [架构]\n---\n\n软件层次\n\n`工具层`(utility，通用的工具，和具体的业务无关)\n\n`网络层`(负责和server进行交互)\n\n<!-- more -->\n\n### 软件层次\n\n`工具层`(utility，通用的工具，和具体的业务无关)\n\n`网络层`(负责和server进行交互)\n\n`数据持久层`(本地缓存、数据库)\n\n`model层`(原始数据的类载体，比如来自网络或数据库的时间戳，不进行处数据理)\n\n`逻辑层`(viewmodel层，软件业务功能逻辑相关，可以给每个界面增加个逻辑层，也可以给一个业务功能多个界面增加一个逻辑层)\n\n`UI层`(显示的view)\n\n`控制层`(controller是个大杂炖，上面那些层都在这个controller里面彼此交互)\n\n### 软件框架\n\n##### 大多是`MVC`模式\n\n![](/images/mvc.png)\n\n缺点：经常会导致C很臃肿，不易管理，所以出现了MVVM。\n\n##### MVVM模式\n\n`MVVM`就是将业务逻辑从controller里面抽出来单独生成一个类，降低耦合\n\n如果要想把业务逻辑从controller中抽取出来，以实现逻辑层(viewmodel)是逻辑的载体，那么逻辑层至少需要\n\n```\n1 实时的接受view里面各种数据源和事件源的变化(比如输入框、按钮等)\n2 逻辑任务处理完成后将数据、动作输出至view/controller\n```\n\n要实现这两条，就需要`响应式编程`的概念。\n\n```\n函数响应式编程(Functional Reactive Programing : FRP)  :  面向数据流的变化传播(管道处理，比如过滤，类型映射，订阅，组合,属性绑定)\n```\n\n比如 excel 3-8数码管 订阅(公众号、日报),详见[wiki](https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B)\n\n数据流，逻辑流 这种概念思想很重要,和命令式编程大不一样\n\n由此，`Reactive Cocoa` 应运而生。\n\nReactive Cocoa 可以承担以下任务\n\n1 数据流统一封装分发\n\n![](/images/mvvm3.png)\n\n2 数据(双向)绑定\n\n![](/images/mvvm1.png)\n\n3 动作事件通知\n\n![](/images/mvvm2.png)\n\n代码实例\n\n```\n// data binding\nRAC(_viewModel,phone) = _phoneTF.rac_textSignal; // 这样可以(只能)观察到textField 源于键盘输入导致的值变化\nRAC(_phoneTF,text) = [RACObserve(_viewModel, phone) distinctUntilChanged];\n\n// 清空_phoneTF\n_viewModel.phone = @\"\"; // 代码实现\n// _phoneTF.text = nil; // 这种方式不行\n```\n\n关于使用RAC(...)，有时会有这样的错误`error : is already bound to key path \"\" on object  rac`，原因是\n\n```\nRAC(self.viewModel,smsCode) = _phoneTF.rac_textSignal;\nRAC(self.viewModel,smsCode) = _codeTF.rac_textSignal;\n给smsCode只能绑定一次,绑给别的信号了，就不能再绑给另外一个信号了,所以绑定慎用，但可以subscribeNext啊\n```\n\n[RACSignal createSignal] 方式创建signal，只创建一次就OK\n\n```\n-(RACSignal *)validatePhoneSignal\n{\n    if (!_validatePhoneSignal) {\n        _validatePhoneSignal = [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {\n            \n            if (isValid([[UserBaseInfo share] identityName]) && _idCode.length != 15 && _idCode.length != 18) {\n                [subscriber sendError:Error(errCode_toast, @\"请输入正确的15或18位身份证号\")];\n                return nil;\n            }\n            \n            [_service verifyCode:_smsCode idCard:_idCode finish:^(NSError *error) {\n                \n                if (error) {\n                    [subscriber sendError:error];\n                }else{\n                    \n                    [subscriber sendNext:@(YES)];\n                    [subscriber sendCompleted];\n                }\n            }];\n            \n            return nil;\n        }];\n    }\n    \n    return _validatePhoneSignal;\n}\n```\n\n[RACSubject subject] 创建的signal，每次都得创建\n\n```\n-(RACSignal *)rechargeSignal\n{    \n    RACReplaySubject *subject = [RACReplaySubject subject];\n    _rechargeSignal = [subject deliverOnMainThread];\n    \n    [self.submitSignal subscribeNext:^(NSNumber *x) {\n        \n        if (x.boolValue) {\n            [subject sendNext:@(YES)];\n            [subject sendCompleted];\n        }else{\n            [self.querySignal subscribeNext:^(id x) {\n                [subject sendNext:@(YES)];\n                [subject sendCompleted];\n            } error:^(NSError *error) {\n                [subject sendError:error];\n            }];\n        }\n        \n    } error:^(NSError *error) {\n        [subject sendError:error];\n    }];\n            \n    return _rechargeSignal;\n}\n```\n\n\n","slug":"ruan-jian-jia-gou-mvvm","published":1,"updated":"2020-01-03T06:29:25.593Z","photos":[],"link":"","_id":"ck4xzj9ae000888s6418ved7h","content":"<p>软件层次</p>\n<p><code>工具层</code>(utility，通用的工具，和具体的业务无关)</p>\n<p><code>网络层</code>(负责和server进行交互)</p>\n<a id=\"more\"></a>\n\n<h3 id=\"软件层次\"><a href=\"#软件层次\" class=\"headerlink\" title=\"软件层次\"></a>软件层次</h3><p><code>工具层</code>(utility，通用的工具，和具体的业务无关)</p>\n<p><code>网络层</code>(负责和server进行交互)</p>\n<p><code>数据持久层</code>(本地缓存、数据库)</p>\n<p><code>model层</code>(原始数据的类载体，比如来自网络或数据库的时间戳，不进行处数据理)</p>\n<p><code>逻辑层</code>(viewmodel层，软件业务功能逻辑相关，可以给每个界面增加个逻辑层，也可以给一个业务功能多个界面增加一个逻辑层)</p>\n<p><code>UI层</code>(显示的view)</p>\n<p><code>控制层</code>(controller是个大杂炖，上面那些层都在这个controller里面彼此交互)</p>\n<h3 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h3><h5 id=\"大多是MVC模式\"><a href=\"#大多是MVC模式\" class=\"headerlink\" title=\"大多是MVC模式\"></a>大多是<code>MVC</code>模式</h5><p><img src=\"/images/mvc.png\" alt=\"\"></p>\n<p>缺点：经常会导致C很臃肿，不易管理，所以出现了MVVM。</p>\n<h5 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h5><p><code>MVVM</code>就是将业务逻辑从controller里面抽出来单独生成一个类，降低耦合</p>\n<p>如果要想把业务逻辑从controller中抽取出来，以实现逻辑层(viewmodel)是逻辑的载体，那么逻辑层至少需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 实时的接受view里面各种数据源和事件源的变化(比如输入框、按钮等)</span><br><span class=\"line\">2 逻辑任务处理完成后将数据、动作输出至view&#x2F;controller</span><br></pre></td></tr></table></figure>\n\n<p>要实现这两条，就需要<code>响应式编程</code>的概念。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数响应式编程(Functional Reactive Programing : FRP)  :  面向数据流的变化传播(管道处理，比如过滤，类型映射，订阅，组合,属性绑定)</span><br></pre></td></tr></table></figure>\n\n<p>比如 excel 3-8数码管 订阅(公众号、日报),详见<a href=\"https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n<p>数据流，逻辑流 这种概念思想很重要,和命令式编程大不一样</p>\n<p>由此，<code>Reactive Cocoa</code> 应运而生。</p>\n<p>Reactive Cocoa 可以承担以下任务</p>\n<p>1 数据流统一封装分发</p>\n<p><img src=\"/images/mvvm3.png\" alt=\"\"></p>\n<p>2 数据(双向)绑定</p>\n<p><img src=\"/images/mvvm1.png\" alt=\"\"></p>\n<p>3 动作事件通知</p>\n<p><img src=\"/images/mvvm2.png\" alt=\"\"></p>\n<p>代码实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; data binding</span><br><span class=\"line\">RAC(_viewModel,phone) &#x3D; _phoneTF.rac_textSignal; &#x2F;&#x2F; 这样可以(只能)观察到textField 源于键盘输入导致的值变化</span><br><span class=\"line\">RAC(_phoneTF,text) &#x3D; [RACObserve(_viewModel, phone) distinctUntilChanged];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 清空_phoneTF</span><br><span class=\"line\">_viewModel.phone &#x3D; @&quot;&quot;; &#x2F;&#x2F; 代码实现</span><br><span class=\"line\">&#x2F;&#x2F; _phoneTF.text &#x3D; nil; &#x2F;&#x2F; 这种方式不行</span><br></pre></td></tr></table></figure>\n\n<p>关于使用RAC(…)，有时会有这样的错误<code>error : is already bound to key path &quot;&quot; on object  rac</code>，原因是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RAC(self.viewModel,smsCode) &#x3D; _phoneTF.rac_textSignal;</span><br><span class=\"line\">RAC(self.viewModel,smsCode) &#x3D; _codeTF.rac_textSignal;</span><br><span class=\"line\">给smsCode只能绑定一次,绑给别的信号了，就不能再绑给另外一个信号了,所以绑定慎用，但可以subscribeNext啊</span><br></pre></td></tr></table></figure>\n\n<p>[RACSignal createSignal] 方式创建signal，只创建一次就OK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(RACSignal *)validatePhoneSignal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!_validatePhoneSignal) &#123;</span><br><span class=\"line\">        _validatePhoneSignal &#x3D; [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (isValid([[UserBaseInfo share] identityName]) &amp;&amp; _idCode.length !&#x3D; 15 &amp;&amp; _idCode.length !&#x3D; 18) &#123;</span><br><span class=\"line\">                [subscriber sendError:Error(errCode_toast, @&quot;请输入正确的15或18位身份证号&quot;)];</span><br><span class=\"line\">                return nil;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [_service verifyCode:_smsCode idCard:_idCode finish:^(NSError *error) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (error) &#123;</span><br><span class=\"line\">                    [subscriber sendError:error];</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    [subscriber sendNext:@(YES)];</span><br><span class=\"line\">                    [subscriber sendCompleted];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">            </span><br><span class=\"line\">            return nil;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return _validatePhoneSignal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[RACSubject subject] 创建的signal，每次都得创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(RACSignal *)rechargeSignal</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    RACReplaySubject *subject &#x3D; [RACReplaySubject subject];</span><br><span class=\"line\">    _rechargeSignal &#x3D; [subject deliverOnMainThread];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.submitSignal subscribeNext:^(NSNumber *x) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (x.boolValue) &#123;</span><br><span class=\"line\">            [subject sendNext:@(YES)];</span><br><span class=\"line\">            [subject sendCompleted];</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            [self.querySignal subscribeNext:^(id x) &#123;</span><br><span class=\"line\">                [subject sendNext:@(YES)];</span><br><span class=\"line\">                [subject sendCompleted];</span><br><span class=\"line\">            &#125; error:^(NSError *error) &#123;</span><br><span class=\"line\">                [subject sendError:error];</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; error:^(NSError *error) &#123;</span><br><span class=\"line\">        [subject sendError:error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">            </span><br><span class=\"line\">    return _rechargeSignal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<p>软件层次</p>\n<p><code>工具层</code>(utility，通用的工具，和具体的业务无关)</p>\n<p><code>网络层</code>(负责和server进行交互)</p>","more":"<h3 id=\"软件层次\"><a href=\"#软件层次\" class=\"headerlink\" title=\"软件层次\"></a>软件层次</h3><p><code>工具层</code>(utility，通用的工具，和具体的业务无关)</p>\n<p><code>网络层</code>(负责和server进行交互)</p>\n<p><code>数据持久层</code>(本地缓存、数据库)</p>\n<p><code>model层</code>(原始数据的类载体，比如来自网络或数据库的时间戳，不进行处数据理)</p>\n<p><code>逻辑层</code>(viewmodel层，软件业务功能逻辑相关，可以给每个界面增加个逻辑层，也可以给一个业务功能多个界面增加一个逻辑层)</p>\n<p><code>UI层</code>(显示的view)</p>\n<p><code>控制层</code>(controller是个大杂炖，上面那些层都在这个controller里面彼此交互)</p>\n<h3 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h3><h5 id=\"大多是MVC模式\"><a href=\"#大多是MVC模式\" class=\"headerlink\" title=\"大多是MVC模式\"></a>大多是<code>MVC</code>模式</h5><p><img src=\"/images/mvc.png\" alt=\"\"></p>\n<p>缺点：经常会导致C很臃肿，不易管理，所以出现了MVVM。</p>\n<h5 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h5><p><code>MVVM</code>就是将业务逻辑从controller里面抽出来单独生成一个类，降低耦合</p>\n<p>如果要想把业务逻辑从controller中抽取出来，以实现逻辑层(viewmodel)是逻辑的载体，那么逻辑层至少需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 实时的接受view里面各种数据源和事件源的变化(比如输入框、按钮等)</span><br><span class=\"line\">2 逻辑任务处理完成后将数据、动作输出至view&#x2F;controller</span><br></pre></td></tr></table></figure>\n\n<p>要实现这两条，就需要<code>响应式编程</code>的概念。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数响应式编程(Functional Reactive Programing : FRP)  :  面向数据流的变化传播(管道处理，比如过滤，类型映射，订阅，组合,属性绑定)</span><br></pre></td></tr></table></figure>\n\n<p>比如 excel 3-8数码管 订阅(公众号、日报),详见<a href=\"https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">wiki</a></p>\n<p>数据流，逻辑流 这种概念思想很重要,和命令式编程大不一样</p>\n<p>由此，<code>Reactive Cocoa</code> 应运而生。</p>\n<p>Reactive Cocoa 可以承担以下任务</p>\n<p>1 数据流统一封装分发</p>\n<p><img src=\"/images/mvvm3.png\" alt=\"\"></p>\n<p>2 数据(双向)绑定</p>\n<p><img src=\"/images/mvvm1.png\" alt=\"\"></p>\n<p>3 动作事件通知</p>\n<p><img src=\"/images/mvvm2.png\" alt=\"\"></p>\n<p>代码实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; data binding</span><br><span class=\"line\">RAC(_viewModel,phone) &#x3D; _phoneTF.rac_textSignal; &#x2F;&#x2F; 这样可以(只能)观察到textField 源于键盘输入导致的值变化</span><br><span class=\"line\">RAC(_phoneTF,text) &#x3D; [RACObserve(_viewModel, phone) distinctUntilChanged];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 清空_phoneTF</span><br><span class=\"line\">_viewModel.phone &#x3D; @&quot;&quot;; &#x2F;&#x2F; 代码实现</span><br><span class=\"line\">&#x2F;&#x2F; _phoneTF.text &#x3D; nil; &#x2F;&#x2F; 这种方式不行</span><br></pre></td></tr></table></figure>\n\n<p>关于使用RAC(…)，有时会有这样的错误<code>error : is already bound to key path &quot;&quot; on object  rac</code>，原因是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RAC(self.viewModel,smsCode) &#x3D; _phoneTF.rac_textSignal;</span><br><span class=\"line\">RAC(self.viewModel,smsCode) &#x3D; _codeTF.rac_textSignal;</span><br><span class=\"line\">给smsCode只能绑定一次,绑给别的信号了，就不能再绑给另外一个信号了,所以绑定慎用，但可以subscribeNext啊</span><br></pre></td></tr></table></figure>\n\n<p>[RACSignal createSignal] 方式创建signal，只创建一次就OK</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(RACSignal *)validatePhoneSignal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!_validatePhoneSignal) &#123;</span><br><span class=\"line\">        _validatePhoneSignal &#x3D; [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (isValid([[UserBaseInfo share] identityName]) &amp;&amp; _idCode.length !&#x3D; 15 &amp;&amp; _idCode.length !&#x3D; 18) &#123;</span><br><span class=\"line\">                [subscriber sendError:Error(errCode_toast, @&quot;请输入正确的15或18位身份证号&quot;)];</span><br><span class=\"line\">                return nil;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [_service verifyCode:_smsCode idCard:_idCode finish:^(NSError *error) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (error) &#123;</span><br><span class=\"line\">                    [subscriber sendError:error];</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    [subscriber sendNext:@(YES)];</span><br><span class=\"line\">                    [subscriber sendCompleted];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">            </span><br><span class=\"line\">            return nil;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return _validatePhoneSignal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[RACSubject subject] 创建的signal，每次都得创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(RACSignal *)rechargeSignal</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    RACReplaySubject *subject &#x3D; [RACReplaySubject subject];</span><br><span class=\"line\">    _rechargeSignal &#x3D; [subject deliverOnMainThread];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.submitSignal subscribeNext:^(NSNumber *x) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (x.boolValue) &#123;</span><br><span class=\"line\">            [subject sendNext:@(YES)];</span><br><span class=\"line\">            [subject sendCompleted];</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            [self.querySignal subscribeNext:^(id x) &#123;</span><br><span class=\"line\">                [subject sendNext:@(YES)];</span><br><span class=\"line\">                [subject sendCompleted];</span><br><span class=\"line\">            &#125; error:^(NSError *error) &#123;</span><br><span class=\"line\">                [subject sendError:error];</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; error:^(NSError *error) &#123;</span><br><span class=\"line\">        [subject sendError:error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">            </span><br><span class=\"line\">    return _rechargeSignal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"multi-thread","date":"2016-03-21T04:44:00.000Z","comments":1,"_content":"\n线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很\n\n<!-- more -->\n\n# Multi-Thread 放大理顺逻辑流、线程流\n\n## 线程的产生方式\n\n线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很快(工作可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回)，时间间隔小到毫秒，给用户一种同时运行的假象，线程是程序设计的逻辑层概念\n\n![](/images/thread1.png)\n\n## 线程的组成结构(实现方式)\n\n一个标准的线程由线程ID(面向对象上就是线程的名字)、当前指令指针(PC)、寄存器、堆栈组成\n\n## 线程的分类\n\n主线程(对界面UI操作的task应该在主线程)、子线程\n\n## 线程的生命周期(运行状态及触发)\n\nnew -> runable (ready to run) -> running -> dead (finished/cancel)中间可能会有过渡态 : wait / block / sleep\n\n![](/images/thread2.png)\n\n```\nif([thread isCanceled]){\n       [thread exit]; //  The cancel method only informs the thread that it is cancelled,It's then the responsibility of the thread itself to check this and exit\n}\n```\n\n## 线程安全(线程并发)\n\n一个时间点内，某个属性、某个方法、某段代码只能有一个线程对其操作（添、删、改、查、访问），这也是单一处理原则,检测方法是否同时被多个线程执行，在方法里面打印`[NSThread currentThread]`即可\n如何保证线程安全,或者说控制线程并发 1 、线程锁(也叫互斥所mutex-lock，厕所例子)  2、优化结构：错开调用时间、两个线程间进行数据传递或归为一个线程调用\n\n线程锁 ： NSLock系列 、 @synchronized 、 pthread 、dispatch_semaphore(信号量)\n\n## 线程的优先级\n\n## 线程间的运行机制\n\nserial or concurrent ( 多个线程并发执行(线程与线程之间) )\nsynchronous and asynchronous\n异步是任务并发执行(执行到某一方法，将方法里面的task submit到子线程，方法立即返回，程序继续执行下一行)\n同步是任务顺序执行(执行完某一方法并返回值后，执行下一行)\n多线程是异步的实现方式\n\n## 线程间的通信(communication)\n\nperformSelector:onThread:withObject:waitUntilDone:  only schedules the selector to run in the default run loop mode, if the run loop is in another mode ,it won`t run until the run loop switches back to the default mode, so you can get this :  performSelector:onThread:withObject:waitUntilDone:modes:\n\ndispatch_async(dispatch_get_main_queue(),^{…}) will run the block as soon as the main run loop returns control flow back to the event loop,it doesn`t care about modes\n\n## iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )\n\n`在Xcode里面点击进去，看官方language programing` 呵呵，这是最原始的最全面的\n\n丰富度 NSObject -> NSThread -> NSOperation(NSOperationQueue)\n\nNSObject里面的 performSelectorInBackground 是最原始的开启子线程方法,制造了一堆不受管理的线程，非常不建议使用\n\nNSThread对单个线程的生命周期状态需要手动控制，并可以做到精细化管理和查看，但线程间的问题解决不了，比如线程依赖，线程间数据同步(多线程访问同一个内存地址导致的互斥同步，这种情况需要加锁)\n\nNSOperation 同样具有NSThread的优势，而queue可以做到对多个线程的并发执行进行(线程间)控制，比如线程间同步\n\nGCD对多个线程并发执行的控制很强(利用 once 、semaphore、group、queue、object 、监听source)，但对单个线程的生命周期状态控制的比较粗糙，几乎没有，block提交后几乎做不了什么别的，也没法查看线程的状态，也没法撤销当前线程，适合一些简单的task\n\n![](/images/thread3.png)\n\n## thread(线程) & process(进程) & program(程序)\n\n进程是操作系统进行资源分配和调度的一个独立单位\n进程是由程序正文段（text）、用户数据段（user segment）、系统数据段（system　segment）共同组成的一个完整的执行环境\n\n![](/images/thread4.png)\n\n**（1）正文段（text）：**存放被执行的机器指令。这个段是只读的（所以，在这里不能写自己能修改的代码），它允许系统中正在运行的两个或多个进程之间能够共享这一代码。例如，有几个用户都在使用文本编辑器，在内存中仅需要该程序指令的一个副本，他们全都共享这一副本。\n\n**（2）用户数据段（user segment）：**存放进程在执行时直接进行操作的所有数据，包括进程使用的全部变量在内。显然，这里包含的信息可以被改变。虽然进程之间可以共享正文段，但是每个进程需要有它自己的专用用户数据段。例如同时编辑文本的用户，虽然运行着同样的程序__编辑器，但是每个用户都有不同的数据：正在编辑的文本。\n\n**（3）系统数据段（system segment）：**该段有效地存放程序运行的环境(一些控制信息)。事实上，这正是程序和进程的区别所在。如前所述，程序是由一组指令和数据组成的静态事物，它们是进程最初使用的正文段和用户数据段。作为动态事物，进程是正文段、用户数据段和系统数据段的信息的交叉综合体，其中系统数据段是进程实体最重要的一部分，之所以说它有效地存放程序运行的环境，是因为这一部分存放有进程的控制信息。系统中有许多进程，操作系统要管理它们、调度它们运行，就是通过这些控制信息。Linux为每个进程建立了task_struct数据结构来容纳这些控制信息\n\n   程序经过编译、链接后生成一个可执行文件，一个机器代码指令和数据的集合，一个静态的实体，存储在磁盘上的一个可执行映像中。程序代表期望完成某工作的计划和步骤，它还浮在纸面上等待具体实现，而具体实现是由进程来完成的，进程可以认为是运行中的程序，进行中的程序，程序的一次执行。\n   程序装入内存后，在指令指针寄存器的控制下，不断的将指令取至CPU运行，同时还会产生一些额外数据(包括程序中各种指令和数据，还有一些额外数据，比如说寄存器的值、用来保存临时数据（例如传递给某个函数的参数、函数的返回地址、保存变量等）的堆栈（包括程序堆栈和系统堆栈）、被打开文件的数量及输入输出设备的状态等等。这个执行环境的动态变化表征程序的运行)，这个完整的执行环境称为进程(一个动态的实体，代表程序的执行过程，它随着程序中指令的执行而不断地变化),参考链接http://oss.org.cn/kernel-book/ch04/4.1.htm\n   \n\n\n","source":"_posts/multi-thread.md","raw":"---\nlayout: post\ntitle: \"multi-thread\"\ndate: 2016-03-21 12:44:00 +0800\ncomments: true\ntags:\n- 线程安全\n- 线程的分类\ncategories:\n- [多线程]\n- [OC]\n---\n\n线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很\n\n<!-- more -->\n\n# Multi-Thread 放大理顺逻辑流、线程流\n\n## 线程的产生方式\n\n线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很快(工作可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回)，时间间隔小到毫秒，给用户一种同时运行的假象，线程是程序设计的逻辑层概念\n\n![](/images/thread1.png)\n\n## 线程的组成结构(实现方式)\n\n一个标准的线程由线程ID(面向对象上就是线程的名字)、当前指令指针(PC)、寄存器、堆栈组成\n\n## 线程的分类\n\n主线程(对界面UI操作的task应该在主线程)、子线程\n\n## 线程的生命周期(运行状态及触发)\n\nnew -> runable (ready to run) -> running -> dead (finished/cancel)中间可能会有过渡态 : wait / block / sleep\n\n![](/images/thread2.png)\n\n```\nif([thread isCanceled]){\n       [thread exit]; //  The cancel method only informs the thread that it is cancelled,It's then the responsibility of the thread itself to check this and exit\n}\n```\n\n## 线程安全(线程并发)\n\n一个时间点内，某个属性、某个方法、某段代码只能有一个线程对其操作（添、删、改、查、访问），这也是单一处理原则,检测方法是否同时被多个线程执行，在方法里面打印`[NSThread currentThread]`即可\n如何保证线程安全,或者说控制线程并发 1 、线程锁(也叫互斥所mutex-lock，厕所例子)  2、优化结构：错开调用时间、两个线程间进行数据传递或归为一个线程调用\n\n线程锁 ： NSLock系列 、 @synchronized 、 pthread 、dispatch_semaphore(信号量)\n\n## 线程的优先级\n\n## 线程间的运行机制\n\nserial or concurrent ( 多个线程并发执行(线程与线程之间) )\nsynchronous and asynchronous\n异步是任务并发执行(执行到某一方法，将方法里面的task submit到子线程，方法立即返回，程序继续执行下一行)\n同步是任务顺序执行(执行完某一方法并返回值后，执行下一行)\n多线程是异步的实现方式\n\n## 线程间的通信(communication)\n\nperformSelector:onThread:withObject:waitUntilDone:  only schedules the selector to run in the default run loop mode, if the run loop is in another mode ,it won`t run until the run loop switches back to the default mode, so you can get this :  performSelector:onThread:withObject:waitUntilDone:modes:\n\ndispatch_async(dispatch_get_main_queue(),^{…}) will run the block as soon as the main run loop returns control flow back to the event loop,it doesn`t care about modes\n\n## iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )\n\n`在Xcode里面点击进去，看官方language programing` 呵呵，这是最原始的最全面的\n\n丰富度 NSObject -> NSThread -> NSOperation(NSOperationQueue)\n\nNSObject里面的 performSelectorInBackground 是最原始的开启子线程方法,制造了一堆不受管理的线程，非常不建议使用\n\nNSThread对单个线程的生命周期状态需要手动控制，并可以做到精细化管理和查看，但线程间的问题解决不了，比如线程依赖，线程间数据同步(多线程访问同一个内存地址导致的互斥同步，这种情况需要加锁)\n\nNSOperation 同样具有NSThread的优势，而queue可以做到对多个线程的并发执行进行(线程间)控制，比如线程间同步\n\nGCD对多个线程并发执行的控制很强(利用 once 、semaphore、group、queue、object 、监听source)，但对单个线程的生命周期状态控制的比较粗糙，几乎没有，block提交后几乎做不了什么别的，也没法查看线程的状态，也没法撤销当前线程，适合一些简单的task\n\n![](/images/thread3.png)\n\n## thread(线程) & process(进程) & program(程序)\n\n进程是操作系统进行资源分配和调度的一个独立单位\n进程是由程序正文段（text）、用户数据段（user segment）、系统数据段（system　segment）共同组成的一个完整的执行环境\n\n![](/images/thread4.png)\n\n**（1）正文段（text）：**存放被执行的机器指令。这个段是只读的（所以，在这里不能写自己能修改的代码），它允许系统中正在运行的两个或多个进程之间能够共享这一代码。例如，有几个用户都在使用文本编辑器，在内存中仅需要该程序指令的一个副本，他们全都共享这一副本。\n\n**（2）用户数据段（user segment）：**存放进程在执行时直接进行操作的所有数据，包括进程使用的全部变量在内。显然，这里包含的信息可以被改变。虽然进程之间可以共享正文段，但是每个进程需要有它自己的专用用户数据段。例如同时编辑文本的用户，虽然运行着同样的程序__编辑器，但是每个用户都有不同的数据：正在编辑的文本。\n\n**（3）系统数据段（system segment）：**该段有效地存放程序运行的环境(一些控制信息)。事实上，这正是程序和进程的区别所在。如前所述，程序是由一组指令和数据组成的静态事物，它们是进程最初使用的正文段和用户数据段。作为动态事物，进程是正文段、用户数据段和系统数据段的信息的交叉综合体，其中系统数据段是进程实体最重要的一部分，之所以说它有效地存放程序运行的环境，是因为这一部分存放有进程的控制信息。系统中有许多进程，操作系统要管理它们、调度它们运行，就是通过这些控制信息。Linux为每个进程建立了task_struct数据结构来容纳这些控制信息\n\n   程序经过编译、链接后生成一个可执行文件，一个机器代码指令和数据的集合，一个静态的实体，存储在磁盘上的一个可执行映像中。程序代表期望完成某工作的计划和步骤，它还浮在纸面上等待具体实现，而具体实现是由进程来完成的，进程可以认为是运行中的程序，进行中的程序，程序的一次执行。\n   程序装入内存后，在指令指针寄存器的控制下，不断的将指令取至CPU运行，同时还会产生一些额外数据(包括程序中各种指令和数据，还有一些额外数据，比如说寄存器的值、用来保存临时数据（例如传递给某个函数的参数、函数的返回地址、保存变量等）的堆栈（包括程序堆栈和系统堆栈）、被打开文件的数量及输入输出设备的状态等等。这个执行环境的动态变化表征程序的运行)，这个完整的执行环境称为进程(一个动态的实体，代表程序的执行过程，它随着程序中指令的执行而不断地变化),参考链接http://oss.org.cn/kernel-book/ch04/4.1.htm\n   \n\n\n","slug":"multi-thread","published":1,"updated":"2020-01-03T07:25:56.965Z","photos":[],"link":"","_id":"ck4xzj9af000988s65jb41cl0","content":"<p>线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Multi-Thread-放大理顺逻辑流、线程流\"><a href=\"#Multi-Thread-放大理顺逻辑流、线程流\" class=\"headerlink\" title=\"Multi-Thread 放大理顺逻辑流、线程流\"></a>Multi-Thread 放大理顺逻辑流、线程流</h1><h2 id=\"线程的产生方式\"><a href=\"#线程的产生方式\" class=\"headerlink\" title=\"线程的产生方式\"></a>线程的产生方式</h2><p>线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很快(工作可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回)，时间间隔小到毫秒，给用户一种同时运行的假象，线程是程序设计的逻辑层概念</p>\n<p><img src=\"/images/thread1.png\" alt=\"\"></p>\n<h2 id=\"线程的组成结构-实现方式\"><a href=\"#线程的组成结构-实现方式\" class=\"headerlink\" title=\"线程的组成结构(实现方式)\"></a>线程的组成结构(实现方式)</h2><p>一个标准的线程由线程ID(面向对象上就是线程的名字)、当前指令指针(PC)、寄存器、堆栈组成</p>\n<h2 id=\"线程的分类\"><a href=\"#线程的分类\" class=\"headerlink\" title=\"线程的分类\"></a>线程的分类</h2><p>主线程(对界面UI操作的task应该在主线程)、子线程</p>\n<h2 id=\"线程的生命周期-运行状态及触发\"><a href=\"#线程的生命周期-运行状态及触发\" class=\"headerlink\" title=\"线程的生命周期(运行状态及触发)\"></a>线程的生命周期(运行状态及触发)</h2><p>new -&gt; runable (ready to run) -&gt; running -&gt; dead (finished/cancel)中间可能会有过渡态 : wait / block / sleep</p>\n<p><img src=\"/images/thread2.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if([thread isCanceled])&#123;</span><br><span class=\"line\">       [thread exit]; &#x2F;&#x2F;  The cancel method only informs the thread that it is cancelled,It&#39;s then the responsibility of the thread itself to check this and exit</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程安全-线程并发\"><a href=\"#线程安全-线程并发\" class=\"headerlink\" title=\"线程安全(线程并发)\"></a>线程安全(线程并发)</h2><p>一个时间点内，某个属性、某个方法、某段代码只能有一个线程对其操作（添、删、改、查、访问），这也是单一处理原则,检测方法是否同时被多个线程执行，在方法里面打印<code>[NSThread currentThread]</code>即可<br>如何保证线程安全,或者说控制线程并发 1 、线程锁(也叫互斥所mutex-lock，厕所例子)  2、优化结构：错开调用时间、两个线程间进行数据传递或归为一个线程调用</p>\n<p>线程锁 ： NSLock系列 、 @synchronized 、 pthread 、dispatch_semaphore(信号量)</p>\n<h2 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h2><h2 id=\"线程间的运行机制\"><a href=\"#线程间的运行机制\" class=\"headerlink\" title=\"线程间的运行机制\"></a>线程间的运行机制</h2><p>serial or concurrent ( 多个线程并发执行(线程与线程之间) )<br>synchronous and asynchronous<br>异步是任务并发执行(执行到某一方法，将方法里面的task submit到子线程，方法立即返回，程序继续执行下一行)<br>同步是任务顺序执行(执行完某一方法并返回值后，执行下一行)<br>多线程是异步的实现方式</p>\n<h2 id=\"线程间的通信-communication\"><a href=\"#线程间的通信-communication\" class=\"headerlink\" title=\"线程间的通信(communication)\"></a>线程间的通信(communication)</h2><p>performSelector:onThread:withObject:waitUntilDone:  only schedules the selector to run in the default run loop mode, if the run loop is in another mode ,it won`t run until the run loop switches back to the default mode, so you can get this :  performSelector:onThread:withObject:waitUntilDone:modes:</p>\n<p>dispatch_async(dispatch_get_main_queue(),^{…}) will run the block as soon as the main run loop returns control flow back to the event loop,it doesn`t care about modes</p>\n<h2 id=\"iOS-中线程PK-NSObject-vs-NSThread-vs-NSOperation-Queue-vs-GCD\"><a href=\"#iOS-中线程PK-NSObject-vs-NSThread-vs-NSOperation-Queue-vs-GCD\" class=\"headerlink\" title=\"iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )\"></a>iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )</h2><p><code>在Xcode里面点击进去，看官方language programing</code> 呵呵，这是最原始的最全面的</p>\n<p>丰富度 NSObject -&gt; NSThread -&gt; NSOperation(NSOperationQueue)</p>\n<p>NSObject里面的 performSelectorInBackground 是最原始的开启子线程方法,制造了一堆不受管理的线程，非常不建议使用</p>\n<p>NSThread对单个线程的生命周期状态需要手动控制，并可以做到精细化管理和查看，但线程间的问题解决不了，比如线程依赖，线程间数据同步(多线程访问同一个内存地址导致的互斥同步，这种情况需要加锁)</p>\n<p>NSOperation 同样具有NSThread的优势，而queue可以做到对多个线程的并发执行进行(线程间)控制，比如线程间同步</p>\n<p>GCD对多个线程并发执行的控制很强(利用 once 、semaphore、group、queue、object 、监听source)，但对单个线程的生命周期状态控制的比较粗糙，几乎没有，block提交后几乎做不了什么别的，也没法查看线程的状态，也没法撤销当前线程，适合一些简单的task</p>\n<p><img src=\"/images/thread3.png\" alt=\"\"></p>\n<h2 id=\"thread-线程-amp-process-进程-amp-program-程序\"><a href=\"#thread-线程-amp-process-进程-amp-program-程序\" class=\"headerlink\" title=\"thread(线程) &amp; process(进程) &amp; program(程序)\"></a>thread(线程) &amp; process(进程) &amp; program(程序)</h2><p>进程是操作系统进行资源分配和调度的一个独立单位<br>进程是由程序正文段（text）、用户数据段（user segment）、系统数据段（system　segment）共同组成的一个完整的执行环境</p>\n<p><img src=\"/images/thread4.png\" alt=\"\"></p>\n<p><strong>（1）正文段（text）：</strong>存放被执行的机器指令。这个段是只读的（所以，在这里不能写自己能修改的代码），它允许系统中正在运行的两个或多个进程之间能够共享这一代码。例如，有几个用户都在使用文本编辑器，在内存中仅需要该程序指令的一个副本，他们全都共享这一副本。</p>\n<p><strong>（2）用户数据段（user segment）：</strong>存放进程在执行时直接进行操作的所有数据，包括进程使用的全部变量在内。显然，这里包含的信息可以被改变。虽然进程之间可以共享正文段，但是每个进程需要有它自己的专用用户数据段。例如同时编辑文本的用户，虽然运行着同样的程序__编辑器，但是每个用户都有不同的数据：正在编辑的文本。</p>\n<p><strong>（3）系统数据段（system segment）：</strong>该段有效地存放程序运行的环境(一些控制信息)。事实上，这正是程序和进程的区别所在。如前所述，程序是由一组指令和数据组成的静态事物，它们是进程最初使用的正文段和用户数据段。作为动态事物，进程是正文段、用户数据段和系统数据段的信息的交叉综合体，其中系统数据段是进程实体最重要的一部分，之所以说它有效地存放程序运行的环境，是因为这一部分存放有进程的控制信息。系统中有许多进程，操作系统要管理它们、调度它们运行，就是通过这些控制信息。Linux为每个进程建立了task_struct数据结构来容纳这些控制信息</p>\n<p>   程序经过编译、链接后生成一个可执行文件，一个机器代码指令和数据的集合，一个静态的实体，存储在磁盘上的一个可执行映像中。程序代表期望完成某工作的计划和步骤，它还浮在纸面上等待具体实现，而具体实现是由进程来完成的，进程可以认为是运行中的程序，进行中的程序，程序的一次执行。<br>   程序装入内存后，在指令指针寄存器的控制下，不断的将指令取至CPU运行，同时还会产生一些额外数据(包括程序中各种指令和数据，还有一些额外数据，比如说寄存器的值、用来保存临时数据（例如传递给某个函数的参数、函数的返回地址、保存变量等）的堆栈（包括程序堆栈和系统堆栈）、被打开文件的数量及输入输出设备的状态等等。这个执行环境的动态变化表征程序的运行)，这个完整的执行环境称为进程(一个动态的实体，代表程序的执行过程，它随着程序中指令的执行而不断地变化),参考链接<a href=\"http://oss.org.cn/kernel-book/ch04/4.1.htm\" target=\"_blank\" rel=\"noopener\">http://oss.org.cn/kernel-book/ch04/4.1.htm</a></p>\n","site":{"data":{}},"excerpt":"<p>线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很</p>","more":"<h1 id=\"Multi-Thread-放大理顺逻辑流、线程流\"><a href=\"#Multi-Thread-放大理顺逻辑流、线程流\" class=\"headerlink\" title=\"Multi-Thread 放大理顺逻辑流、线程流\"></a>Multi-Thread 放大理顺逻辑流、线程流</h1><h2 id=\"线程的产生方式\"><a href=\"#线程的产生方式\" class=\"headerlink\" title=\"线程的产生方式\"></a>线程的产生方式</h2><p>线程是CPU分配和调度的基本单位，操作系统控制CPU以时间片轮流(轮转的方式)切换(执行每一个线程)形成的，由于CPU运行很快(工作可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回)，时间间隔小到毫秒，给用户一种同时运行的假象，线程是程序设计的逻辑层概念</p>\n<p><img src=\"/images/thread1.png\" alt=\"\"></p>\n<h2 id=\"线程的组成结构-实现方式\"><a href=\"#线程的组成结构-实现方式\" class=\"headerlink\" title=\"线程的组成结构(实现方式)\"></a>线程的组成结构(实现方式)</h2><p>一个标准的线程由线程ID(面向对象上就是线程的名字)、当前指令指针(PC)、寄存器、堆栈组成</p>\n<h2 id=\"线程的分类\"><a href=\"#线程的分类\" class=\"headerlink\" title=\"线程的分类\"></a>线程的分类</h2><p>主线程(对界面UI操作的task应该在主线程)、子线程</p>\n<h2 id=\"线程的生命周期-运行状态及触发\"><a href=\"#线程的生命周期-运行状态及触发\" class=\"headerlink\" title=\"线程的生命周期(运行状态及触发)\"></a>线程的生命周期(运行状态及触发)</h2><p>new -&gt; runable (ready to run) -&gt; running -&gt; dead (finished/cancel)中间可能会有过渡态 : wait / block / sleep</p>\n<p><img src=\"/images/thread2.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if([thread isCanceled])&#123;</span><br><span class=\"line\">       [thread exit]; &#x2F;&#x2F;  The cancel method only informs the thread that it is cancelled,It&#39;s then the responsibility of the thread itself to check this and exit</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程安全-线程并发\"><a href=\"#线程安全-线程并发\" class=\"headerlink\" title=\"线程安全(线程并发)\"></a>线程安全(线程并发)</h2><p>一个时间点内，某个属性、某个方法、某段代码只能有一个线程对其操作（添、删、改、查、访问），这也是单一处理原则,检测方法是否同时被多个线程执行，在方法里面打印<code>[NSThread currentThread]</code>即可<br>如何保证线程安全,或者说控制线程并发 1 、线程锁(也叫互斥所mutex-lock，厕所例子)  2、优化结构：错开调用时间、两个线程间进行数据传递或归为一个线程调用</p>\n<p>线程锁 ： NSLock系列 、 @synchronized 、 pthread 、dispatch_semaphore(信号量)</p>\n<h2 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h2><h2 id=\"线程间的运行机制\"><a href=\"#线程间的运行机制\" class=\"headerlink\" title=\"线程间的运行机制\"></a>线程间的运行机制</h2><p>serial or concurrent ( 多个线程并发执行(线程与线程之间) )<br>synchronous and asynchronous<br>异步是任务并发执行(执行到某一方法，将方法里面的task submit到子线程，方法立即返回，程序继续执行下一行)<br>同步是任务顺序执行(执行完某一方法并返回值后，执行下一行)<br>多线程是异步的实现方式</p>\n<h2 id=\"线程间的通信-communication\"><a href=\"#线程间的通信-communication\" class=\"headerlink\" title=\"线程间的通信(communication)\"></a>线程间的通信(communication)</h2><p>performSelector:onThread:withObject:waitUntilDone:  only schedules the selector to run in the default run loop mode, if the run loop is in another mode ,it won`t run until the run loop switches back to the default mode, so you can get this :  performSelector:onThread:withObject:waitUntilDone:modes:</p>\n<p>dispatch_async(dispatch_get_main_queue(),^{…}) will run the block as soon as the main run loop returns control flow back to the event loop,it doesn`t care about modes</p>\n<h2 id=\"iOS-中线程PK-NSObject-vs-NSThread-vs-NSOperation-Queue-vs-GCD\"><a href=\"#iOS-中线程PK-NSObject-vs-NSThread-vs-NSOperation-Queue-vs-GCD\" class=\"headerlink\" title=\"iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )\"></a>iOS 中线程PK ( NSObject vs NSThread vs NSOperation+Queue vs GCD )</h2><p><code>在Xcode里面点击进去，看官方language programing</code> 呵呵，这是最原始的最全面的</p>\n<p>丰富度 NSObject -&gt; NSThread -&gt; NSOperation(NSOperationQueue)</p>\n<p>NSObject里面的 performSelectorInBackground 是最原始的开启子线程方法,制造了一堆不受管理的线程，非常不建议使用</p>\n<p>NSThread对单个线程的生命周期状态需要手动控制，并可以做到精细化管理和查看，但线程间的问题解决不了，比如线程依赖，线程间数据同步(多线程访问同一个内存地址导致的互斥同步，这种情况需要加锁)</p>\n<p>NSOperation 同样具有NSThread的优势，而queue可以做到对多个线程的并发执行进行(线程间)控制，比如线程间同步</p>\n<p>GCD对多个线程并发执行的控制很强(利用 once 、semaphore、group、queue、object 、监听source)，但对单个线程的生命周期状态控制的比较粗糙，几乎没有，block提交后几乎做不了什么别的，也没法查看线程的状态，也没法撤销当前线程，适合一些简单的task</p>\n<p><img src=\"/images/thread3.png\" alt=\"\"></p>\n<h2 id=\"thread-线程-amp-process-进程-amp-program-程序\"><a href=\"#thread-线程-amp-process-进程-amp-program-程序\" class=\"headerlink\" title=\"thread(线程) &amp; process(进程) &amp; program(程序)\"></a>thread(线程) &amp; process(进程) &amp; program(程序)</h2><p>进程是操作系统进行资源分配和调度的一个独立单位<br>进程是由程序正文段（text）、用户数据段（user segment）、系统数据段（system　segment）共同组成的一个完整的执行环境</p>\n<p><img src=\"/images/thread4.png\" alt=\"\"></p>\n<p><strong>（1）正文段（text）：</strong>存放被执行的机器指令。这个段是只读的（所以，在这里不能写自己能修改的代码），它允许系统中正在运行的两个或多个进程之间能够共享这一代码。例如，有几个用户都在使用文本编辑器，在内存中仅需要该程序指令的一个副本，他们全都共享这一副本。</p>\n<p><strong>（2）用户数据段（user segment）：</strong>存放进程在执行时直接进行操作的所有数据，包括进程使用的全部变量在内。显然，这里包含的信息可以被改变。虽然进程之间可以共享正文段，但是每个进程需要有它自己的专用用户数据段。例如同时编辑文本的用户，虽然运行着同样的程序__编辑器，但是每个用户都有不同的数据：正在编辑的文本。</p>\n<p><strong>（3）系统数据段（system segment）：</strong>该段有效地存放程序运行的环境(一些控制信息)。事实上，这正是程序和进程的区别所在。如前所述，程序是由一组指令和数据组成的静态事物，它们是进程最初使用的正文段和用户数据段。作为动态事物，进程是正文段、用户数据段和系统数据段的信息的交叉综合体，其中系统数据段是进程实体最重要的一部分，之所以说它有效地存放程序运行的环境，是因为这一部分存放有进程的控制信息。系统中有许多进程，操作系统要管理它们、调度它们运行，就是通过这些控制信息。Linux为每个进程建立了task_struct数据结构来容纳这些控制信息</p>\n<p>   程序经过编译、链接后生成一个可执行文件，一个机器代码指令和数据的集合，一个静态的实体，存储在磁盘上的一个可执行映像中。程序代表期望完成某工作的计划和步骤，它还浮在纸面上等待具体实现，而具体实现是由进程来完成的，进程可以认为是运行中的程序，进行中的程序，程序的一次执行。<br>   程序装入内存后，在指令指针寄存器的控制下，不断的将指令取至CPU运行，同时还会产生一些额外数据(包括程序中各种指令和数据，还有一些额外数据，比如说寄存器的值、用来保存临时数据（例如传递给某个函数的参数、函数的返回地址、保存变量等）的堆栈（包括程序堆栈和系统堆栈）、被打开文件的数量及输入输出设备的状态等等。这个执行环境的动态变化表征程序的运行)，这个完整的执行环境称为进程(一个动态的实体，代表程序的执行过程，它随着程序中指令的执行而不断地变化),参考链接<a href=\"http://oss.org.cn/kernel-book/ch04/4.1.htm\" target=\"_blank\" rel=\"noopener\">http://oss.org.cn/kernel-book/ch04/4.1.htm</a></p>"},{"layout":"post","title":"runtime运行时之变量(variable)","date":"2016-02-29T10:55:56.000Z","comments":1,"_content":"\nruntime使用之variable\n![](/images/runtime_variable1.png)\n\n<!-- more -->\n\n### runtime使用之variable\n\n![](/images/runtime_variable1.png)\n\n![](/images/runtime_variable2.png)\n\nproperty\n\n![](/images/runtime_variable3.png)\n\nhttps://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101\n\n每一个  objc_property_t指向的结构体里面 都包含一个 attributions的成员变量，\n比如  @property (nonatomic,weak) IBOutlet UITextField\n通过 property_getAttributes 获取到，它的attributions是  T@\"UITextField\",W,N,V_tf\n而通过 property_copyAttributeList 获取到以下图片\n\n![](/images/runtime_variable4.png)\n\n![](/images/runtime_variable5.png)\n","source":"_posts/runtimeyun-xing-shi-zhi-bian-liang.md","raw":"---\nlayout: post\ntitle: \"runtime运行时之变量(variable)\"\ndate: 2016-02-29 18:55:56 +0800\ncomments: true\ntags:\n- [variable]\ncategories:\n- [runtime]\n- [OC]\n---\n\nruntime使用之variable\n![](/images/runtime_variable1.png)\n\n<!-- more -->\n\n### runtime使用之variable\n\n![](/images/runtime_variable1.png)\n\n![](/images/runtime_variable2.png)\n\nproperty\n\n![](/images/runtime_variable3.png)\n\nhttps://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101\n\n每一个  objc_property_t指向的结构体里面 都包含一个 attributions的成员变量，\n比如  @property (nonatomic,weak) IBOutlet UITextField\n通过 property_getAttributes 获取到，它的attributions是  T@\"UITextField\",W,N,V_tf\n而通过 property_copyAttributeList 获取到以下图片\n\n![](/images/runtime_variable4.png)\n\n![](/images/runtime_variable5.png)\n","slug":"runtimeyun-xing-shi-zhi-bian-liang","published":1,"updated":"2020-01-03T06:30:29.257Z","photos":[],"link":"","_id":"ck4xzj9ag000c88s60t88eq65","content":"<p>runtime使用之variable<br><img src=\"/images/runtime_variable1.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"runtime使用之variable\"><a href=\"#runtime使用之variable\" class=\"headerlink\" title=\"runtime使用之variable\"></a>runtime使用之variable</h3><p><img src=\"/images/runtime_variable1.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_variable2.png\" alt=\"\"></p>\n<p>property</p>\n<p><img src=\"/images/runtime_variable3.png\" alt=\"\"></p>\n<p><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101</a></p>\n<p>每一个  objc_property_t指向的结构体里面 都包含一个 attributions的成员变量，<br>比如  @property (nonatomic,weak) IBOutlet UITextField<br>通过 property_getAttributes 获取到，它的attributions是  T@”UITextField”,W,N,V_tf<br>而通过 property_copyAttributeList 获取到以下图片</p>\n<p><img src=\"/images/runtime_variable4.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_variable5.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>runtime使用之variable<br><img src=\"/images/runtime_variable1.png\" alt=\"\"></p>","more":"<h3 id=\"runtime使用之variable\"><a href=\"#runtime使用之variable\" class=\"headerlink\" title=\"runtime使用之variable\"></a>runtime使用之variable</h3><p><img src=\"/images/runtime_variable1.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_variable2.png\" alt=\"\"></p>\n<p>property</p>\n<p><img src=\"/images/runtime_variable3.png\" alt=\"\"></p>\n<p><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101</a></p>\n<p>每一个  objc_property_t指向的结构体里面 都包含一个 attributions的成员变量，<br>比如  @property (nonatomic,weak) IBOutlet UITextField<br>通过 property_getAttributes 获取到，它的attributions是  T@”UITextField”,W,N,V_tf<br>而通过 property_copyAttributeList 获取到以下图片</p>\n<p><img src=\"/images/runtime_variable4.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_variable5.png\" alt=\"\"></p>"},{"layout":"post","title":"runtime运行时之类(class)","date":"2016-02-29T10:55:14.000Z","comments":1,"_content":"\nstruct 结构体，构成了 数据结构的核心\n面向对象就是造出了个class，class 类\n\n<!-- more -->\n\n### runtime使用之class\n\nstruct 结构体，构成了 数据结构的核心\n面向对象就是造出了个class，class 类 就是一个指向结构体的指针变量，类里面的方法变量等都存放到了结构体里面的成员成员变量中\n链表把数据串起来，形成一个组织\n\n\n![](/images/runtime_class1.png)\n\n\nclass 里面主要由 变量、属性、方法、协议、类别\n\n![](/images/runtime_class2.png)\n\nruntime 可以实现 对class的add set get\n对class里面的ivars 的add set get\n对class里面的method的add set get\n对class里面的protocol的add set get\n\nClass 里面的API\n\n![](/images/runtime_class3.png)\n\n\nNSObject 里面有 - (Class)class  这是对象的方法，一般使用[self class],这样获取到的是self的指向的类，比如类A继承与类B，那么如果类A的viewDidAppear方法触发了，在类B的viewDidAppear的方法中打印[self class]，是类A的名字\n+ (Class)class   这个就是类的方法了。\n\nclass_getInstanceMethod 类的实例化方法  --减方法\nclass_getClassMethod 类的方法 +加方法\n\n![](/images/runtime_class4.png)\n\nadd class\n\n![](/images/runtime_class5.png)\n\nobject 之instance\n\n![](/images/runtime_class6.png)\n","source":"_posts/runtimeyun-xing-shi-zhi-class.md","raw":"---\nlayout: post\ntitle: \"runtime运行时之类(class)\"\ndate: 2016-02-29 18:55:14 +0800\ncomments: true\ntags:\n- [class]\ncategories:\n- [runtime]\n- [OC]\n---\n\nstruct 结构体，构成了 数据结构的核心\n面向对象就是造出了个class，class 类\n\n<!-- more -->\n\n### runtime使用之class\n\nstruct 结构体，构成了 数据结构的核心\n面向对象就是造出了个class，class 类 就是一个指向结构体的指针变量，类里面的方法变量等都存放到了结构体里面的成员成员变量中\n链表把数据串起来，形成一个组织\n\n\n![](/images/runtime_class1.png)\n\n\nclass 里面主要由 变量、属性、方法、协议、类别\n\n![](/images/runtime_class2.png)\n\nruntime 可以实现 对class的add set get\n对class里面的ivars 的add set get\n对class里面的method的add set get\n对class里面的protocol的add set get\n\nClass 里面的API\n\n![](/images/runtime_class3.png)\n\n\nNSObject 里面有 - (Class)class  这是对象的方法，一般使用[self class],这样获取到的是self的指向的类，比如类A继承与类B，那么如果类A的viewDidAppear方法触发了，在类B的viewDidAppear的方法中打印[self class]，是类A的名字\n+ (Class)class   这个就是类的方法了。\n\nclass_getInstanceMethod 类的实例化方法  --减方法\nclass_getClassMethod 类的方法 +加方法\n\n![](/images/runtime_class4.png)\n\nadd class\n\n![](/images/runtime_class5.png)\n\nobject 之instance\n\n![](/images/runtime_class6.png)\n","slug":"runtimeyun-xing-shi-zhi-class","published":1,"updated":"2020-01-03T06:30:44.283Z","photos":[],"link":"","_id":"ck4xzj9ai000e88s693veg5qc","content":"<p>struct 结构体，构成了 数据结构的核心<br>面向对象就是造出了个class，class 类</p>\n<a id=\"more\"></a>\n\n<h3 id=\"runtime使用之class\"><a href=\"#runtime使用之class\" class=\"headerlink\" title=\"runtime使用之class\"></a>runtime使用之class</h3><p>struct 结构体，构成了 数据结构的核心<br>面向对象就是造出了个class，class 类 就是一个指向结构体的指针变量，类里面的方法变量等都存放到了结构体里面的成员成员变量中<br>链表把数据串起来，形成一个组织</p>\n<p><img src=\"/images/runtime_class1.png\" alt=\"\"></p>\n<p>class 里面主要由 变量、属性、方法、协议、类别</p>\n<p><img src=\"/images/runtime_class2.png\" alt=\"\"></p>\n<p>runtime 可以实现 对class的add set get<br>对class里面的ivars 的add set get<br>对class里面的method的add set get<br>对class里面的protocol的add set get</p>\n<p>Class 里面的API</p>\n<p><img src=\"/images/runtime_class3.png\" alt=\"\"></p>\n<p>NSObject 里面有 - (Class)class  这是对象的方法，一般使用[self class],这样获取到的是self的指向的类，比如类A继承与类B，那么如果类A的viewDidAppear方法触发了，在类B的viewDidAppear的方法中打印[self class]，是类A的名字</p>\n<ul>\n<li>(Class)class   这个就是类的方法了。</li>\n</ul>\n<p>class_getInstanceMethod 类的实例化方法  –减方法<br>class_getClassMethod 类的方法 +加方法</p>\n<p><img src=\"/images/runtime_class4.png\" alt=\"\"></p>\n<p>add class</p>\n<p><img src=\"/images/runtime_class5.png\" alt=\"\"></p>\n<p>object 之instance</p>\n<p><img src=\"/images/runtime_class6.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>struct 结构体，构成了 数据结构的核心<br>面向对象就是造出了个class，class 类</p>","more":"<h3 id=\"runtime使用之class\"><a href=\"#runtime使用之class\" class=\"headerlink\" title=\"runtime使用之class\"></a>runtime使用之class</h3><p>struct 结构体，构成了 数据结构的核心<br>面向对象就是造出了个class，class 类 就是一个指向结构体的指针变量，类里面的方法变量等都存放到了结构体里面的成员成员变量中<br>链表把数据串起来，形成一个组织</p>\n<p><img src=\"/images/runtime_class1.png\" alt=\"\"></p>\n<p>class 里面主要由 变量、属性、方法、协议、类别</p>\n<p><img src=\"/images/runtime_class2.png\" alt=\"\"></p>\n<p>runtime 可以实现 对class的add set get<br>对class里面的ivars 的add set get<br>对class里面的method的add set get<br>对class里面的protocol的add set get</p>\n<p>Class 里面的API</p>\n<p><img src=\"/images/runtime_class3.png\" alt=\"\"></p>\n<p>NSObject 里面有 - (Class)class  这是对象的方法，一般使用[self class],这样获取到的是self的指向的类，比如类A继承与类B，那么如果类A的viewDidAppear方法触发了，在类B的viewDidAppear的方法中打印[self class]，是类A的名字</p>\n<ul>\n<li>(Class)class   这个就是类的方法了。</li>\n</ul>\n<p>class_getInstanceMethod 类的实例化方法  –减方法<br>class_getClassMethod 类的方法 +加方法</p>\n<p><img src=\"/images/runtime_class4.png\" alt=\"\"></p>\n<p>add class</p>\n<p><img src=\"/images/runtime_class5.png\" alt=\"\"></p>\n<p>object 之instance</p>\n<p><img src=\"/images/runtime_class6.png\" alt=\"\"></p>"},{"layout":"post","title":"runtime运行时的理解","date":"2016-02-29T10:39:40.000Z","comments":1,"_content":"\nruntime运行时的理解：实现动态语言的关键\n\nOC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)\n\n<!-- more -->\n\n### runtime运行时的理解：实现动态语言的关键\n\nOC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)\n\n动态语言：在运行时可以`动态操作程序`(动态的对class、method、variable、protocol进行add、set、get等操作)，比如get：运行时才去检查确认其结构(比如数组字典都可以是id类型)，也就是，尽可能把编译和链接时要执行的逻辑延迟到运行时\n有一个运行时系统 (runtime system) 来执行编译后的代码(比如说数据类型的检查，编译时候可以随便给id类型转换赋值，都不会报错，直到运行时needed时候才会报错，再比如 方法的调用，[self performSelector],如果selector没有可执行的指针地址(implement)，编译时候不会error，而是到运行时候，使用的时候，再现去找selector的指针地址，找不多则提供消息转发机制，否则crash，再比如，可以在编译链接完成后，根据实际需要动态的对class、variable、method、protocol进行add、set、get等操作)\n\n静态语言：在编译时就做了所有的检查和命令（数据类型检查、每个方法名对应的方法执行的入口地址检查等等）\n静态语言里面的编译器其中最最基础和原始的目标之一就是把一份代码里的函数名称，转化成一个相对内存地址，把调用这个函数的语句转换成一个jmp跳转指令。在程序开始运行时候，调用语句可以正确跳转到对应的函数地址。 这样很好，也很直白，但是。。。太死板了。everything is per-determined\n\n一句话解释静态语言和动态语言 Static typing when possible, dynamic typing when needed\n\n实际使用runtime动态调用的地方 举例：respondsToSelector、performSelector、isKindOfClass、conformsToProtocol\n\n动态语言好处：编写代码灵活方便，缺点：不易调试。。。比如JavaScript，Python，Ruby都是动态语言\n静态语言好处：结构规范、方便调试，缺点：代码编写不灵活。。不如C++、Java都是静态语言\n\nruntime 参考\n<https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/>\n<http://www.opensource.apple.com/source/objc4/>\n","source":"_posts/runtimeyun-xing-shi-de-li-jie.md","raw":"---\nlayout: post\ntitle: \"runtime运行时的理解\"\ndate: 2016-02-29 18:39:40 +0800\ncomments: true\ntags:\n- 运行时\ncategories:\n- [runtime]\n- [OC]\n---\n\nruntime运行时的理解：实现动态语言的关键\n\nOC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)\n\n<!-- more -->\n\n### runtime运行时的理解：实现动态语言的关键\n\nOC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)\n\n动态语言：在运行时可以`动态操作程序`(动态的对class、method、variable、protocol进行add、set、get等操作)，比如get：运行时才去检查确认其结构(比如数组字典都可以是id类型)，也就是，尽可能把编译和链接时要执行的逻辑延迟到运行时\n有一个运行时系统 (runtime system) 来执行编译后的代码(比如说数据类型的检查，编译时候可以随便给id类型转换赋值，都不会报错，直到运行时needed时候才会报错，再比如 方法的调用，[self performSelector],如果selector没有可执行的指针地址(implement)，编译时候不会error，而是到运行时候，使用的时候，再现去找selector的指针地址，找不多则提供消息转发机制，否则crash，再比如，可以在编译链接完成后，根据实际需要动态的对class、variable、method、protocol进行add、set、get等操作)\n\n静态语言：在编译时就做了所有的检查和命令（数据类型检查、每个方法名对应的方法执行的入口地址检查等等）\n静态语言里面的编译器其中最最基础和原始的目标之一就是把一份代码里的函数名称，转化成一个相对内存地址，把调用这个函数的语句转换成一个jmp跳转指令。在程序开始运行时候，调用语句可以正确跳转到对应的函数地址。 这样很好，也很直白，但是。。。太死板了。everything is per-determined\n\n一句话解释静态语言和动态语言 Static typing when possible, dynamic typing when needed\n\n实际使用runtime动态调用的地方 举例：respondsToSelector、performSelector、isKindOfClass、conformsToProtocol\n\n动态语言好处：编写代码灵活方便，缺点：不易调试。。。比如JavaScript，Python，Ruby都是动态语言\n静态语言好处：结构规范、方便调试，缺点：代码编写不灵活。。不如C++、Java都是静态语言\n\nruntime 参考\n<https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/>\n<http://www.opensource.apple.com/source/objc4/>\n","slug":"runtimeyun-xing-shi-de-li-jie","published":1,"updated":"2020-01-03T06:29:55.187Z","photos":[],"link":"","_id":"ck4xzj9aj000h88s62iv46y3y","content":"<p>runtime运行时的理解：实现动态语言的关键</p>\n<p>OC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)</p>\n<a id=\"more\"></a>\n\n<h3 id=\"runtime运行时的理解：实现动态语言的关键\"><a href=\"#runtime运行时的理解：实现动态语言的关键\" class=\"headerlink\" title=\"runtime运行时的理解：实现动态语言的关键\"></a>runtime运行时的理解：实现动态语言的关键</h3><p>OC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)</p>\n<p>动态语言：在运行时可以<code>动态操作程序</code>(动态的对class、method、variable、protocol进行add、set、get等操作)，比如get：运行时才去检查确认其结构(比如数组字典都可以是id类型)，也就是，尽可能把编译和链接时要执行的逻辑延迟到运行时<br>有一个运行时系统 (runtime system) 来执行编译后的代码(比如说数据类型的检查，编译时候可以随便给id类型转换赋值，都不会报错，直到运行时needed时候才会报错，再比如 方法的调用，[self performSelector],如果selector没有可执行的指针地址(implement)，编译时候不会error，而是到运行时候，使用的时候，再现去找selector的指针地址，找不多则提供消息转发机制，否则crash，再比如，可以在编译链接完成后，根据实际需要动态的对class、variable、method、protocol进行add、set、get等操作)</p>\n<p>静态语言：在编译时就做了所有的检查和命令（数据类型检查、每个方法名对应的方法执行的入口地址检查等等）<br>静态语言里面的编译器其中最最基础和原始的目标之一就是把一份代码里的函数名称，转化成一个相对内存地址，把调用这个函数的语句转换成一个jmp跳转指令。在程序开始运行时候，调用语句可以正确跳转到对应的函数地址。 这样很好，也很直白，但是。。。太死板了。everything is per-determined</p>\n<p>一句话解释静态语言和动态语言 Static typing when possible, dynamic typing when needed</p>\n<p>实际使用runtime动态调用的地方 举例：respondsToSelector、performSelector、isKindOfClass、conformsToProtocol</p>\n<p>动态语言好处：编写代码灵活方便，缺点：不易调试。。。比如JavaScript，Python，Ruby都是动态语言<br>静态语言好处：结构规范、方便调试，缺点：代码编写不灵活。。不如C++、Java都是静态语言</p>\n<p>runtime 参考<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a><br><a href=\"http://www.opensource.apple.com/source/objc4/\" target=\"_blank\" rel=\"noopener\">http://www.opensource.apple.com/source/objc4/</a></p>\n","site":{"data":{}},"excerpt":"<p>runtime运行时的理解：实现动态语言的关键</p>\n<p>OC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)</p>","more":"<h3 id=\"runtime运行时的理解：实现动态语言的关键\"><a href=\"#runtime运行时的理解：实现动态语言的关键\" class=\"headerlink\" title=\"runtime运行时的理解：实现动态语言的关键\"></a>runtime运行时的理解：实现动态语言的关键</h3><p>OC是一门动态语言，而实现动态语言的关键就是 runtime(运行时)</p>\n<p>动态语言：在运行时可以<code>动态操作程序</code>(动态的对class、method、variable、protocol进行add、set、get等操作)，比如get：运行时才去检查确认其结构(比如数组字典都可以是id类型)，也就是，尽可能把编译和链接时要执行的逻辑延迟到运行时<br>有一个运行时系统 (runtime system) 来执行编译后的代码(比如说数据类型的检查，编译时候可以随便给id类型转换赋值，都不会报错，直到运行时needed时候才会报错，再比如 方法的调用，[self performSelector],如果selector没有可执行的指针地址(implement)，编译时候不会error，而是到运行时候，使用的时候，再现去找selector的指针地址，找不多则提供消息转发机制，否则crash，再比如，可以在编译链接完成后，根据实际需要动态的对class、variable、method、protocol进行add、set、get等操作)</p>\n<p>静态语言：在编译时就做了所有的检查和命令（数据类型检查、每个方法名对应的方法执行的入口地址检查等等）<br>静态语言里面的编译器其中最最基础和原始的目标之一就是把一份代码里的函数名称，转化成一个相对内存地址，把调用这个函数的语句转换成一个jmp跳转指令。在程序开始运行时候，调用语句可以正确跳转到对应的函数地址。 这样很好，也很直白，但是。。。太死板了。everything is per-determined</p>\n<p>一句话解释静态语言和动态语言 Static typing when possible, dynamic typing when needed</p>\n<p>实际使用runtime动态调用的地方 举例：respondsToSelector、performSelector、isKindOfClass、conformsToProtocol</p>\n<p>动态语言好处：编写代码灵活方便，缺点：不易调试。。。比如JavaScript，Python，Ruby都是动态语言<br>静态语言好处：结构规范、方便调试，缺点：代码编写不灵活。。不如C++、Java都是静态语言</p>\n<p>runtime 参考<br><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a><br><a href=\"http://www.opensource.apple.com/source/objc4/\" target=\"_blank\" rel=\"noopener\">http://www.opensource.apple.com/source/objc4/</a></p>"},{"layout":"post","title":"runtime运行时之方法method","date":"2016-02-29T10:56:07.000Z","comments":1,"_content":"\na Method is a combination of a selector and an implement\n\nmethod 组成结构体\n\n<!-- more -->\n\n### runtime之方法(method)\n\nruntime 参考<https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/>\n\na Method is a combination of a selector and an implement\n\nmethod 组成结构体\n\n![](/images/runtime_method1.png)\n\n\n![](/images/runtime_method2.png)\n\nruntime 处理method相关方法\n\n![](/images/runtime_method3.png)\n\n方法的invoke    objc_msgSend(receiver, selector, arg1, arg2, …)\n\ntypedef struct objc_selector *SEL;a Selector is the name of the method used to identity 方法的签名ID\n比如 setObject:forKey:    setName:age:  这些形式的字符串就代表了sel的标识，但根据这些不知道这个方法参数的类型是什么\nSEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@\"doSomething:\")\n\n![](/images/runtime_method4.png)\n\nmethod_types  方法的参数类型和返回值类型   比如方法setName:age:的参数是这样 v16@0:4@8i12    那些数字可能代表地址的偏移量\n\n![](/images/runtime_method5.png)\n\n\n![](/images/runtime_method6.png)\n\nImplement -> id (*IMP)(id, SEL, …)  函数指针变量，指向方法实现代码块的入口地址\n\nImplementation - the actual executable code block of a method.  it's a function pointer (an IMP).\n\na selector is like a key in in a hash table(NSDictionary) , and the value is the IMP of the method\nclass的方法列表其实是一个字典，key为selectors，IMPs为value。一个IMP是指向方法在内存中的实现\n\n![](/images/runtime_method7.png)\n\n利用runtime提供的method系列方法，可以很明显的知道可以将两个方法的实现exchange，这就是所谓的`swizzle`\n\n```\nswizzle : swizzling allows you to replace a method in an existing class with one of your own making . This approach can lead to a lot of unexpected behavior ,so it should be used very sparingly.\n```\n\n![](/images/runtime_method8.png)\n\n\n\n","source":"_posts/runtimeyun-xing-shi-zhi-fang-fa-method.md","raw":"---\nlayout: post\ntitle: \"runtime运行时之方法method\"\ndate: 2016-02-29 18:56:07 +0800\ncomments: true\ntags:\n- [method]\ncategories:\n- [runtime]\n- [OC]\n---\n\na Method is a combination of a selector and an implement\n\nmethod 组成结构体\n\n<!-- more -->\n\n### runtime之方法(method)\n\nruntime 参考<https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/>\n\na Method is a combination of a selector and an implement\n\nmethod 组成结构体\n\n![](/images/runtime_method1.png)\n\n\n![](/images/runtime_method2.png)\n\nruntime 处理method相关方法\n\n![](/images/runtime_method3.png)\n\n方法的invoke    objc_msgSend(receiver, selector, arg1, arg2, …)\n\ntypedef struct objc_selector *SEL;a Selector is the name of the method used to identity 方法的签名ID\n比如 setObject:forKey:    setName:age:  这些形式的字符串就代表了sel的标识，但根据这些不知道这个方法参数的类型是什么\nSEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@\"doSomething:\")\n\n![](/images/runtime_method4.png)\n\nmethod_types  方法的参数类型和返回值类型   比如方法setName:age:的参数是这样 v16@0:4@8i12    那些数字可能代表地址的偏移量\n\n![](/images/runtime_method5.png)\n\n\n![](/images/runtime_method6.png)\n\nImplement -> id (*IMP)(id, SEL, …)  函数指针变量，指向方法实现代码块的入口地址\n\nImplementation - the actual executable code block of a method.  it's a function pointer (an IMP).\n\na selector is like a key in in a hash table(NSDictionary) , and the value is the IMP of the method\nclass的方法列表其实是一个字典，key为selectors，IMPs为value。一个IMP是指向方法在内存中的实现\n\n![](/images/runtime_method7.png)\n\n利用runtime提供的method系列方法，可以很明显的知道可以将两个方法的实现exchange，这就是所谓的`swizzle`\n\n```\nswizzle : swizzling allows you to replace a method in an existing class with one of your own making . This approach can lead to a lot of unexpected behavior ,so it should be used very sparingly.\n```\n\n![](/images/runtime_method8.png)\n\n\n\n","slug":"runtimeyun-xing-shi-zhi-fang-fa-method","published":1,"updated":"2020-01-03T06:30:55.299Z","photos":[],"link":"","_id":"ck4xzj9al000k88s65d2p26ae","content":"<p>a Method is a combination of a selector and an implement</p>\n<p>method 组成结构体</p>\n<a id=\"more\"></a>\n\n<h3 id=\"runtime之方法-method\"><a href=\"#runtime之方法-method\" class=\"headerlink\" title=\"runtime之方法(method)\"></a>runtime之方法(method)</h3><p>runtime 参考<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a></p>\n<p>a Method is a combination of a selector and an implement</p>\n<p>method 组成结构体</p>\n<p><img src=\"/images/runtime_method1.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_method2.png\" alt=\"\"></p>\n<p>runtime 处理method相关方法</p>\n<p><img src=\"/images/runtime_method3.png\" alt=\"\"></p>\n<p>方法的invoke    objc_msgSend(receiver, selector, arg1, arg2, …)</p>\n<p>typedef struct objc_selector *SEL;a Selector is the name of the method used to identity 方法的签名ID<br>比如 setObject:forKey:    setName:age:  这些形式的字符串就代表了sel的标识，但根据这些不知道这个方法参数的类型是什么<br>SEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@”doSomething:”)</p>\n<p><img src=\"/images/runtime_method4.png\" alt=\"\"></p>\n<p>method_types  方法的参数类型和返回值类型   比如方法setName:age:的参数是这样 v16@0:4@8i12    那些数字可能代表地址的偏移量</p>\n<p><img src=\"/images/runtime_method5.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_method6.png\" alt=\"\"></p>\n<p>Implement -&gt; id (*IMP)(id, SEL, …)  函数指针变量，指向方法实现代码块的入口地址</p>\n<p>Implementation - the actual executable code block of a method.  it’s a function pointer (an IMP).</p>\n<p>a selector is like a key in in a hash table(NSDictionary) , and the value is the IMP of the method<br>class的方法列表其实是一个字典，key为selectors，IMPs为value。一个IMP是指向方法在内存中的实现</p>\n<p><img src=\"/images/runtime_method7.png\" alt=\"\"></p>\n<p>利用runtime提供的method系列方法，可以很明显的知道可以将两个方法的实现exchange，这就是所谓的<code>swizzle</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swizzle : swizzling allows you to replace a method in an existing class with one of your own making . This approach can lead to a lot of unexpected behavior ,so it should be used very sparingly.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/runtime_method8.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>a Method is a combination of a selector and an implement</p>\n<p>method 组成结构体</p>","more":"<h3 id=\"runtime之方法-method\"><a href=\"#runtime之方法-method\" class=\"headerlink\" title=\"runtime之方法(method)\"></a>runtime之方法(method)</h3><p>runtime 参考<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/</a></p>\n<p>a Method is a combination of a selector and an implement</p>\n<p>method 组成结构体</p>\n<p><img src=\"/images/runtime_method1.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_method2.png\" alt=\"\"></p>\n<p>runtime 处理method相关方法</p>\n<p><img src=\"/images/runtime_method3.png\" alt=\"\"></p>\n<p>方法的invoke    objc_msgSend(receiver, selector, arg1, arg2, …)</p>\n<p>typedef struct objc_selector *SEL;a Selector is the name of the method used to identity 方法的签名ID<br>比如 setObject:forKey:    setName:age:  这些形式的字符串就代表了sel的标识，但根据这些不知道这个方法参数的类型是什么<br>SEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@”doSomething:”)</p>\n<p><img src=\"/images/runtime_method4.png\" alt=\"\"></p>\n<p>method_types  方法的参数类型和返回值类型   比如方法setName:age:的参数是这样 v16@0:4@8i12    那些数字可能代表地址的偏移量</p>\n<p><img src=\"/images/runtime_method5.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_method6.png\" alt=\"\"></p>\n<p>Implement -&gt; id (*IMP)(id, SEL, …)  函数指针变量，指向方法实现代码块的入口地址</p>\n<p>Implementation - the actual executable code block of a method.  it’s a function pointer (an IMP).</p>\n<p>a selector is like a key in in a hash table(NSDictionary) , and the value is the IMP of the method<br>class的方法列表其实是一个字典，key为selectors，IMPs为value。一个IMP是指向方法在内存中的实现</p>\n<p><img src=\"/images/runtime_method7.png\" alt=\"\"></p>\n<p>利用runtime提供的method系列方法，可以很明显的知道可以将两个方法的实现exchange，这就是所谓的<code>swizzle</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swizzle : swizzling allows you to replace a method in an existing class with one of your own making . This approach can lead to a lot of unexpected behavior ,so it should be used very sparingly.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/runtime_method8.png\" alt=\"\"></p>"},{"layout":"post","title":"runtime运行时之消息转发(message forwarding)","date":"2016-02-29T10:56:57.000Z","comments":1,"_content":"\nOC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程\n\n<!-- more -->\n\n### runtime之消息转发(message forwarding)\n\nOC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程\n\n[self performSelector:@selector(dynamic1)];  这个invoke编译时候将转换为objc_msgSend()\n\n![](/images/runtime_forwarding1.png)\n\n\n![](/images/runtime_forwarding2.png)\n\n在一个函数找不到时，Objective-C提供了三种方式去补救：\n\n1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数\n\n2、调用forwardingTargetForSelector让别的对象去执行这个函数\n\n3、调用methodSignatureForSelector（函数符号制造器，）和forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。\n\n最后，如果都不中，调用doesNotRecognizeSelector抛出异常。\n\n参考  <http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html>\n\n![](/images/runtime_forwarding3.png)\n\n在第三步调用 -(void)forwardInvocation:(NSInvocation *)anInvocation   之前为什么要调用\n这个方法呢 -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector  ，因为method 由 sel 、type、implement  组成的，只知道一个sel肯定是不行的，所以通过MethodSignature方法给sel一个标签，就是定义下它的参数返回值类型。\n","source":"_posts/runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding.md","raw":"---\nlayout: post\ntitle: \"runtime运行时之消息转发(message forwarding)\"\ndate: 2016-02-29 18:56:57 +0800\ncomments: true\ntags:\n- [消息转发]\ncategories:\n- [runtime]\n- [OC]\n---\n\nOC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程\n\n<!-- more -->\n\n### runtime之消息转发(message forwarding)\n\nOC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程\n\n[self performSelector:@selector(dynamic1)];  这个invoke编译时候将转换为objc_msgSend()\n\n![](/images/runtime_forwarding1.png)\n\n\n![](/images/runtime_forwarding2.png)\n\n在一个函数找不到时，Objective-C提供了三种方式去补救：\n\n1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数\n\n2、调用forwardingTargetForSelector让别的对象去执行这个函数\n\n3、调用methodSignatureForSelector（函数符号制造器，）和forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。\n\n最后，如果都不中，调用doesNotRecognizeSelector抛出异常。\n\n参考  <http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html>\n\n![](/images/runtime_forwarding3.png)\n\n在第三步调用 -(void)forwardInvocation:(NSInvocation *)anInvocation   之前为什么要调用\n这个方法呢 -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector  ，因为method 由 sel 、type、implement  组成的，只知道一个sel肯定是不行的，所以通过MethodSignature方法给sel一个标签，就是定义下它的参数返回值类型。\n","slug":"runtimeyun-xing-shi-zhi-xiao-xi-zhuan-fa-message-forwarding","published":1,"updated":"2020-01-03T06:31:11.076Z","photos":[],"link":"","_id":"ck4xzj9an000m88s6966j9vkt","content":"<p>OC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程</p>\n<a id=\"more\"></a>\n\n<h3 id=\"runtime之消息转发-message-forwarding\"><a href=\"#runtime之消息转发-message-forwarding\" class=\"headerlink\" title=\"runtime之消息转发(message forwarding)\"></a>runtime之消息转发(message forwarding)</h3><p>OC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程</p>\n<p>[self performSelector:@selector(dynamic1)];  这个invoke编译时候将转换为objc_msgSend()</p>\n<p><img src=\"/images/runtime_forwarding1.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_forwarding2.png\" alt=\"\"></p>\n<p>在一个函数找不到时，Objective-C提供了三种方式去补救：</p>\n<p>1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数</p>\n<p>2、调用forwardingTargetForSelector让别的对象去执行这个函数</p>\n<p>3、调用methodSignatureForSelector（函数符号制造器，）和forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。</p>\n<p>最后，如果都不中，调用doesNotRecognizeSelector抛出异常。</p>\n<p>参考  <a href=\"http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html</a></p>\n<p><img src=\"/images/runtime_forwarding3.png\" alt=\"\"></p>\n<p>在第三步调用 -(void)forwardInvocation:(NSInvocation *)anInvocation   之前为什么要调用<br>这个方法呢 -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector  ，因为method 由 sel 、type、implement  组成的，只知道一个sel肯定是不行的，所以通过MethodSignature方法给sel一个标签，就是定义下它的参数返回值类型。</p>\n","site":{"data":{}},"excerpt":"<p>OC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程</p>","more":"<h3 id=\"runtime之消息转发-message-forwarding\"><a href=\"#runtime之消息转发-message-forwarding\" class=\"headerlink\" title=\"runtime之消息转发(message forwarding)\"></a>runtime之消息转发(message forwarding)</h3><p>OC是一门动态语言，在调用[self performSelector:@selector(dynamic1)];  编译时候，可以通过，只有在执行时候，系统才会去找dynamic1方法对应的implement，若找不到这个执行，则就进行消息转发机制流程</p>\n<p>[self performSelector:@selector(dynamic1)];  这个invoke编译时候将转换为objc_msgSend()</p>\n<p><img src=\"/images/runtime_forwarding1.png\" alt=\"\"></p>\n<p><img src=\"/images/runtime_forwarding2.png\" alt=\"\"></p>\n<p>在一个函数找不到时，Objective-C提供了三种方式去补救：</p>\n<p>1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数</p>\n<p>2、调用forwardingTargetForSelector让别的对象去执行这个函数</p>\n<p>3、调用methodSignatureForSelector（函数符号制造器，）和forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。</p>\n<p>最后，如果都不中，调用doesNotRecognizeSelector抛出异常。</p>\n<p>参考  <a href=\"http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html</a></p>\n<p><img src=\"/images/runtime_forwarding3.png\" alt=\"\"></p>\n<p>在第三步调用 -(void)forwardInvocation:(NSInvocation *)anInvocation   之前为什么要调用<br>这个方法呢 -(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector  ，因为method 由 sel 、type、implement  组成的，只知道一个sel肯定是不行的，所以通过MethodSignature方法给sel一个标签，就是定义下它的参数返回值类型。</p>"},{"layout":"post","title":"SDWebImage源码分析","date":"2016-02-21T14:49:32.000Z","comments":1,"_content":"\n带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接[SDWebImage](https://github.com/rs/SDWebImage)\n\n<!-- more -->\n\n### what is it ?\n\n带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接[SDWebImage](https://github.com/rs/SDWebImage)\n \n### 框架结构\n\n如图\n\n![](/images/sdwebimage.jpg)\n\n![](/images/sdwebimage_ifelse.png)\n\n从它的文件夹分类看，有这么几层\n\n* 资源下载及管理资源下载\n* 资源缓存\n* UI层使用资源，以类别形式体现，引入头文件，直接使用\n\n#### 资源下载\n\n```\nSDWebImageDownloaderOperation.h\n```\n这个类封装一个完整的下载任务 : 继承于NSOperation，在里面创建一个用于下载的NSURLConnection，绑定下载需要的request，打开当前线程runloop，实现NSURLConnection的代理方法\n\n```\nSDWebImageDownloader.h\n\n```\n这个类负责下载管理器downloaderManager : 对外部下载的入口封装 ，利用自己的operationQueue 将每个用于下载创建的operation进行管理\n\n可以把它看做下图的功能\n\n![](/images/downloadmanager.jpg)\n\n\n### 资源缓存\n\n```\nSDImageCache.h\n```\n这个类负责缓存文件管理 : 增加新的文件、删除存储的文件、查找存储的文件、计算、清除 存储的容量等、设定存储容量，文件数量等\n\n例如\n\n```\n[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];\n\n```\n\n```\nSDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:@\"myNamespace\"];\n[imageCache queryDiskCacheForKey:myCacheKey done:^(UIImage *image) {\n    // image is not nil if image was found\n}];\n\n```\n\n### 管理\n\n```\nSDWebImageManager.h\n```\n这个类是 webimage 任务的总入口，集成 下载部分 + 缓存部分\n\n```\nSDWebImageManager *manager = [SDWebImageManager sharedManager];\n[manager downloadImageWithURL:imageURL\n                      options:0\n                     progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                         // progression tracking code\n                     }\n                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n                         if (image) {\n                             // do something with image\n                         }\n                     }];\n```\n\n### 用户使用层\n\n都是以category形式对类进行方法扩展，直接调用即可\n\n```\n#import <SDWebImage/UIImageView+WebCache.h>\n\n...\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    static NSString *MyIdentifier = @\"MyIdentifier\";\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:MyIdentifier];\n    if (cell == nil) {\n        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault\n                                       reuseIdentifier:MyIdentifier] autorelease];\n    }\n\n    // Here we use the new provided sd_setImageWithURL: method to load the web image\n    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@\"http://www.domain.com/path/to/image.jpg\"]\n                      placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]];\n\n    cell.textLabel.text = @\"My Text\";\n    return cell;\n}\n```\n\n或者这样\n\n```\n// Here we use the new provided sd_setImageWithURL: method to load the web image\n[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@\"http://www.domain.com/path/to/image.jpg\"]\n                      placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]\n                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                                ... completion code here ...\n                             }];\n```\n\n### 图示流\n\n![](/images/webimage_flow.png)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/sdwebimageyuan-ma-fen-xi.md","raw":"---\nlayout: post\ntitle: \"SDWebImage源码分析\"\ndate: 2016-02-21 22:49:32 +0800\ncomments: true\ntags:\n- [sdwebimage]\ncategories:\n- [图片下载]\n- [OC]\n---\n\n带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接[SDWebImage](https://github.com/rs/SDWebImage)\n\n<!-- more -->\n\n### what is it ?\n\n带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接[SDWebImage](https://github.com/rs/SDWebImage)\n \n### 框架结构\n\n如图\n\n![](/images/sdwebimage.jpg)\n\n![](/images/sdwebimage_ifelse.png)\n\n从它的文件夹分类看，有这么几层\n\n* 资源下载及管理资源下载\n* 资源缓存\n* UI层使用资源，以类别形式体现，引入头文件，直接使用\n\n#### 资源下载\n\n```\nSDWebImageDownloaderOperation.h\n```\n这个类封装一个完整的下载任务 : 继承于NSOperation，在里面创建一个用于下载的NSURLConnection，绑定下载需要的request，打开当前线程runloop，实现NSURLConnection的代理方法\n\n```\nSDWebImageDownloader.h\n\n```\n这个类负责下载管理器downloaderManager : 对外部下载的入口封装 ，利用自己的operationQueue 将每个用于下载创建的operation进行管理\n\n可以把它看做下图的功能\n\n![](/images/downloadmanager.jpg)\n\n\n### 资源缓存\n\n```\nSDImageCache.h\n```\n这个类负责缓存文件管理 : 增加新的文件、删除存储的文件、查找存储的文件、计算、清除 存储的容量等、设定存储容量，文件数量等\n\n例如\n\n```\n[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];\n\n```\n\n```\nSDImageCache *imageCache = [[SDImageCache alloc] initWithNamespace:@\"myNamespace\"];\n[imageCache queryDiskCacheForKey:myCacheKey done:^(UIImage *image) {\n    // image is not nil if image was found\n}];\n\n```\n\n### 管理\n\n```\nSDWebImageManager.h\n```\n这个类是 webimage 任务的总入口，集成 下载部分 + 缓存部分\n\n```\nSDWebImageManager *manager = [SDWebImageManager sharedManager];\n[manager downloadImageWithURL:imageURL\n                      options:0\n                     progress:^(NSInteger receivedSize, NSInteger expectedSize) {\n                         // progression tracking code\n                     }\n                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {\n                         if (image) {\n                             // do something with image\n                         }\n                     }];\n```\n\n### 用户使用层\n\n都是以category形式对类进行方法扩展，直接调用即可\n\n```\n#import <SDWebImage/UIImageView+WebCache.h>\n\n...\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    static NSString *MyIdentifier = @\"MyIdentifier\";\n\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:MyIdentifier];\n    if (cell == nil) {\n        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault\n                                       reuseIdentifier:MyIdentifier] autorelease];\n    }\n\n    // Here we use the new provided sd_setImageWithURL: method to load the web image\n    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@\"http://www.domain.com/path/to/image.jpg\"]\n                      placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]];\n\n    cell.textLabel.text = @\"My Text\";\n    return cell;\n}\n```\n\n或者这样\n\n```\n// Here we use the new provided sd_setImageWithURL: method to load the web image\n[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@\"http://www.domain.com/path/to/image.jpg\"]\n                      placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]\n                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                                ... completion code here ...\n                             }];\n```\n\n### 图示流\n\n![](/images/webimage_flow.png)\n\n\n\n\n\n\n\n\n\n\n","slug":"sdwebimageyuan-ma-fen-xi","published":1,"updated":"2020-01-03T06:31:41.848Z","photos":[],"link":"","_id":"ck4xzj9ap000p88s68p45fbjy","content":"<p>带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接<a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"what-is-it\"><a href=\"#what-is-it\" class=\"headerlink\" title=\"what is it ?\"></a>what is it ?</h3><p>带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接<a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><p>如图</p>\n<p><img src=\"/images/sdwebimage.jpg\" alt=\"\"></p>\n<p><img src=\"/images/sdwebimage_ifelse.png\" alt=\"\"></p>\n<p>从它的文件夹分类看，有这么几层</p>\n<ul>\n<li>资源下载及管理资源下载</li>\n<li>资源缓存</li>\n<li>UI层使用资源，以类别形式体现，引入头文件，直接使用</li>\n</ul>\n<h4 id=\"资源下载\"><a href=\"#资源下载\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageDownloaderOperation.h</span><br></pre></td></tr></table></figure>\n<p>这个类封装一个完整的下载任务 : 继承于NSOperation，在里面创建一个用于下载的NSURLConnection，绑定下载需要的request，打开当前线程runloop，实现NSURLConnection的代理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageDownloader.h</span><br></pre></td></tr></table></figure>\n<p>这个类负责下载管理器downloaderManager : 对外部下载的入口封装 ，利用自己的operationQueue 将每个用于下载创建的operation进行管理</p>\n<p>可以把它看做下图的功能</p>\n<p><img src=\"/images/downloadmanager.jpg\" alt=\"\"></p>\n<h3 id=\"资源缓存\"><a href=\"#资源缓存\" class=\"headerlink\" title=\"资源缓存\"></a>资源缓存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDImageCache.h</span><br></pre></td></tr></table></figure>\n<p>这个类负责缓存文件管理 : 增加新的文件、删除存储的文件、查找存储的文件、计算、清除 存储的容量等、设定存储容量，文件数量等</p>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDImageCache *imageCache &#x3D; [[SDImageCache alloc] initWithNamespace:@&quot;myNamespace&quot;];</span><br><span class=\"line\">[imageCache queryDiskCacheForKey:myCacheKey done:^(UIImage *image) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; image is not nil if image was found</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageManager.h</span><br></pre></td></tr></table></figure>\n<p>这个类是 webimage 任务的总入口，集成 下载部分 + 缓存部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageManager *manager &#x3D; [SDWebImageManager sharedManager];</span><br><span class=\"line\">[manager downloadImageWithURL:imageURL</span><br><span class=\"line\">                      options:0</span><br><span class=\"line\">                     progress:^(NSInteger receivedSize, NSInteger expectedSize) &#123;</span><br><span class=\"line\">                         &#x2F;&#x2F; progression tracking code</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) &#123;</span><br><span class=\"line\">                         if (image) &#123;</span><br><span class=\"line\">                             &#x2F;&#x2F; do something with image</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                     &#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户使用层\"><a href=\"#用户使用层\" class=\"headerlink\" title=\"用户使用层\"></a>用户使用层</h3><p>都是以category形式对类进行方法扩展，直接调用即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;SDWebImage&#x2F;UIImageView+WebCache.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    static NSString *MyIdentifier &#x3D; @&quot;MyIdentifier&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    UITableViewCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:MyIdentifier];</span><br><span class=\"line\">    if (cell &#x3D;&#x3D; nil) &#123;</span><br><span class=\"line\">        cell &#x3D; [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault</span><br><span class=\"line\">                                       reuseIdentifier:MyIdentifier] autorelease];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Here we use the new provided sd_setImageWithURL: method to load the web image</span><br><span class=\"line\">    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http:&#x2F;&#x2F;www.domain.com&#x2F;path&#x2F;to&#x2F;image.jpg&quot;]</span><br><span class=\"line\">                      placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]];</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.textLabel.text &#x3D; @&quot;My Text&quot;;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Here we use the new provided sd_setImageWithURL: method to load the web image</span><br><span class=\"line\">[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http:&#x2F;&#x2F;www.domain.com&#x2F;path&#x2F;to&#x2F;image.jpg&quot;]</span><br><span class=\"line\">                      placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]</span><br><span class=\"line\">                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) &#123;</span><br><span class=\"line\">                                ... completion code here ...</span><br><span class=\"line\">                             &#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图示流\"><a href=\"#图示流\" class=\"headerlink\" title=\"图示流\"></a>图示流</h3><p><img src=\"/images/webimage_flow.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接<a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>","more":"<h3 id=\"what-is-it\"><a href=\"#what-is-it\" class=\"headerlink\" title=\"what is it ?\"></a>what is it ?</h3><p>带有缓存的异步图片下载器，这个库提供了一个UIImageView的类别，这个类别支持远程图片资源加载并显示，源码链接<a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a></p>\n<h3 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h3><p>如图</p>\n<p><img src=\"/images/sdwebimage.jpg\" alt=\"\"></p>\n<p><img src=\"/images/sdwebimage_ifelse.png\" alt=\"\"></p>\n<p>从它的文件夹分类看，有这么几层</p>\n<ul>\n<li>资源下载及管理资源下载</li>\n<li>资源缓存</li>\n<li>UI层使用资源，以类别形式体现，引入头文件，直接使用</li>\n</ul>\n<h4 id=\"资源下载\"><a href=\"#资源下载\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageDownloaderOperation.h</span><br></pre></td></tr></table></figure>\n<p>这个类封装一个完整的下载任务 : 继承于NSOperation，在里面创建一个用于下载的NSURLConnection，绑定下载需要的request，打开当前线程runloop，实现NSURLConnection的代理方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageDownloader.h</span><br></pre></td></tr></table></figure>\n<p>这个类负责下载管理器downloaderManager : 对外部下载的入口封装 ，利用自己的operationQueue 将每个用于下载创建的operation进行管理</p>\n<p>可以把它看做下图的功能</p>\n<p><img src=\"/images/downloadmanager.jpg\" alt=\"\"></p>\n<h3 id=\"资源缓存\"><a href=\"#资源缓存\" class=\"headerlink\" title=\"资源缓存\"></a>资源缓存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDImageCache.h</span><br></pre></td></tr></table></figure>\n<p>这个类负责缓存文件管理 : 增加新的文件、删除存储的文件、查找存储的文件、计算、清除 存储的容量等、设定存储容量，文件数量等</p>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[SDImageCache sharedImageCache] storeImage:myImage forKey:myCacheKey];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDImageCache *imageCache &#x3D; [[SDImageCache alloc] initWithNamespace:@&quot;myNamespace&quot;];</span><br><span class=\"line\">[imageCache queryDiskCacheForKey:myCacheKey done:^(UIImage *image) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; image is not nil if image was found</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageManager.h</span><br></pre></td></tr></table></figure>\n<p>这个类是 webimage 任务的总入口，集成 下载部分 + 缓存部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDWebImageManager *manager &#x3D; [SDWebImageManager sharedManager];</span><br><span class=\"line\">[manager downloadImageWithURL:imageURL</span><br><span class=\"line\">                      options:0</span><br><span class=\"line\">                     progress:^(NSInteger receivedSize, NSInteger expectedSize) &#123;</span><br><span class=\"line\">                         &#x2F;&#x2F; progression tracking code</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                     completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) &#123;</span><br><span class=\"line\">                         if (image) &#123;</span><br><span class=\"line\">                             &#x2F;&#x2F; do something with image</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                     &#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户使用层\"><a href=\"#用户使用层\" class=\"headerlink\" title=\"用户使用层\"></a>用户使用层</h3><p>都是以category形式对类进行方法扩展，直接调用即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;SDWebImage&#x2F;UIImageView+WebCache.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    static NSString *MyIdentifier &#x3D; @&quot;MyIdentifier&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    UITableViewCell *cell &#x3D; [tableView dequeueReusableCellWithIdentifier:MyIdentifier];</span><br><span class=\"line\">    if (cell &#x3D;&#x3D; nil) &#123;</span><br><span class=\"line\">        cell &#x3D; [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault</span><br><span class=\"line\">                                       reuseIdentifier:MyIdentifier] autorelease];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Here we use the new provided sd_setImageWithURL: method to load the web image</span><br><span class=\"line\">    [cell.imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http:&#x2F;&#x2F;www.domain.com&#x2F;path&#x2F;to&#x2F;image.jpg&quot;]</span><br><span class=\"line\">                      placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]];</span><br><span class=\"line\"></span><br><span class=\"line\">    cell.textLabel.text &#x3D; @&quot;My Text&quot;;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Here we use the new provided sd_setImageWithURL: method to load the web image</span><br><span class=\"line\">[cell.imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;http:&#x2F;&#x2F;www.domain.com&#x2F;path&#x2F;to&#x2F;image.jpg&quot;]</span><br><span class=\"line\">                      placeholderImage:[UIImage imageNamed:@&quot;placeholder.png&quot;]</span><br><span class=\"line\">                             completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) &#123;</span><br><span class=\"line\">                                ... completion code here ...</span><br><span class=\"line\">                             &#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图示流\"><a href=\"#图示流\" class=\"headerlink\" title=\"图示流\"></a>图示流</h3><p><img src=\"/images/webimage_flow.png\" alt=\"\"></p>"},{"layout":"post","title":"时间日历控件","date":"2016-05-31T05:00:03.000Z","comments":1,"_content":"\n关于日历就看这一个类`NSCalendar`就可以，结合日期拆解析类`NSDateComponents`就可以搞定日历相关各种奇葩问题了\n\n<!-- more -->\n\n## 日历时间生成\n\n关于日历就看这一个类`NSCalendar`就可以，结合日期拆解析类`NSDateComponents`就可以搞定日历相关各种奇葩问题了\n\n```\n/**\n *  获取当前日期是周几\n *\n *  @return 输出结果是星期几的字符串。\n */\n-(NSString *)weekday\n{\n    NSDateComponents *comps = [calendar components:NSCalendarUnitWeekday fromDate:self];\n    \n    NSArray *weekdays = [NSArray arrayWithObjects: [NSNull null], @\"0\", @\"1\", @\"2\", @\"3\", @\"4\", @\"5\", @\"6\", nil];\n    \n    return [weekdays objectAtIndex:comps.weekday];\n}\n\n-(NSString *)weekdayString\n{\n    NSString *week = [self weekday];\n    \n    NSDictionary *map = @{@\"0\" : @\"周日\",\n                          @\"1\" : @\"周一\",\n                          @\"2\" : @\"周二\",\n                          @\"3\" : @\"周三\",\n                          @\"4\" : @\"周四\",\n                          @\"5\" : @\"周五\",\n                          @\"6\" : @\"周六\",\n                          };\n    \n    return map[week];\n}\n\n```\n\n```\n\n/**\n *  获取当前日期所在月的第一天是周几\n *\n *  @return 输出结果是星期几的字符串。\n */\n-(NSString *)firstWeekdayInCurrentMonth\n{\n    double interval = 0;\n    NSDate *beginDate = nil;\n    NSDate *endDate = nil;\n    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];\n    calendar.timeZone = [NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"];;\n    \n    [calendar setFirstWeekday:2];//设定周一为周首日\n    BOOL ok = [calendar rangeOfUnit:NSCalendarUnitMonth startDate:&beginDate interval:&interval forDate:self];\n    //分别修改为 NSDayCalendarUnit NSWeekCalendarUnit NSYearCalendarUnit\n    if (ok) {\n        endDate = [beginDate dateByAddingTimeInterval:interval-1];\n    }else {\n        return @\"\";\n    }\n    \n    return [beginDate weekday];\n}\n\n```\n\n```\n\n/**\n *  获取当前日期所在月有多少天\n *\n *  @return 天数\n */\n-(NSInteger)daysInCurrentMonth\n{\n    NSRange range =[calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:self];\n    \n    return range.length;\n}\n\n```\n\n```\n\n/**\n *  获取当前日期所在月的下offset个月\n *\n *  @return 获得时间\n */\n-(NSDate *)dateOffsetMonth:(NSInteger)offset\n{\n    NSDateComponents *comps = [[NSDateComponents alloc] init];\n    comps.month = offset;\n    \n    return [calendar dateByAddingComponents:comps toDate:self options:0];\n}\n\n```\n\n```\n\n/**\n *  获取当前日期的下offset个日期\n *\n *  @return 获得时间\n */\n-(NSDate *)dateOffsetDay:(NSInteger)offset\n{\n    NSDateComponents *comps = [[NSDateComponents alloc] init];\n    comps.day = offset;\n    \n    return [calendar dateByAddingComponents:comps toDate:self options:0];\n}\n\n```\n\n```\n\n+(NSDate *)dateFromSelectIndex:(NSIndexPath *)indexPath\n{\n    NSDate *date = [[NSDate date] dateOffsetMonth:indexPath.section];\n    \n    NSInteger day = indexPath.row - [date firstWeekdayInCurrentMonth].integerValue + 1;\n    \n    NSDateComponents *comp = [[NSDateComponents alloc] init];\n    comp.year = date.components.year;\n    comp.month = date.components.month;\n    comp.day = day;\n    \n    return [calendar dateFromComponents:comp];\n}\n\n-(NSIndexPath *)indexPath\n{\n    // 上面的反推 monthOffset 要注意，年末最后一天 和 下一年的一月的处理，所以通过判断若两者月相等section就等于0，不等的话，有可能是大于，有可能是小于(比如当前月2016-12，下个月2017-01)\n    NSInteger row = self.components.day-1+[self firstWeekdayInCurrentMonth].integerValue;\n    NSInteger monthOffset = (self.components.month == [NSDate date].components.month) ? 0 : 1;\n    \n    return [NSIndexPath indexPathForRow:row inSection:monthOffset];\n}\n\n```\n\n\n## 日历时间UI相关\n\n显示日历大都是UICollectionView 这个很简单，想怎么显示直接写cell就行。\n\n```\n\n#pragma mark collectionview delegate\n\n- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView\n{\n    return 2;\n}\n\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {\n    \n    NSDate *date = [[NSDate date] dateOffsetMonth:section];\n    \n    return [date daysInCurrentMonth] + [date firstWeekdayInCurrentMonth].integerValue;\n}\n\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    \n    DatePickerCell *cell =[collectionView dequeueReusableCellWithReuseIdentifier:datePickerCellReuse forIndexPath:indexPath];\n    \n    [cell updateCellIndex:indexPath select:(_selectIndex == indexPath)];\n    \n    return cell;\n}\n\n- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath\n{\n    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) {\n        \n        DatePickerHeaderView * headerCell = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:datePickerHeaderReuse forIndexPath:indexPath];\n        \n        NSDate *date = [[NSDate date] dateOffsetMonth:indexPath.section];\n        \n        headerCell.tipLab.text = [date ymString];\n        \n        return headerCell;\n    }else if ([kind isEqualToString:UICollectionElementKindSectionFooter]){\n        DatePickerFooterView * footerCell = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:datePickerFooterReuse forIndexPath:indexPath];\n        footerCell.hidden = !(indexPath.section == 0);\n        \n        return footerCell;\n    }\n    \n    return nil;\n}\n\n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath{\n    \n    [collectionView deselectItemAtIndexPath:indexPath animated:YES];\n    \n    _selectIndex = indexPath;\n    \n    [collectionView reloadData];\n    \n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 0.4*NSEC_PER_SEC), dispatch_get_main_queue(), ^{\n        \n        if (selectBlock) {\n            selectBlock();\n        }\n        \n        [self.navigationController popViewControllerAnimated:YES];\n    });\n}\n\n```\n\n详细完整工程，请查看 [github](https://github.com/liu3399shuai/DatePicker)\n","source":"_posts/shi-jian-ri-li-kong-jian.md","raw":"---\nlayout: post\ntitle: \"时间日历控件\"\ndate: 2016-05-31 13:00:03 +0800\ncomments: true\ntags:\n- [NSCalendar]\ncategories:\n- [日历]\n- [OC]\n---\n\n关于日历就看这一个类`NSCalendar`就可以，结合日期拆解析类`NSDateComponents`就可以搞定日历相关各种奇葩问题了\n\n<!-- more -->\n\n## 日历时间生成\n\n关于日历就看这一个类`NSCalendar`就可以，结合日期拆解析类`NSDateComponents`就可以搞定日历相关各种奇葩问题了\n\n```\n/**\n *  获取当前日期是周几\n *\n *  @return 输出结果是星期几的字符串。\n */\n-(NSString *)weekday\n{\n    NSDateComponents *comps = [calendar components:NSCalendarUnitWeekday fromDate:self];\n    \n    NSArray *weekdays = [NSArray arrayWithObjects: [NSNull null], @\"0\", @\"1\", @\"2\", @\"3\", @\"4\", @\"5\", @\"6\", nil];\n    \n    return [weekdays objectAtIndex:comps.weekday];\n}\n\n-(NSString *)weekdayString\n{\n    NSString *week = [self weekday];\n    \n    NSDictionary *map = @{@\"0\" : @\"周日\",\n                          @\"1\" : @\"周一\",\n                          @\"2\" : @\"周二\",\n                          @\"3\" : @\"周三\",\n                          @\"4\" : @\"周四\",\n                          @\"5\" : @\"周五\",\n                          @\"6\" : @\"周六\",\n                          };\n    \n    return map[week];\n}\n\n```\n\n```\n\n/**\n *  获取当前日期所在月的第一天是周几\n *\n *  @return 输出结果是星期几的字符串。\n */\n-(NSString *)firstWeekdayInCurrentMonth\n{\n    double interval = 0;\n    NSDate *beginDate = nil;\n    NSDate *endDate = nil;\n    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];\n    calendar.timeZone = [NSTimeZone timeZoneWithName:@\"Asia/Shanghai\"];;\n    \n    [calendar setFirstWeekday:2];//设定周一为周首日\n    BOOL ok = [calendar rangeOfUnit:NSCalendarUnitMonth startDate:&beginDate interval:&interval forDate:self];\n    //分别修改为 NSDayCalendarUnit NSWeekCalendarUnit NSYearCalendarUnit\n    if (ok) {\n        endDate = [beginDate dateByAddingTimeInterval:interval-1];\n    }else {\n        return @\"\";\n    }\n    \n    return [beginDate weekday];\n}\n\n```\n\n```\n\n/**\n *  获取当前日期所在月有多少天\n *\n *  @return 天数\n */\n-(NSInteger)daysInCurrentMonth\n{\n    NSRange range =[calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:self];\n    \n    return range.length;\n}\n\n```\n\n```\n\n/**\n *  获取当前日期所在月的下offset个月\n *\n *  @return 获得时间\n */\n-(NSDate *)dateOffsetMonth:(NSInteger)offset\n{\n    NSDateComponents *comps = [[NSDateComponents alloc] init];\n    comps.month = offset;\n    \n    return [calendar dateByAddingComponents:comps toDate:self options:0];\n}\n\n```\n\n```\n\n/**\n *  获取当前日期的下offset个日期\n *\n *  @return 获得时间\n */\n-(NSDate *)dateOffsetDay:(NSInteger)offset\n{\n    NSDateComponents *comps = [[NSDateComponents alloc] init];\n    comps.day = offset;\n    \n    return [calendar dateByAddingComponents:comps toDate:self options:0];\n}\n\n```\n\n```\n\n+(NSDate *)dateFromSelectIndex:(NSIndexPath *)indexPath\n{\n    NSDate *date = [[NSDate date] dateOffsetMonth:indexPath.section];\n    \n    NSInteger day = indexPath.row - [date firstWeekdayInCurrentMonth].integerValue + 1;\n    \n    NSDateComponents *comp = [[NSDateComponents alloc] init];\n    comp.year = date.components.year;\n    comp.month = date.components.month;\n    comp.day = day;\n    \n    return [calendar dateFromComponents:comp];\n}\n\n-(NSIndexPath *)indexPath\n{\n    // 上面的反推 monthOffset 要注意，年末最后一天 和 下一年的一月的处理，所以通过判断若两者月相等section就等于0，不等的话，有可能是大于，有可能是小于(比如当前月2016-12，下个月2017-01)\n    NSInteger row = self.components.day-1+[self firstWeekdayInCurrentMonth].integerValue;\n    NSInteger monthOffset = (self.components.month == [NSDate date].components.month) ? 0 : 1;\n    \n    return [NSIndexPath indexPathForRow:row inSection:monthOffset];\n}\n\n```\n\n\n## 日历时间UI相关\n\n显示日历大都是UICollectionView 这个很简单，想怎么显示直接写cell就行。\n\n```\n\n#pragma mark collectionview delegate\n\n- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView\n{\n    return 2;\n}\n\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {\n    \n    NSDate *date = [[NSDate date] dateOffsetMonth:section];\n    \n    return [date daysInCurrentMonth] + [date firstWeekdayInCurrentMonth].integerValue;\n}\n\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    \n    DatePickerCell *cell =[collectionView dequeueReusableCellWithReuseIdentifier:datePickerCellReuse forIndexPath:indexPath];\n    \n    [cell updateCellIndex:indexPath select:(_selectIndex == indexPath)];\n    \n    return cell;\n}\n\n- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath\n{\n    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) {\n        \n        DatePickerHeaderView * headerCell = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:datePickerHeaderReuse forIndexPath:indexPath];\n        \n        NSDate *date = [[NSDate date] dateOffsetMonth:indexPath.section];\n        \n        headerCell.tipLab.text = [date ymString];\n        \n        return headerCell;\n    }else if ([kind isEqualToString:UICollectionElementKindSectionFooter]){\n        DatePickerFooterView * footerCell = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:datePickerFooterReuse forIndexPath:indexPath];\n        footerCell.hidden = !(indexPath.section == 0);\n        \n        return footerCell;\n    }\n    \n    return nil;\n}\n\n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath{\n    \n    [collectionView deselectItemAtIndexPath:indexPath animated:YES];\n    \n    _selectIndex = indexPath;\n    \n    [collectionView reloadData];\n    \n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 0.4*NSEC_PER_SEC), dispatch_get_main_queue(), ^{\n        \n        if (selectBlock) {\n            selectBlock();\n        }\n        \n        [self.navigationController popViewControllerAnimated:YES];\n    });\n}\n\n```\n\n详细完整工程，请查看 [github](https://github.com/liu3399shuai/DatePicker)\n","slug":"shi-jian-ri-li-kong-jian","published":1,"updated":"2020-01-03T06:32:25.513Z","photos":[],"link":"","_id":"ck4xzj9aq000r88s68lln6hj0","content":"<p>关于日历就看这一个类<code>NSCalendar</code>就可以，结合日期拆解析类<code>NSDateComponents</code>就可以搞定日历相关各种奇葩问题了</p>\n<a id=\"more\"></a>\n\n<h2 id=\"日历时间生成\"><a href=\"#日历时间生成\" class=\"headerlink\" title=\"日历时间生成\"></a>日历时间生成</h2><p>关于日历就看这一个类<code>NSCalendar</code>就可以，结合日期拆解析类<code>NSDateComponents</code>就可以搞定日历相关各种奇葩问题了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期是周几</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 输出结果是星期几的字符串。</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSString *)weekday</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDateComponents *comps &#x3D; [calendar components:NSCalendarUnitWeekday fromDate:self];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSArray *weekdays &#x3D; [NSArray arrayWithObjects: [NSNull null], @&quot;0&quot;, @&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;, @&quot;4&quot;, @&quot;5&quot;, @&quot;6&quot;, nil];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [weekdays objectAtIndex:comps.weekday];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSString *)weekdayString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *week &#x3D; [self weekday];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDictionary *map &#x3D; @&#123;@&quot;0&quot; : @&quot;周日&quot;,</span><br><span class=\"line\">                          @&quot;1&quot; : @&quot;周一&quot;,</span><br><span class=\"line\">                          @&quot;2&quot; : @&quot;周二&quot;,</span><br><span class=\"line\">                          @&quot;3&quot; : @&quot;周三&quot;,</span><br><span class=\"line\">                          @&quot;4&quot; : @&quot;周四&quot;,</span><br><span class=\"line\">                          @&quot;5&quot; : @&quot;周五&quot;,</span><br><span class=\"line\">                          @&quot;6&quot; : @&quot;周六&quot;,</span><br><span class=\"line\">                          &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return map[week];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期所在月的第一天是周几</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 输出结果是星期几的字符串。</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSString *)firstWeekdayInCurrentMonth</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double interval &#x3D; 0;</span><br><span class=\"line\">    NSDate *beginDate &#x3D; nil;</span><br><span class=\"line\">    NSDate *endDate &#x3D; nil;</span><br><span class=\"line\">    NSCalendar *calendar &#x3D; [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class=\"line\">    calendar.timeZone &#x3D; [NSTimeZone timeZoneWithName:@&quot;Asia&#x2F;Shanghai&quot;];;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [calendar setFirstWeekday:2];&#x2F;&#x2F;设定周一为周首日</span><br><span class=\"line\">    BOOL ok &#x3D; [calendar rangeOfUnit:NSCalendarUnitMonth startDate:&amp;beginDate interval:&amp;interval forDate:self];</span><br><span class=\"line\">    &#x2F;&#x2F;分别修改为 NSDayCalendarUnit NSWeekCalendarUnit NSYearCalendarUnit</span><br><span class=\"line\">    if (ok) &#123;</span><br><span class=\"line\">        endDate &#x3D; [beginDate dateByAddingTimeInterval:interval-1];</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return @&quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [beginDate weekday];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期所在月有多少天</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 天数</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSInteger)daysInCurrentMonth</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSRange range &#x3D;[calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:self];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return range.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期所在月的下offset个月</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 获得时间</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSDate *)dateOffsetMonth:(NSInteger)offset</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDateComponents *comps &#x3D; [[NSDateComponents alloc] init];</span><br><span class=\"line\">    comps.month &#x3D; offset;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [calendar dateByAddingComponents:comps toDate:self options:0];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期的下offset个日期</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 获得时间</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSDate *)dateOffsetDay:(NSInteger)offset</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDateComponents *comps &#x3D; [[NSDateComponents alloc] init];</span><br><span class=\"line\">    comps.day &#x3D; offset;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [calendar dateByAddingComponents:comps toDate:self options:0];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+(NSDate *)dateFromSelectIndex:(NSIndexPath *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDate *date &#x3D; [[NSDate date] dateOffsetMonth:indexPath.section];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSInteger day &#x3D; indexPath.row - [date firstWeekdayInCurrentMonth].integerValue + 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDateComponents *comp &#x3D; [[NSDateComponents alloc] init];</span><br><span class=\"line\">    comp.year &#x3D; date.components.year;</span><br><span class=\"line\">    comp.month &#x3D; date.components.month;</span><br><span class=\"line\">    comp.day &#x3D; day;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [calendar dateFromComponents:comp];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSIndexPath *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 上面的反推 monthOffset 要注意，年末最后一天 和 下一年的一月的处理，所以通过判断若两者月相等section就等于0，不等的话，有可能是大于，有可能是小于(比如当前月2016-12，下个月2017-01)</span><br><span class=\"line\">    NSInteger row &#x3D; self.components.day-1+[self firstWeekdayInCurrentMonth].integerValue;</span><br><span class=\"line\">    NSInteger monthOffset &#x3D; (self.components.month &#x3D;&#x3D; [NSDate date].components.month) ? 0 : 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [NSIndexPath indexPathForRow:row inSection:monthOffset];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"日历时间UI相关\"><a href=\"#日历时间UI相关\" class=\"headerlink\" title=\"日历时间UI相关\"></a>日历时间UI相关</h2><p>显示日历大都是UICollectionView 这个很简单，想怎么显示直接写cell就行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#pragma mark collectionview delegate</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDate *date &#x3D; [[NSDate date] dateOffsetMonth:section];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [date daysInCurrentMonth] + [date firstWeekdayInCurrentMonth].integerValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    DatePickerCell *cell &#x3D;[collectionView dequeueReusableCellWithReuseIdentifier:datePickerCellReuse forIndexPath:indexPath];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [cell updateCellIndex:indexPath select:(_selectIndex &#x3D;&#x3D; indexPath)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        DatePickerHeaderView * headerCell &#x3D; [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:datePickerHeaderReuse forIndexPath:indexPath];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSDate *date &#x3D; [[NSDate date] dateOffsetMonth:indexPath.section];</span><br><span class=\"line\">        </span><br><span class=\"line\">        headerCell.tipLab.text &#x3D; [date ymString];</span><br><span class=\"line\">        </span><br><span class=\"line\">        return headerCell;</span><br><span class=\"line\">    &#125;else if ([kind isEqualToString:UICollectionElementKindSectionFooter])&#123;</span><br><span class=\"line\">        DatePickerFooterView * footerCell &#x3D; [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:datePickerFooterReuse forIndexPath:indexPath];</span><br><span class=\"line\">        footerCell.hidden &#x3D; !(indexPath.section &#x3D;&#x3D; 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return footerCell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [collectionView deselectItemAtIndexPath:indexPath animated:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">    _selectIndex &#x3D; indexPath;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [collectionView reloadData];</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 0.4*NSEC_PER_SEC), dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (selectBlock) &#123;</span><br><span class=\"line\">            selectBlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [self.navigationController popViewControllerAnimated:YES];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细完整工程，请查看 <a href=\"https://github.com/liu3399shuai/DatePicker\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"<p>关于日历就看这一个类<code>NSCalendar</code>就可以，结合日期拆解析类<code>NSDateComponents</code>就可以搞定日历相关各种奇葩问题了</p>","more":"<h2 id=\"日历时间生成\"><a href=\"#日历时间生成\" class=\"headerlink\" title=\"日历时间生成\"></a>日历时间生成</h2><p>关于日历就看这一个类<code>NSCalendar</code>就可以，结合日期拆解析类<code>NSDateComponents</code>就可以搞定日历相关各种奇葩问题了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期是周几</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 输出结果是星期几的字符串。</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSString *)weekday</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDateComponents *comps &#x3D; [calendar components:NSCalendarUnitWeekday fromDate:self];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSArray *weekdays &#x3D; [NSArray arrayWithObjects: [NSNull null], @&quot;0&quot;, @&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;, @&quot;4&quot;, @&quot;5&quot;, @&quot;6&quot;, nil];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [weekdays objectAtIndex:comps.weekday];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSString *)weekdayString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *week &#x3D; [self weekday];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDictionary *map &#x3D; @&#123;@&quot;0&quot; : @&quot;周日&quot;,</span><br><span class=\"line\">                          @&quot;1&quot; : @&quot;周一&quot;,</span><br><span class=\"line\">                          @&quot;2&quot; : @&quot;周二&quot;,</span><br><span class=\"line\">                          @&quot;3&quot; : @&quot;周三&quot;,</span><br><span class=\"line\">                          @&quot;4&quot; : @&quot;周四&quot;,</span><br><span class=\"line\">                          @&quot;5&quot; : @&quot;周五&quot;,</span><br><span class=\"line\">                          @&quot;6&quot; : @&quot;周六&quot;,</span><br><span class=\"line\">                          &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return map[week];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期所在月的第一天是周几</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 输出结果是星期几的字符串。</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSString *)firstWeekdayInCurrentMonth</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double interval &#x3D; 0;</span><br><span class=\"line\">    NSDate *beginDate &#x3D; nil;</span><br><span class=\"line\">    NSDate *endDate &#x3D; nil;</span><br><span class=\"line\">    NSCalendar *calendar &#x3D; [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class=\"line\">    calendar.timeZone &#x3D; [NSTimeZone timeZoneWithName:@&quot;Asia&#x2F;Shanghai&quot;];;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [calendar setFirstWeekday:2];&#x2F;&#x2F;设定周一为周首日</span><br><span class=\"line\">    BOOL ok &#x3D; [calendar rangeOfUnit:NSCalendarUnitMonth startDate:&amp;beginDate interval:&amp;interval forDate:self];</span><br><span class=\"line\">    &#x2F;&#x2F;分别修改为 NSDayCalendarUnit NSWeekCalendarUnit NSYearCalendarUnit</span><br><span class=\"line\">    if (ok) &#123;</span><br><span class=\"line\">        endDate &#x3D; [beginDate dateByAddingTimeInterval:interval-1];</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">        return @&quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [beginDate weekday];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期所在月有多少天</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 天数</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSInteger)daysInCurrentMonth</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSRange range &#x3D;[calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:self];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return range.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期所在月的下offset个月</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 获得时间</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSDate *)dateOffsetMonth:(NSInteger)offset</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDateComponents *comps &#x3D; [[NSDateComponents alloc] init];</span><br><span class=\"line\">    comps.month &#x3D; offset;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [calendar dateByAddingComponents:comps toDate:self options:0];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *  获取当前日期的下offset个日期</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return 获得时间</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">-(NSDate *)dateOffsetDay:(NSInteger)offset</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDateComponents *comps &#x3D; [[NSDateComponents alloc] init];</span><br><span class=\"line\">    comps.day &#x3D; offset;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [calendar dateByAddingComponents:comps toDate:self options:0];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+(NSDate *)dateFromSelectIndex:(NSIndexPath *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSDate *date &#x3D; [[NSDate date] dateOffsetMonth:indexPath.section];</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSInteger day &#x3D; indexPath.row - [date firstWeekdayInCurrentMonth].integerValue + 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDateComponents *comp &#x3D; [[NSDateComponents alloc] init];</span><br><span class=\"line\">    comp.year &#x3D; date.components.year;</span><br><span class=\"line\">    comp.month &#x3D; date.components.month;</span><br><span class=\"line\">    comp.day &#x3D; day;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [calendar dateFromComponents:comp];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(NSIndexPath *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 上面的反推 monthOffset 要注意，年末最后一天 和 下一年的一月的处理，所以通过判断若两者月相等section就等于0，不等的话，有可能是大于，有可能是小于(比如当前月2016-12，下个月2017-01)</span><br><span class=\"line\">    NSInteger row &#x3D; self.components.day-1+[self firstWeekdayInCurrentMonth].integerValue;</span><br><span class=\"line\">    NSInteger monthOffset &#x3D; (self.components.month &#x3D;&#x3D; [NSDate date].components.month) ? 0 : 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [NSIndexPath indexPathForRow:row inSection:monthOffset];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"日历时间UI相关\"><a href=\"#日历时间UI相关\" class=\"headerlink\" title=\"日历时间UI相关\"></a>日历时间UI相关</h2><p>显示日历大都是UICollectionView 这个很简单，想怎么显示直接写cell就行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#pragma mark collectionview delegate</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSDate *date &#x3D; [[NSDate date] dateOffsetMonth:section];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [date daysInCurrentMonth] + [date firstWeekdayInCurrentMonth].integerValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    DatePickerCell *cell &#x3D;[collectionView dequeueReusableCellWithReuseIdentifier:datePickerCellReuse forIndexPath:indexPath];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [cell updateCellIndex:indexPath select:(_selectIndex &#x3D;&#x3D; indexPath)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if ([kind isEqualToString:UICollectionElementKindSectionHeader]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        DatePickerHeaderView * headerCell &#x3D; [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:datePickerHeaderReuse forIndexPath:indexPath];</span><br><span class=\"line\">        </span><br><span class=\"line\">        NSDate *date &#x3D; [[NSDate date] dateOffsetMonth:indexPath.section];</span><br><span class=\"line\">        </span><br><span class=\"line\">        headerCell.tipLab.text &#x3D; [date ymString];</span><br><span class=\"line\">        </span><br><span class=\"line\">        return headerCell;</span><br><span class=\"line\">    &#125;else if ([kind isEqualToString:UICollectionElementKindSectionFooter])&#123;</span><br><span class=\"line\">        DatePickerFooterView * footerCell &#x3D; [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:datePickerFooterReuse forIndexPath:indexPath];</span><br><span class=\"line\">        footerCell.hidden &#x3D; !(indexPath.section &#x3D;&#x3D; 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return footerCell;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [collectionView deselectItemAtIndexPath:indexPath animated:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">    _selectIndex &#x3D; indexPath;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [collectionView reloadData];</span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 0.4*NSEC_PER_SEC), dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (selectBlock) &#123;</span><br><span class=\"line\">            selectBlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [self.navigationController popViewControllerAnimated:YES];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详细完整工程，请查看 <a href=\"https://github.com/liu3399shuai/DatePicker\" target=\"_blank\" rel=\"noopener\">github</a></p>"},{"layout":"post","title":"自定义键盘和输入框","date":"2016-06-07T10:02:04.000Z","comments":1,"_content":"\n\n为什么点击UITextField键盘就抬起来了呢？为什么点击键盘里的字符，会显示在UITextField输入框里面呢？如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField\n\n<!-- more -->\n\n##### 为什么点击UITextField键盘就抬起来了呢？\n\n##### 为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\n\n##### 如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField\n\n##### 如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\n\n\n\n### 1 UITextField 继承自 UIResponder，UIResponder可以响应用户的交互\n\n```\n@interface UIResponder\n\n- (BOOL)becomeFirstResponder;\n\n- (BOOL)resignFirstResponder;\n\n- (BOOL)isFirstResponder;\n\n```\n\n\n### 2 可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性 inputView，看解释\n\n```\n// Presented when object becomes first responder.  If set to nil, reverts to following responder chain.  If\n// set while first responder, will not take effect until reloadInputViews is called.\n@property (nullable, readwrite, strong) UIView *inputView;\n\n```\n\n也就是说，如果UITextField的这个属性是个nil，那点击它后，键盘也抬不起来了，也就是说如果重新给inputView赋值一个自定义的view，那点击UITextField后，这个自定义的view就会被抬起来了，这就是所谓的自定义的键盘，其实就是个view\n\n\n### 3 点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\n\n```\n@interface UITextField : UIControl <UITextInput, NSCoding> \n\n@protocol UITextInput <UIKeyInput>\n```\n\n是因为UITextField遵守了UITextInput这个协议。而UITextInput又遵守了UIKeyInput这个协议\n\n```\n@protocol UIKeyInput <UITextInputTraits>\n\n- (BOOL)hasText;\n- (void)insertText:(NSString *)text;\n- (void)deleteBackward;\n\n@end\n```\n\nUIKeyInput这个协议里面的这三个方法，就是实现键盘里被点击字符在UITextField输入框里面显示的方法，也就是说，可以手动调用这三个方法，来实现自定义键盘的功能，如下\n\n在自定义的键盘(就是一个view)上面放置很多btn，btn事件点击如下，这样没点击一个btn，UITextField里面就会做出相应的字符显示或删除\n\n```\n-(void)btnClick:(UIButton *)btn\n{\n    NSInteger tag = btn.tag;\n    \n    if (10 <= tag && tag <= 19) {\n        [_textField insertText:[NSString stringWithFormat:@\"%ld\",tag - 10]];\n    }else if (tag == 20){\n        [_textField insertText:@\"00\"];\n    }else if (tag == 21){\n        [_textField insertText:@\".\"];\n    }else if (tag == 100){\n        [_textField deleteBackward];\n    }else if (tag == 200){\n        [_textField resignFirstResponder];\n    }else if (tag == 300){\n        [_textField resignFirstResponder];\n    }else{\n        [_textField resignFirstResponder];\n    }\n    \n    [[UIDevice currentDevice] playInputClick];\n}\n\n```\n\n\n## 4 刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\n\n这个也可以，没有inputView，但可以遵守这个协议`<UIKeyInput>` 也可以让键盘抬起来\n\n```\n\n@interface PswTextView : UIView <UITextInput> \n\n```\n\n点击PswTextView后，它becomeFirstResponder，键盘被顺利抬起,可是如何捕获键盘里面的被点击字符呢？如何显示呢？\n\n重写协议里面的以下方法\n\n```\n_textStore 是PswTextView里面的全局可变字符串变量，用来存储当前键盘里面记录的点击字符\n\n- (void)deleteBackward\n{\n    if (_textStore.length == 0) {\n        return;\n    }\n    \n    NSRange theRange = NSMakeRange(_textStore.length - 1, 1);\n    [_textStore deleteCharactersInRange:theRange];\n    \n    [self setNeedsDisplay];\n}\n\n- (void)insertText:(NSString *)text\n{\n    if (_textStore.length == 6) {\n        return;\n    }\n    \n    if (![text isPureNumber]) {\n        return;\n    }\n    \n    [_textStore appendString:text];\n    \n    [self setNeedsDisplay];\n}\n\n- (BOOL)hasText\n{\n    return (_textStore.length > 0);\n}\n\n```\n\n重写UIResponder里面的方法\n\n```\n- (BOOL)canBecomeFirstResponder\n{\n    return YES;\n}\n\n- (BOOL)becomeFirstResponder\n{\n    [_textStore setString:@\"\"];\n    [self setNeedsDisplay];\n    \n    return [super becomeFirstResponder];\n}\n```\n\n在这个view上面显示的键盘被点击字符的话，就用到`drawRect `方法了，在键盘里面的字符变化时候调用一句`setNeedsDisplay `\n\n```\n-(void)drawRect:(CGRect)rect\n{    \n    [_textStore drawInRect:rect withAttributes:@{NSForegroundColorAttributeName:self.color,NSFontAttributeName:self.font}];\n}\n```\n\n\n## 自定义键盘、自定义输入框详细代码 请看[github](https://github.com/liu3399shuai/keyboard-Input)\n","source":"_posts/zi-ding-yi-jian-pan-he-shu-ru-kuang.md","raw":"---\nlayout: post\ntitle: \"自定义键盘和输入框\"\ndate: 2016-06-07 18:02:04 +0800\ncomments: true\ntags:\n- [UITextField]\n- [inputView]\ncategories:\n- [键盘]\n- [OC]\n---\n\n\n为什么点击UITextField键盘就抬起来了呢？为什么点击键盘里的字符，会显示在UITextField输入框里面呢？如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField\n\n<!-- more -->\n\n##### 为什么点击UITextField键盘就抬起来了呢？\n\n##### 为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\n\n##### 如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField\n\n##### 如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\n\n\n\n### 1 UITextField 继承自 UIResponder，UIResponder可以响应用户的交互\n\n```\n@interface UIResponder\n\n- (BOOL)becomeFirstResponder;\n\n- (BOOL)resignFirstResponder;\n\n- (BOOL)isFirstResponder;\n\n```\n\n\n### 2 可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性 inputView，看解释\n\n```\n// Presented when object becomes first responder.  If set to nil, reverts to following responder chain.  If\n// set while first responder, will not take effect until reloadInputViews is called.\n@property (nullable, readwrite, strong) UIView *inputView;\n\n```\n\n也就是说，如果UITextField的这个属性是个nil，那点击它后，键盘也抬不起来了，也就是说如果重新给inputView赋值一个自定义的view，那点击UITextField后，这个自定义的view就会被抬起来了，这就是所谓的自定义的键盘，其实就是个view\n\n\n### 3 点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\n\n```\n@interface UITextField : UIControl <UITextInput, NSCoding> \n\n@protocol UITextInput <UIKeyInput>\n```\n\n是因为UITextField遵守了UITextInput这个协议。而UITextInput又遵守了UIKeyInput这个协议\n\n```\n@protocol UIKeyInput <UITextInputTraits>\n\n- (BOOL)hasText;\n- (void)insertText:(NSString *)text;\n- (void)deleteBackward;\n\n@end\n```\n\nUIKeyInput这个协议里面的这三个方法，就是实现键盘里被点击字符在UITextField输入框里面显示的方法，也就是说，可以手动调用这三个方法，来实现自定义键盘的功能，如下\n\n在自定义的键盘(就是一个view)上面放置很多btn，btn事件点击如下，这样没点击一个btn，UITextField里面就会做出相应的字符显示或删除\n\n```\n-(void)btnClick:(UIButton *)btn\n{\n    NSInteger tag = btn.tag;\n    \n    if (10 <= tag && tag <= 19) {\n        [_textField insertText:[NSString stringWithFormat:@\"%ld\",tag - 10]];\n    }else if (tag == 20){\n        [_textField insertText:@\"00\"];\n    }else if (tag == 21){\n        [_textField insertText:@\".\"];\n    }else if (tag == 100){\n        [_textField deleteBackward];\n    }else if (tag == 200){\n        [_textField resignFirstResponder];\n    }else if (tag == 300){\n        [_textField resignFirstResponder];\n    }else{\n        [_textField resignFirstResponder];\n    }\n    \n    [[UIDevice currentDevice] playInputClick];\n}\n\n```\n\n\n## 4 刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\n\n这个也可以，没有inputView，但可以遵守这个协议`<UIKeyInput>` 也可以让键盘抬起来\n\n```\n\n@interface PswTextView : UIView <UITextInput> \n\n```\n\n点击PswTextView后，它becomeFirstResponder，键盘被顺利抬起,可是如何捕获键盘里面的被点击字符呢？如何显示呢？\n\n重写协议里面的以下方法\n\n```\n_textStore 是PswTextView里面的全局可变字符串变量，用来存储当前键盘里面记录的点击字符\n\n- (void)deleteBackward\n{\n    if (_textStore.length == 0) {\n        return;\n    }\n    \n    NSRange theRange = NSMakeRange(_textStore.length - 1, 1);\n    [_textStore deleteCharactersInRange:theRange];\n    \n    [self setNeedsDisplay];\n}\n\n- (void)insertText:(NSString *)text\n{\n    if (_textStore.length == 6) {\n        return;\n    }\n    \n    if (![text isPureNumber]) {\n        return;\n    }\n    \n    [_textStore appendString:text];\n    \n    [self setNeedsDisplay];\n}\n\n- (BOOL)hasText\n{\n    return (_textStore.length > 0);\n}\n\n```\n\n重写UIResponder里面的方法\n\n```\n- (BOOL)canBecomeFirstResponder\n{\n    return YES;\n}\n\n- (BOOL)becomeFirstResponder\n{\n    [_textStore setString:@\"\"];\n    [self setNeedsDisplay];\n    \n    return [super becomeFirstResponder];\n}\n```\n\n在这个view上面显示的键盘被点击字符的话，就用到`drawRect `方法了，在键盘里面的字符变化时候调用一句`setNeedsDisplay `\n\n```\n-(void)drawRect:(CGRect)rect\n{    \n    [_textStore drawInRect:rect withAttributes:@{NSForegroundColorAttributeName:self.color,NSFontAttributeName:self.font}];\n}\n```\n\n\n## 自定义键盘、自定义输入框详细代码 请看[github](https://github.com/liu3399shuai/keyboard-Input)\n","slug":"zi-ding-yi-jian-pan-he-shu-ru-kuang","published":1,"updated":"2020-01-03T06:33:06.343Z","photos":[],"link":"","_id":"ck4xzj9as000u88s65un4axtj","content":"<p>为什么点击UITextField键盘就抬起来了呢？为什么点击键盘里的字符，会显示在UITextField输入框里面呢？如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField</p>\n<a id=\"more\"></a>\n\n<h5 id=\"为什么点击UITextField键盘就抬起来了呢？\"><a href=\"#为什么点击UITextField键盘就抬起来了呢？\" class=\"headerlink\" title=\"为什么点击UITextField键盘就抬起来了呢？\"></a>为什么点击UITextField键盘就抬起来了呢？</h5><h5 id=\"为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\"><a href=\"#为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\" class=\"headerlink\" title=\"为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\"></a>为什么点击键盘里的字符，会显示在UITextField输入框里面呢？</h5><h5 id=\"如何自定义点击UITextField后抬起来的键盘-并将自定义键盘里面的被点击字符传入UITextField\"><a href=\"#如何自定义点击UITextField后抬起来的键盘-并将自定义键盘里面的被点击字符传入UITextField\" class=\"headerlink\" title=\"如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField\"></a>如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField</h5><h5 id=\"如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\"><a href=\"#如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\" class=\"headerlink\" title=\"如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\"></a>如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面</h5><h3 id=\"1-UITextField-继承自-UIResponder，UIResponder可以响应用户的交互\"><a href=\"#1-UITextField-继承自-UIResponder，UIResponder可以响应用户的交互\" class=\"headerlink\" title=\"1 UITextField 继承自 UIResponder，UIResponder可以响应用户的交互\"></a>1 UITextField 继承自 UIResponder，UIResponder可以响应用户的交互</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface UIResponder</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)becomeFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)resignFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isFirstResponder;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性-inputView，看解释\"><a href=\"#2-可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性-inputView，看解释\" class=\"headerlink\" title=\"2 可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性 inputView，看解释\"></a>2 可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性 inputView，看解释</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Presented when object becomes first responder.  If set to nil, reverts to following responder chain.  If</span><br><span class=\"line\">&#x2F;&#x2F; set while first responder, will not take effect until reloadInputViews is called.</span><br><span class=\"line\">@property (nullable, readwrite, strong) UIView *inputView;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，如果UITextField的这个属性是个nil，那点击它后，键盘也抬不起来了，也就是说如果重新给inputView赋值一个自定义的view，那点击UITextField后，这个自定义的view就会被抬起来了，这就是所谓的自定义的键盘，其实就是个view</p>\n<h3 id=\"3-点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\"><a href=\"#3-点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\" class=\"headerlink\" title=\"3 点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\"></a>3 点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface UITextField : UIControl &lt;UITextInput, NSCoding&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">@protocol UITextInput &lt;UIKeyInput&gt;</span><br></pre></td></tr></table></figure>\n\n<p>是因为UITextField遵守了UITextInput这个协议。而UITextInput又遵守了UIKeyInput这个协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol UIKeyInput &lt;UITextInputTraits&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)hasText;</span><br><span class=\"line\">- (void)insertText:(NSString *)text;</span><br><span class=\"line\">- (void)deleteBackward;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>UIKeyInput这个协议里面的这三个方法，就是实现键盘里被点击字符在UITextField输入框里面显示的方法，也就是说，可以手动调用这三个方法，来实现自定义键盘的功能，如下</p>\n<p>在自定义的键盘(就是一个view)上面放置很多btn，btn事件点击如下，这样没点击一个btn，UITextField里面就会做出相应的字符显示或删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)btnClick:(UIButton *)btn</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSInteger tag &#x3D; btn.tag;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (10 &lt;&#x3D; tag &amp;&amp; tag &lt;&#x3D; 19) &#123;</span><br><span class=\"line\">        [_textField insertText:[NSString stringWithFormat:@&quot;%ld&quot;,tag - 10]];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 20)&#123;</span><br><span class=\"line\">        [_textField insertText:@&quot;00&quot;];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 21)&#123;</span><br><span class=\"line\">        [_textField insertText:@&quot;.&quot;];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 100)&#123;</span><br><span class=\"line\">        [_textField deleteBackward];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 200)&#123;</span><br><span class=\"line\">        [_textField resignFirstResponder];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 300)&#123;</span><br><span class=\"line\">        [_textField resignFirstResponder];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        [_textField resignFirstResponder];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [[UIDevice currentDevice] playInputClick];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\"><a href=\"#4-刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\" class=\"headerlink\" title=\"4 刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\"></a>4 刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？</h2><p>这个也可以，没有inputView，但可以遵守这个协议<code>&lt;UIKeyInput&gt;</code> 也可以让键盘抬起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface PswTextView : UIView &lt;UITextInput&gt;</span><br></pre></td></tr></table></figure>\n\n<p>点击PswTextView后，它becomeFirstResponder，键盘被顺利抬起,可是如何捕获键盘里面的被点击字符呢？如何显示呢？</p>\n<p>重写协议里面的以下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_textStore 是PswTextView里面的全局可变字符串变量，用来存储当前键盘里面记录的点击字符</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)deleteBackward</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (_textStore.length &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSRange theRange &#x3D; NSMakeRange(_textStore.length - 1, 1);</span><br><span class=\"line\">    [_textStore deleteCharactersInRange:theRange];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)insertText:(NSString *)text</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (_textStore.length &#x3D;&#x3D; 6) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (![text isPureNumber]) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [_textStore appendString:text];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)hasText</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return (_textStore.length &gt; 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重写UIResponder里面的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)canBecomeFirstResponder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)becomeFirstResponder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [_textStore setString:@&quot;&quot;];</span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [super becomeFirstResponder];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个view上面显示的键盘被点击字符的话，就用到<code>drawRect</code>方法了，在键盘里面的字符变化时候调用一句<code>setNeedsDisplay</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)drawRect:(CGRect)rect</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    [_textStore drawInRect:rect withAttributes:@&#123;NSForegroundColorAttributeName:self.color,NSFontAttributeName:self.font&#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"自定义键盘、自定义输入框详细代码-请看github\"><a href=\"#自定义键盘、自定义输入框详细代码-请看github\" class=\"headerlink\" title=\"自定义键盘、自定义输入框详细代码 请看github\"></a>自定义键盘、自定义输入框详细代码 请看<a href=\"https://github.com/liu3399shuai/keyboard-Input\" target=\"_blank\" rel=\"noopener\">github</a></h2>","site":{"data":{}},"excerpt":"<p>为什么点击UITextField键盘就抬起来了呢？为什么点击键盘里的字符，会显示在UITextField输入框里面呢？如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField</p>","more":"<h5 id=\"为什么点击UITextField键盘就抬起来了呢？\"><a href=\"#为什么点击UITextField键盘就抬起来了呢？\" class=\"headerlink\" title=\"为什么点击UITextField键盘就抬起来了呢？\"></a>为什么点击UITextField键盘就抬起来了呢？</h5><h5 id=\"为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\"><a href=\"#为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\" class=\"headerlink\" title=\"为什么点击键盘里的字符，会显示在UITextField输入框里面呢？\"></a>为什么点击键盘里的字符，会显示在UITextField输入框里面呢？</h5><h5 id=\"如何自定义点击UITextField后抬起来的键盘-并将自定义键盘里面的被点击字符传入UITextField\"><a href=\"#如何自定义点击UITextField后抬起来的键盘-并将自定义键盘里面的被点击字符传入UITextField\" class=\"headerlink\" title=\"如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField\"></a>如何自定义点击UITextField后抬起来的键盘,并将自定义键盘里面的被点击字符传入UITextField</h5><h5 id=\"如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\"><a href=\"#如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\" class=\"headerlink\" title=\"如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面\"></a>如何自定义一个view，来模拟UITextField的功能？就是说点击这个view，键盘抬起，点击键盘里面的字符，会显示到这个view上面</h5><h3 id=\"1-UITextField-继承自-UIResponder，UIResponder可以响应用户的交互\"><a href=\"#1-UITextField-继承自-UIResponder，UIResponder可以响应用户的交互\" class=\"headerlink\" title=\"1 UITextField 继承自 UIResponder，UIResponder可以响应用户的交互\"></a>1 UITextField 继承自 UIResponder，UIResponder可以响应用户的交互</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface UIResponder</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)becomeFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)resignFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isFirstResponder;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性-inputView，看解释\"><a href=\"#2-可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性-inputView，看解释\" class=\"headerlink\" title=\"2 可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性 inputView，看解释\"></a>2 可以响应用户事件了，这还不够，UIButton也可以，点击它怎么不抬起键盘。UITextField有个属性 inputView，看解释</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Presented when object becomes first responder.  If set to nil, reverts to following responder chain.  If</span><br><span class=\"line\">&#x2F;&#x2F; set while first responder, will not take effect until reloadInputViews is called.</span><br><span class=\"line\">@property (nullable, readwrite, strong) UIView *inputView;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，如果UITextField的这个属性是个nil，那点击它后，键盘也抬不起来了，也就是说如果重新给inputView赋值一个自定义的view，那点击UITextField后，这个自定义的view就会被抬起来了，这就是所谓的自定义的键盘，其实就是个view</p>\n<h3 id=\"3-点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\"><a href=\"#3-点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\" class=\"headerlink\" title=\"3 点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？\"></a>3 点击UITextField后，键盘抬起来了，可是点击键盘里面的字符怎么会显示到UITextField里面的呢？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface UITextField : UIControl &lt;UITextInput, NSCoding&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">@protocol UITextInput &lt;UIKeyInput&gt;</span><br></pre></td></tr></table></figure>\n\n<p>是因为UITextField遵守了UITextInput这个协议。而UITextInput又遵守了UIKeyInput这个协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol UIKeyInput &lt;UITextInputTraits&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)hasText;</span><br><span class=\"line\">- (void)insertText:(NSString *)text;</span><br><span class=\"line\">- (void)deleteBackward;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>UIKeyInput这个协议里面的这三个方法，就是实现键盘里被点击字符在UITextField输入框里面显示的方法，也就是说，可以手动调用这三个方法，来实现自定义键盘的功能，如下</p>\n<p>在自定义的键盘(就是一个view)上面放置很多btn，btn事件点击如下，这样没点击一个btn，UITextField里面就会做出相应的字符显示或删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)btnClick:(UIButton *)btn</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSInteger tag &#x3D; btn.tag;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (10 &lt;&#x3D; tag &amp;&amp; tag &lt;&#x3D; 19) &#123;</span><br><span class=\"line\">        [_textField insertText:[NSString stringWithFormat:@&quot;%ld&quot;,tag - 10]];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 20)&#123;</span><br><span class=\"line\">        [_textField insertText:@&quot;00&quot;];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 21)&#123;</span><br><span class=\"line\">        [_textField insertText:@&quot;.&quot;];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 100)&#123;</span><br><span class=\"line\">        [_textField deleteBackward];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 200)&#123;</span><br><span class=\"line\">        [_textField resignFirstResponder];</span><br><span class=\"line\">    &#125;else if (tag &#x3D;&#x3D; 300)&#123;</span><br><span class=\"line\">        [_textField resignFirstResponder];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        [_textField resignFirstResponder];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [[UIDevice currentDevice] playInputClick];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\"><a href=\"#4-刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\" class=\"headerlink\" title=\"4 刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？\"></a>4 刚才说的点击UITextField键盘抬起是因为有个inputView属性，那一个自定义的view，没有这个属性，点击后怎么把键盘抬起来？</h2><p>这个也可以，没有inputView，但可以遵守这个协议<code>&lt;UIKeyInput&gt;</code> 也可以让键盘抬起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface PswTextView : UIView &lt;UITextInput&gt;</span><br></pre></td></tr></table></figure>\n\n<p>点击PswTextView后，它becomeFirstResponder，键盘被顺利抬起,可是如何捕获键盘里面的被点击字符呢？如何显示呢？</p>\n<p>重写协议里面的以下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_textStore 是PswTextView里面的全局可变字符串变量，用来存储当前键盘里面记录的点击字符</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)deleteBackward</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (_textStore.length &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    NSRange theRange &#x3D; NSMakeRange(_textStore.length - 1, 1);</span><br><span class=\"line\">    [_textStore deleteCharactersInRange:theRange];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)insertText:(NSString *)text</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (_textStore.length &#x3D;&#x3D; 6) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (![text isPureNumber]) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [_textStore appendString:text];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)hasText</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return (_textStore.length &gt; 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重写UIResponder里面的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)canBecomeFirstResponder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)becomeFirstResponder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [_textStore setString:@&quot;&quot;];</span><br><span class=\"line\">    [self setNeedsDisplay];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return [super becomeFirstResponder];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个view上面显示的键盘被点击字符的话，就用到<code>drawRect</code>方法了，在键盘里面的字符变化时候调用一句<code>setNeedsDisplay</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)drawRect:(CGRect)rect</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    [_textStore drawInRect:rect withAttributes:@&#123;NSForegroundColorAttributeName:self.color,NSFontAttributeName:self.font&#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"自定义键盘、自定义输入框详细代码-请看github\"><a href=\"#自定义键盘、自定义输入框详细代码-请看github\" class=\"headerlink\" title=\"自定义键盘、自定义输入框详细代码 请看github\"></a>自定义键盘、自定义输入框详细代码 请看<a href=\"https://github.com/liu3399shuai/keyboard-Input\" target=\"_blank\" rel=\"noopener\">github</a></h2>"},{"title":"first-blog","date":"2020-01-03T07:22:48.000Z","_content":"\nMacDown介绍\n\n<!-- more -->\n\n# MacDown介绍\n\n![MacDown logo](http://macdown.uranusjr.com/static/images/logo-160.png)\n\nHello there! I’m **MacDown**, the open source Markdown editor for OS X.\n\nLet me introduce myself.\n\n\n\n## Markdown and I\n\n**Markdown** is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found [here](http://daringfireball.net/projects/markdown/syntax).\n\n**MacDown** is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.\n\n![MacDown Screenshot](http://d.pr/i/10UGP+)\n\nI support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the [**Markdown** preference pane](#markdown-pane).\n\nYou can specify extra HTML rendering options through the [**Rendering** preference pane](#rendering-pane).\n\nYou can customize the editor window to you liking in the [**Editor** preferences pane](#editor-pane):\n\nYou can configure various application (that's me!) behaviors in the [**General** preference pane](#general-pane).\n\n## The Basics\nBefore I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the [**Markdown** preference pane](#markdown-pane). Lets jump right in.  \n\n### Line Breaks\nTo force a line break, put two spaces and a newline (return) at the end of the line.\n\n* This two-line bullet \nwon't break\n\n* This two-line bullet  \nwill break\n\nHere is the code:\n\n```\n* This two-line bullet \nwon't break\n\n* This two-line bullet  \nwill break\n```\n\n### Strong and Emphasize\n\n**Strong**: `**Strong**` or `__Strong__` (Command-B)  \n*Emphasize*: `*Emphasize*` or `_Emphasize_`[^emphasize] (Command-I)\n\n### Headers (like this one!)\n\n    Header 1\n    ========\n\n    Header 2\n    --------\n\nor\n\n    # Header 1\n    ## Header 2\n    ### Header 3\n    #### Header 4\n    ##### Header 5\n    ###### Header 6\n\n\n\n### Links and Email\n#### Inline\nJust put angle brackets around an email and it becomes clickable: <uranusjr@gmail.com>  \n`<uranusjr@gmail.com>`  \n\nSame thing with urls: <http://macdown.uranusjr.com>  \n` <http://macdown.uranusjr.com>`  \n\nPerhaps you want to some link text like this: [Macdown Website](http://macdown.uranusjr.com \"Title\")  \n`[Macdown Website](http://macdown.uranusjr.com \"Title\")` (The title is optional)  \n\n\n#### Reference style\nSometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  \n\nMake [a link][arbitrary_id] `[a link][arbitrary_id]` then on it's own line anywhere else in the file:  \n`[arbitrary_id]: http://macdown.uranusjr.com \"Title\"`\n  \nIf the link text itself would make a good id, you can link [like this][] `[like this][]`, then on it's own line anywhere else in the file:  \n`[like this]: http://macdown.uranusjr.com`  \n\n[arbitrary_id]: http://macdown.uranusjr.com \"Title\"\n[like this]: http://macdown.uranusjr.com  \n\n\n### Images\n#### Inline\n`![Alt Image Text](path/or/url/to.jpg \"Optional Title\")`\n#### Reference style\n`![Alt Image Text][image-id]`  \non it's own line elsewhere:  \n`[image-id]: path/or/url/to.jpg \"Optional Title\"`\n\n\n### Lists\n\n* Lists must be preceded by a blank line (or block element)\n* Unordered lists start each item with a `*`\n- `-` works too\n    * Indent a level to make a nested list\n        1. Ordered lists are supported.\n        2. Start each item (number-period-space) like `1. `\n        42. It doesn't matter what number you use, I will render them sequentially\n        1. So you might want to start each line with `1.` and let me sort it out\n\nHere is the code:\n\n```\n* Lists must be preceded by a blank line (or block element)\n* Unordered lists start each item with a `*`\n- `-` works too\n    * Indent a level to make a nested list\n        1. Ordered lists are supported.\n        2. Start each item (number-period-space) like `1. `\n        42. It doesn't matter what number you use, I will render them sequentially\n        1. So you might want to start each line with `1.` and let me sort it out\n```\n\n\n\n### Block Quote\n\n> Angle brackets `>` are used for block quotes.  \nTechnically not every line needs to start with a `>` as long as\nthere are no empty lines between paragraphs.  \n> Looks kinda ugly though.\n> > Block quotes can be nested.  \n> > > Multiple Levels\n>\n> Most markdown syntaxes work inside block quotes.\n>\n> * Lists\n> * [Links][arbitrary_id]\n> * Etc.\n\nHere is the code:\n\n```\n> Angle brackets `>` are used for block quotes.  \nTechnically not every line needs to start with a `>` as long as\nthere are no empty lines between paragraphs.  \n> Looks kinda ugly though.\n> > Block quotes can be nested.  \n> > > Multiple Levels\n>\n> Most markdown syntaxes work inside block quotes.\n>\n> * Lists\n> * [Links][arbitrary_id]\n> * Etc.\n```\n  \n  \n### Inline Code\n`Inline code` is indicated by surrounding it with backticks:  \n`` `Inline code` ``\n\nIf your ``code has `backticks` `` that need to be displayed, you can use double backticks:  \n```` ``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)\n\n\n### Block Code\nIf you indent at least four spaces or one tab, I'll display a code block.\n\n    print('This is a code block')\n    print('The block must be preceded by a blank line')\n    print('Then indent at least 4 spaces or 1 tab')\n        print('Nesting does nothing. Your code is displayed Literally')\n\nI also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.\n\n### Horizontal Rules\nIf you type three asterisks `***` or three dashes `---` on a line, I'll display a horizontal rule:\n\n***\n\n\n## <a name=\"markdown-pane\"></a>The Markdown Preference Pane\nThis is where I keep all preferences related to how I parse markdown into html.  \n![Markdown preferences pane](http://d.pr/i/RQEi+)\n\n### Document Formatting\nThe ***Smartypants*** extension automatically transforms straight quotes (`\"` and `'`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.\n\n\n### Block Formatting\n\n#### Table\n\nThis is a table:\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\nYou can align cell contents with syntax like this:\n\n| Left Aligned  | Center Aligned  | Right Aligned |\n|:------------- |:---------------:| -------------:|\n| col 3 is      | some wordy text |         $1600 |\n| col 2 is      | centered        |           $12 |\n| zebra stripes | are neat        |            $1 |\n\nThe left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.\n\n#### <a name=\"fenced-code-block\">Fenced Code Block</a>\n\nThis is a fenced code block:\n\n```\nprint('Hello world!')\n```\n\nYou can also use waves (`~`) instead of back ticks (`` ` ``):\n\n~~~\nprint('Hello world!')\n~~~\n\n\nYou can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:\n\n![Syntax highlighting example](http://d.pr/i/9HM6+)\n\nI support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.\n\n\n### Inline Formatting\n\nThe following is a list of optional inline markups supported:\n\nOption name         | Markup           | Result if enabled     |\n--------------------|------------------|-----------------------|\nIntra-word emphasis | So A\\*maz\\*ing   | So A<em>maz</em>ing   |\nStrikethrough       | \\~~Much wow\\~~   | <del>Much wow</del>   |\nUnderline [^under]  | \\_So doge\\_      | <u>So doge</u>        |\nQuote [^quote]      | \\\"Such editor\\\"  | <q>Such editor</q>    |\nHighlight           | \\==So good\\==    | <mark>So good</mark>  |\nSuperscript         | hoge\\^(fuga)     | hoge<sup>fuga</sup>   |\nAutolink            | http://t.co      | <http://t.co>         |\nFootnotes           | [\\^4] and [\\^4]: | [^4] and footnote 4   |\n\n[^4]: You don't have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. \n\n\n\n\n## <a name=\"rendering-pane\"></a>The Rendering Preference Pane\nThis is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  \n![Rendering preferences pane](http://d.pr/i/rT4d+)\n\n### CSS\nYou can choose different css files for me to use to render your html. You can even customize or add your own custom css files.\n\n### Syntax Highlighting\nYou have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.\n\n### TeX-like Math Syntax\nI can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\\\( 1 + 1 \\\\) or this (in MathML): <math><mn>1</mn><mo>+</mo><mn>1</mn></math>, and block math:\n\n\\\\[\n    A^T_S = B\n\\\\]\n\nor (in MathML)\n\n<math display=\"block\">\n    <msubsup><mi>A</mi> <mi>S</mi> <mi>T</mi></msubsup>\n    <mo>=</mo>\n    <mi>B</mi>\n</math>\n\n\n\n### Task List Syntax\n1. [x] I can render checkbox list syntax\n    * [x] I support nesting\n    * [x] I support ordered *and* unordered lists\n2. [ ] I don't support clicking checkboxes directly in the html window\n\n\n### Jekyll front-matter\nIf you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:\n\n```\n---\ntitle: \"Macdown is my friend\"\ndate: 2014-06-06 20:00:00\n---\n```\n\n### Render newline literally\nNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.\n\n\n\n\n\n## <a name=\"general-pane\"></a>The General Preferences Pane\n\nThis is where I keep preferences related to application behavior.  \n![General preferences pane](http://d.pr/i/rvwu+)\n\nThe General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  \n\n## <a name=\"editor-pane\"></a>The Editor Preference Pane\nThis is where I keep preferences related to the behavior and styling of the editing window.  \n![Editor preferences pane](http://d.pr/i/6OL5+)\n\n\n### Styling\n\nMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.\n\nYou can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.\n\nI offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.\n\n\n\n\n\n## Hack On\n\nThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).\n\nHappy writing!\n\n\n[^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized \n\n[^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.\n\n[^quote]: **Quote** replaces literal `\"` characters with html `<q>` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.\n\n[^math]: Internet connection required.\n\n\n","source":"_posts/first-blog.md","raw":"---\ntitle: first-blog\ndate: 2020-01-03 15:22:48\ntags:\n- macdown\ncategories:\n- [macdown]\n---\n\nMacDown介绍\n\n<!-- more -->\n\n# MacDown介绍\n\n![MacDown logo](http://macdown.uranusjr.com/static/images/logo-160.png)\n\nHello there! I’m **MacDown**, the open source Markdown editor for OS X.\n\nLet me introduce myself.\n\n\n\n## Markdown and I\n\n**Markdown** is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found [here](http://daringfireball.net/projects/markdown/syntax).\n\n**MacDown** is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.\n\n![MacDown Screenshot](http://d.pr/i/10UGP+)\n\nI support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the [**Markdown** preference pane](#markdown-pane).\n\nYou can specify extra HTML rendering options through the [**Rendering** preference pane](#rendering-pane).\n\nYou can customize the editor window to you liking in the [**Editor** preferences pane](#editor-pane):\n\nYou can configure various application (that's me!) behaviors in the [**General** preference pane](#general-pane).\n\n## The Basics\nBefore I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the [**Markdown** preference pane](#markdown-pane). Lets jump right in.  \n\n### Line Breaks\nTo force a line break, put two spaces and a newline (return) at the end of the line.\n\n* This two-line bullet \nwon't break\n\n* This two-line bullet  \nwill break\n\nHere is the code:\n\n```\n* This two-line bullet \nwon't break\n\n* This two-line bullet  \nwill break\n```\n\n### Strong and Emphasize\n\n**Strong**: `**Strong**` or `__Strong__` (Command-B)  \n*Emphasize*: `*Emphasize*` or `_Emphasize_`[^emphasize] (Command-I)\n\n### Headers (like this one!)\n\n    Header 1\n    ========\n\n    Header 2\n    --------\n\nor\n\n    # Header 1\n    ## Header 2\n    ### Header 3\n    #### Header 4\n    ##### Header 5\n    ###### Header 6\n\n\n\n### Links and Email\n#### Inline\nJust put angle brackets around an email and it becomes clickable: <uranusjr@gmail.com>  \n`<uranusjr@gmail.com>`  \n\nSame thing with urls: <http://macdown.uranusjr.com>  \n` <http://macdown.uranusjr.com>`  \n\nPerhaps you want to some link text like this: [Macdown Website](http://macdown.uranusjr.com \"Title\")  \n`[Macdown Website](http://macdown.uranusjr.com \"Title\")` (The title is optional)  \n\n\n#### Reference style\nSometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  \n\nMake [a link][arbitrary_id] `[a link][arbitrary_id]` then on it's own line anywhere else in the file:  \n`[arbitrary_id]: http://macdown.uranusjr.com \"Title\"`\n  \nIf the link text itself would make a good id, you can link [like this][] `[like this][]`, then on it's own line anywhere else in the file:  \n`[like this]: http://macdown.uranusjr.com`  \n\n[arbitrary_id]: http://macdown.uranusjr.com \"Title\"\n[like this]: http://macdown.uranusjr.com  \n\n\n### Images\n#### Inline\n`![Alt Image Text](path/or/url/to.jpg \"Optional Title\")`\n#### Reference style\n`![Alt Image Text][image-id]`  \non it's own line elsewhere:  \n`[image-id]: path/or/url/to.jpg \"Optional Title\"`\n\n\n### Lists\n\n* Lists must be preceded by a blank line (or block element)\n* Unordered lists start each item with a `*`\n- `-` works too\n    * Indent a level to make a nested list\n        1. Ordered lists are supported.\n        2. Start each item (number-period-space) like `1. `\n        42. It doesn't matter what number you use, I will render them sequentially\n        1. So you might want to start each line with `1.` and let me sort it out\n\nHere is the code:\n\n```\n* Lists must be preceded by a blank line (or block element)\n* Unordered lists start each item with a `*`\n- `-` works too\n    * Indent a level to make a nested list\n        1. Ordered lists are supported.\n        2. Start each item (number-period-space) like `1. `\n        42. It doesn't matter what number you use, I will render them sequentially\n        1. So you might want to start each line with `1.` and let me sort it out\n```\n\n\n\n### Block Quote\n\n> Angle brackets `>` are used for block quotes.  \nTechnically not every line needs to start with a `>` as long as\nthere are no empty lines between paragraphs.  \n> Looks kinda ugly though.\n> > Block quotes can be nested.  \n> > > Multiple Levels\n>\n> Most markdown syntaxes work inside block quotes.\n>\n> * Lists\n> * [Links][arbitrary_id]\n> * Etc.\n\nHere is the code:\n\n```\n> Angle brackets `>` are used for block quotes.  \nTechnically not every line needs to start with a `>` as long as\nthere are no empty lines between paragraphs.  \n> Looks kinda ugly though.\n> > Block quotes can be nested.  \n> > > Multiple Levels\n>\n> Most markdown syntaxes work inside block quotes.\n>\n> * Lists\n> * [Links][arbitrary_id]\n> * Etc.\n```\n  \n  \n### Inline Code\n`Inline code` is indicated by surrounding it with backticks:  \n`` `Inline code` ``\n\nIf your ``code has `backticks` `` that need to be displayed, you can use double backticks:  \n```` ``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)\n\n\n### Block Code\nIf you indent at least four spaces or one tab, I'll display a code block.\n\n    print('This is a code block')\n    print('The block must be preceded by a blank line')\n    print('Then indent at least 4 spaces or 1 tab')\n        print('Nesting does nothing. Your code is displayed Literally')\n\nI also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.\n\n### Horizontal Rules\nIf you type three asterisks `***` or three dashes `---` on a line, I'll display a horizontal rule:\n\n***\n\n\n## <a name=\"markdown-pane\"></a>The Markdown Preference Pane\nThis is where I keep all preferences related to how I parse markdown into html.  \n![Markdown preferences pane](http://d.pr/i/RQEi+)\n\n### Document Formatting\nThe ***Smartypants*** extension automatically transforms straight quotes (`\"` and `'`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.\n\n\n### Block Formatting\n\n#### Table\n\nThis is a table:\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\nYou can align cell contents with syntax like this:\n\n| Left Aligned  | Center Aligned  | Right Aligned |\n|:------------- |:---------------:| -------------:|\n| col 3 is      | some wordy text |         $1600 |\n| col 2 is      | centered        |           $12 |\n| zebra stripes | are neat        |            $1 |\n\nThe left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.\n\n#### <a name=\"fenced-code-block\">Fenced Code Block</a>\n\nThis is a fenced code block:\n\n```\nprint('Hello world!')\n```\n\nYou can also use waves (`~`) instead of back ticks (`` ` ``):\n\n~~~\nprint('Hello world!')\n~~~\n\n\nYou can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:\n\n![Syntax highlighting example](http://d.pr/i/9HM6+)\n\nI support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.\n\n\n### Inline Formatting\n\nThe following is a list of optional inline markups supported:\n\nOption name         | Markup           | Result if enabled     |\n--------------------|------------------|-----------------------|\nIntra-word emphasis | So A\\*maz\\*ing   | So A<em>maz</em>ing   |\nStrikethrough       | \\~~Much wow\\~~   | <del>Much wow</del>   |\nUnderline [^under]  | \\_So doge\\_      | <u>So doge</u>        |\nQuote [^quote]      | \\\"Such editor\\\"  | <q>Such editor</q>    |\nHighlight           | \\==So good\\==    | <mark>So good</mark>  |\nSuperscript         | hoge\\^(fuga)     | hoge<sup>fuga</sup>   |\nAutolink            | http://t.co      | <http://t.co>         |\nFootnotes           | [\\^4] and [\\^4]: | [^4] and footnote 4   |\n\n[^4]: You don't have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. \n\n\n\n\n## <a name=\"rendering-pane\"></a>The Rendering Preference Pane\nThis is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  \n![Rendering preferences pane](http://d.pr/i/rT4d+)\n\n### CSS\nYou can choose different css files for me to use to render your html. You can even customize or add your own custom css files.\n\n### Syntax Highlighting\nYou have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.\n\n### TeX-like Math Syntax\nI can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\\\( 1 + 1 \\\\) or this (in MathML): <math><mn>1</mn><mo>+</mo><mn>1</mn></math>, and block math:\n\n\\\\[\n    A^T_S = B\n\\\\]\n\nor (in MathML)\n\n<math display=\"block\">\n    <msubsup><mi>A</mi> <mi>S</mi> <mi>T</mi></msubsup>\n    <mo>=</mo>\n    <mi>B</mi>\n</math>\n\n\n\n### Task List Syntax\n1. [x] I can render checkbox list syntax\n    * [x] I support nesting\n    * [x] I support ordered *and* unordered lists\n2. [ ] I don't support clicking checkboxes directly in the html window\n\n\n### Jekyll front-matter\nIf you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:\n\n```\n---\ntitle: \"Macdown is my friend\"\ndate: 2014-06-06 20:00:00\n---\n```\n\n### Render newline literally\nNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.\n\n\n\n\n\n## <a name=\"general-pane\"></a>The General Preferences Pane\n\nThis is where I keep preferences related to application behavior.  \n![General preferences pane](http://d.pr/i/rvwu+)\n\nThe General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  \n\n## <a name=\"editor-pane\"></a>The Editor Preference Pane\nThis is where I keep preferences related to the behavior and styling of the editing window.  \n![Editor preferences pane](http://d.pr/i/6OL5+)\n\n\n### Styling\n\nMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.\n\nYou can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.\n\nI offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.\n\n\n\n\n\n## Hack On\n\nThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).\n\nHappy writing!\n\n\n[^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized \n\n[^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.\n\n[^quote]: **Quote** replaces literal `\"` characters with html `<q>` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.\n\n[^math]: Internet connection required.\n\n\n","slug":"first-blog","published":1,"updated":"2020-01-03T07:27:49.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4xzj9b9002688s6cm5v8115","content":"<p>MacDown介绍</p>\n<a id=\"more\"></a>\n\n<h1 id=\"MacDown介绍\"><a href=\"#MacDown介绍\" class=\"headerlink\" title=\"MacDown介绍\"></a>MacDown介绍</h1><p><img src=\"http://macdown.uranusjr.com/static/images/logo-160.png\" alt=\"MacDown logo\"></p>\n<p>Hello there! I’m <strong>MacDown</strong>, the open source Markdown editor for OS X.</p>\n<p>Let me introduce myself.</p>\n<h2 id=\"Markdown-and-I\"><a href=\"#Markdown-and-I\" class=\"headerlink\" title=\"Markdown and I\"></a>Markdown and I</h2><p><strong>Markdown</strong> is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p><strong>MacDown</strong> is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.</p>\n<p><img src=\"http://d.pr/i/10UGP+\" alt=\"MacDown Screenshot\"></p>\n<p>I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the <a href=\"#markdown-pane\"><strong>Markdown</strong> preference pane</a>.</p>\n<p>You can specify extra HTML rendering options through the <a href=\"#rendering-pane\"><strong>Rendering</strong> preference pane</a>.</p>\n<p>You can customize the editor window to you liking in the <a href=\"#editor-pane\"><strong>Editor</strong> preferences pane</a>:</p>\n<p>You can configure various application (that’s me!) behaviors in the <a href=\"#general-pane\"><strong>General</strong> preference pane</a>.</p>\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>Before I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the <a href=\"#markdown-pane\"><strong>Markdown</strong> preference pane</a>. Lets jump right in.  </p>\n<h3 id=\"Line-Breaks\"><a href=\"#Line-Breaks\" class=\"headerlink\" title=\"Line Breaks\"></a>Line Breaks</h3><p>To force a line break, put two spaces and a newline (return) at the end of the line.</p>\n<ul>\n<li><p>This two-line bullet<br>won’t break</p>\n</li>\n<li><p>This two-line bullet<br>will break</p>\n</li>\n</ul>\n<p>Here is the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* This two-line bullet </span><br><span class=\"line\">won&#39;t break</span><br><span class=\"line\"></span><br><span class=\"line\">* This two-line bullet  </span><br><span class=\"line\">will break</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Strong-and-Emphasize\"><a href=\"#Strong-and-Emphasize\" class=\"headerlink\" title=\"Strong and Emphasize\"></a>Strong and Emphasize</h3><p><strong>Strong</strong>: <code>**Strong**</code> or <code>__Strong__</code> (Command-B)<br><em>Emphasize</em>: <code>*Emphasize*</code> or <code>_Emphasize_</code>[^emphasize] (Command-I)</p>\n<h3 id=\"Headers-like-this-one\"><a href=\"#Headers-like-this-one\" class=\"headerlink\" title=\"Headers (like this one!)\"></a>Headers (like this one!)</h3><pre><code>Header 1\n========\n\nHeader 2\n--------</code></pre><p>or</p>\n<pre><code># Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6</code></pre><h3 id=\"Links-and-Email\"><a href=\"#Links-and-Email\" class=\"headerlink\" title=\"Links and Email\"></a>Links and Email</h3><h4 id=\"Inline\"><a href=\"#Inline\" class=\"headerlink\" title=\"Inline\"></a>Inline</h4><p>Just put angle brackets around an email and it becomes clickable: <a href=\"mailto:&#x75;&#114;&#x61;&#110;&#x75;&#115;&#106;&#x72;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;\">&#x75;&#114;&#x61;&#110;&#x75;&#115;&#106;&#x72;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;</a><br><code>&lt;uranusjr@gmail.com&gt;</code>  </p>\n<p>Same thing with urls: <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\">http://macdown.uranusjr.com</a><br><code>&lt;http://macdown.uranusjr.com&gt;</code>  </p>\n<p>Perhaps you want to some link text like this: <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\" title=\"Title\">Macdown Website</a><br><code>[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;)</code> (The title is optional)  </p>\n<h4 id=\"Reference-style\"><a href=\"#Reference-style\" class=\"headerlink\" title=\"Reference style\"></a>Reference style</h4><p>Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  </p>\n<p>Make <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\" title=\"Title\">a link</a> <code>[a link][arbitrary_id]</code> then on it’s own line anywhere else in the file:<br><code>[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot;</code></p>\n<p>If the link text itself would make a good id, you can link <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\">like this</a> <code>[like this][]</code>, then on it’s own line anywhere else in the file:<br><code>[like this]: http://macdown.uranusjr.com</code>  </p>\n<h3 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h3><h4 id=\"Inline-1\"><a href=\"#Inline-1\" class=\"headerlink\" title=\"Inline\"></a>Inline</h4><p><code>![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;)</code></p>\n<h4 id=\"Reference-style-1\"><a href=\"#Reference-style-1\" class=\"headerlink\" title=\"Reference style\"></a>Reference style</h4><p><code>![Alt Image Text][image-id]</code><br>on it’s own line elsewhere:<br><code>[image-id]: path/or/url/to.jpg &quot;Optional Title&quot;</code></p>\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><ul>\n<li>Lists must be preceded by a blank line (or block element)</li>\n<li>Unordered lists start each item with a <code>*</code></li>\n</ul>\n<ul>\n<li><code>-</code> works too<ul>\n<li>Indent a level to make a nested list<ol>\n<li>Ordered lists are supported.</li>\n<li>Start each item (number-period-space) like <code>1.</code></li>\n<li>It doesn’t matter what number you use, I will render them sequentially</li>\n<li>So you might want to start each line with <code>1.</code> and let me sort it out</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p>Here is the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Lists must be preceded by a blank line (or block element)</span><br><span class=\"line\">* Unordered lists start each item with a &#96;*&#96;</span><br><span class=\"line\">- &#96;-&#96; works too</span><br><span class=\"line\">    * Indent a level to make a nested list</span><br><span class=\"line\">        1. Ordered lists are supported.</span><br><span class=\"line\">        2. Start each item (number-period-space) like &#96;1. &#96;</span><br><span class=\"line\">        42. It doesn&#39;t matter what number you use, I will render them sequentially</span><br><span class=\"line\">        1. So you might want to start each line with &#96;1.&#96; and let me sort it out</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Block-Quote\"><a href=\"#Block-Quote\" class=\"headerlink\" title=\"Block Quote\"></a>Block Quote</h3><blockquote>\n<p>Angle brackets <code>&gt;</code> are used for block quotes.<br>Technically not every line needs to start with a <code>&gt;</code> as long as<br>there are no empty lines between paragraphs.<br>Looks kinda ugly though.</p>\n<blockquote>\n<p>Block quotes can be nested.  </p>\n<blockquote>\n<p>Multiple Levels</p>\n</blockquote>\n</blockquote>\n<p>Most markdown syntaxes work inside block quotes.</p>\n<ul>\n<li>Lists</li>\n<li><a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\" title=\"Title\">Links</a></li>\n<li>Etc.</li>\n</ul>\n</blockquote>\n<p>Here is the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Angle brackets &#96;&gt;&#96; are used for block quotes.  </span><br><span class=\"line\">Technically not every line needs to start with a &#96;&gt;&#96; as long as</span><br><span class=\"line\">there are no empty lines between paragraphs.  </span><br><span class=\"line\">&gt; Looks kinda ugly though.</span><br><span class=\"line\">&gt; &gt; Block quotes can be nested.  </span><br><span class=\"line\">&gt; &gt; &gt; Multiple Levels</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; Most markdown syntaxes work inside block quotes.</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; * Lists</span><br><span class=\"line\">&gt; * [Links][arbitrary_id]</span><br><span class=\"line\">&gt; * Etc.</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Inline-Code\"><a href=\"#Inline-Code\" class=\"headerlink\" title=\"Inline Code\"></a>Inline Code</h3><p><code>Inline code</code> is indicated by surrounding it with backticks:<br><code>`Inline code`</code></p>\n<p>If your <code>code has `backticks`</code> that need to be displayed, you can use double backticks:  </p>\n<figure class=\"highlight plain\"><figcaption><span>``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Block Code</span><br><span class=\"line\">If you indent at least four spaces or one tab, I&#39;ll display a code block.</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&#39;This is a code block&#39;)</span><br><span class=\"line\">    print(&#39;The block must be preceded by a blank line&#39;)</span><br><span class=\"line\">    print(&#39;Then indent at least 4 spaces or 1 tab&#39;)</span><br><span class=\"line\">        print(&#39;Nesting does nothing. Your code is displayed Literally&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.</span><br><span class=\"line\"></span><br><span class=\"line\">### Horizontal Rules</span><br><span class=\"line\">If you type three asterisks &#96;***&#96; or three dashes &#96;---&#96; on a line, I&#39;ll display a horizontal rule:</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## &lt;a name&#x3D;&quot;markdown-pane&quot;&gt;&lt;&#x2F;a&gt;The Markdown Preference Pane</span><br><span class=\"line\">This is where I keep all preferences related to how I parse markdown into html.  </span><br><span class=\"line\">![Markdown preferences pane](http:&#x2F;&#x2F;d.pr&#x2F;i&#x2F;RQEi+)</span><br><span class=\"line\"></span><br><span class=\"line\">### Document Formatting</span><br><span class=\"line\">The ***Smartypants*** extension automatically transforms straight quotes (&#96;&quot;&#96; and &#96;&#39;&#96;) in your text into typographer’s quotes (&#96;“&#96;, &#96;”&#96;, &#96;‘&#96;, and &#96;’&#96;) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Block Formatting</span><br><span class=\"line\"></span><br><span class=\"line\">#### Table</span><br><span class=\"line\"></span><br><span class=\"line\">This is a table:</span><br><span class=\"line\"></span><br><span class=\"line\">First Header  | Second Header</span><br><span class=\"line\">------------- | -------------</span><br><span class=\"line\">Content Cell  | Content Cell</span><br><span class=\"line\">Content Cell  | Content Cell</span><br><span class=\"line\"></span><br><span class=\"line\">You can align cell contents with syntax like this:</span><br><span class=\"line\"></span><br><span class=\"line\">| Left Aligned  | Center Aligned  | Right Aligned |</span><br><span class=\"line\">|:------------- |:---------------:| -------------:|</span><br><span class=\"line\">| col 3 is      | some wordy text |         $1600 |</span><br><span class=\"line\">| col 2 is      | centered        |           $12 |</span><br><span class=\"line\">| zebra stripes | are neat        |            $1 |</span><br><span class=\"line\"></span><br><span class=\"line\">The left- and right-most pipes (&#96;|&#96;) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on &#96;:&#96; marks.</span><br><span class=\"line\"></span><br><span class=\"line\">#### &lt;a name&#x3D;&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">This is a fenced code block:</span><br></pre></td></tr></table></figure>\n<p>print(‘Hello world!’)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">You can also use waves (&#96;~&#96;) instead of back ticks (&#96;&#96; &#96; &#96;&#96;):</span><br><span class=\"line\"></span><br><span class=\"line\">~~~</span><br><span class=\"line\">print(&#39;Hello world!&#39;)</span><br><span class=\"line\">~~~</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:</span><br><span class=\"line\"></span><br><span class=\"line\">![Syntax highlighting example](http:&#x2F;&#x2F;d.pr&#x2F;i&#x2F;9HM6+)</span><br><span class=\"line\"></span><br><span class=\"line\">I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http:&#x2F;&#x2F;macdown.uranusjr.com&#x2F;features&#x2F;) for a full list of supported syntaxes.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Inline Formatting</span><br><span class=\"line\"></span><br><span class=\"line\">The following is a list of optional inline markups supported:</span><br><span class=\"line\"></span><br><span class=\"line\">Option name         | Markup           | Result if enabled     |</span><br><span class=\"line\">--------------------|------------------|-----------------------|</span><br><span class=\"line\">Intra-word emphasis | So A\\*maz\\*ing   | So A&lt;em&gt;maz&lt;&#x2F;em&gt;ing   |</span><br><span class=\"line\">Strikethrough       | \\~~Much wow\\~~   | &lt;del&gt;Much wow&lt;&#x2F;del&gt;   |</span><br><span class=\"line\">Underline [^under]  | \\_So doge\\_      | &lt;u&gt;So doge&lt;&#x2F;u&gt;        |</span><br><span class=\"line\">Quote [^quote]      | \\&quot;Such editor\\&quot;  | &lt;q&gt;Such editor&lt;&#x2F;q&gt;    |</span><br><span class=\"line\">Highlight           | \\&#x3D;&#x3D;So good\\&#x3D;&#x3D;    | &lt;mark&gt;So good&lt;&#x2F;mark&gt;  |</span><br><span class=\"line\">Superscript         | hoge\\^(fuga)     | hoge&lt;sup&gt;fuga&lt;&#x2F;sup&gt;   |</span><br><span class=\"line\">Autolink            | http:&#x2F;&#x2F;t.co      | &lt;http:&#x2F;&#x2F;t.co&gt;         |</span><br><span class=\"line\">Footnotes           | [\\^4] and [\\^4]: | [^4] and footnote 4   |</span><br><span class=\"line\"></span><br><span class=\"line\">[^4]: You don&#39;t have to use a number. Arbitrary things like &#96;[^footy note4]&#96; and &#96;[^footy note4]:&#96; will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## &lt;a name&#x3D;&quot;rendering-pane&quot;&gt;&lt;&#x2F;a&gt;The Rendering Preference Pane</span><br><span class=\"line\">This is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  </span><br><span class=\"line\">![Rendering preferences pane](http:&#x2F;&#x2F;d.pr&#x2F;i&#x2F;rT4d+)</span><br><span class=\"line\"></span><br><span class=\"line\">### CSS</span><br><span class=\"line\">You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.</span><br><span class=\"line\"></span><br><span class=\"line\">### Syntax Highlighting</span><br><span class=\"line\">You have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.</span><br><span class=\"line\"></span><br><span class=\"line\">### TeX-like Math Syntax</span><br><span class=\"line\">I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\\\( 1 + 1 \\\\) or this (in MathML): &lt;math&gt;&lt;mn&gt;1&lt;&#x2F;mn&gt;&lt;mo&gt;+&lt;&#x2F;mo&gt;&lt;mn&gt;1&lt;&#x2F;mn&gt;&lt;&#x2F;math&gt;, and block math:</span><br><span class=\"line\"></span><br><span class=\"line\">\\\\[</span><br><span class=\"line\">    A^T_S &#x3D; B</span><br><span class=\"line\">\\\\]</span><br><span class=\"line\"></span><br><span class=\"line\">or (in MathML)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;math display&#x3D;&quot;block&quot;&gt;</span><br><span class=\"line\">    &lt;msubsup&gt;&lt;mi&gt;A&lt;&#x2F;mi&gt; &lt;mi&gt;S&lt;&#x2F;mi&gt; &lt;mi&gt;T&lt;&#x2F;mi&gt;&lt;&#x2F;msubsup&gt;</span><br><span class=\"line\">    &lt;mo&gt;&#x3D;&lt;&#x2F;mo&gt;</span><br><span class=\"line\">    &lt;mi&gt;B&lt;&#x2F;mi&gt;</span><br><span class=\"line\">&lt;&#x2F;math&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Task List Syntax</span><br><span class=\"line\">1. [x] I can render checkbox list syntax</span><br><span class=\"line\">    * [x] I support nesting</span><br><span class=\"line\">    * [x] I support ordered *and* unordered lists</span><br><span class=\"line\">2. [ ] I don&#39;t support clicking checkboxes directly in the html window</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Jekyll front-matter</span><br><span class=\"line\">If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with &#96;---&#96;. For example:</span><br></pre></td></tr></table></figure>\n<hr>\n<p>title: “Macdown is my friend”<br>date: 2014-06-06 20:00:00</p>\n<hr>\n<pre><code>\n### Render newline literally\nNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.\n\n\n\n\n\n## &lt;a name=&quot;general-pane&quot;&gt;&lt;/a&gt;The General Preferences Pane\n\nThis is where I keep preferences related to application behavior.  \n![General preferences pane](http://d.pr/i/rvwu+)\n\nThe General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  \n\n## &lt;a name=&quot;editor-pane&quot;&gt;&lt;/a&gt;The Editor Preference Pane\nThis is where I keep preferences related to the behavior and styling of the editing window.  \n![Editor preferences pane](http://d.pr/i/6OL5+)\n\n\n### Styling\n\nMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.\n\nYou can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.\n\nI offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.\n\n\n\n\n\n## Hack On\n\nThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).\n\nHappy writing!\n\n\n[^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized \n\n[^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.\n\n[^quote]: **Quote** replaces literal `&quot;` characters with html `&lt;q&gt;` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.\n\n[^math]: Internet connection required.\n\n</code></pre>","site":{"data":{}},"excerpt":"<p>MacDown介绍</p>","more":"<h1 id=\"MacDown介绍\"><a href=\"#MacDown介绍\" class=\"headerlink\" title=\"MacDown介绍\"></a>MacDown介绍</h1><p><img src=\"http://macdown.uranusjr.com/static/images/logo-160.png\" alt=\"MacDown logo\"></p>\n<p>Hello there! I’m <strong>MacDown</strong>, the open source Markdown editor for OS X.</p>\n<p>Let me introduce myself.</p>\n<h2 id=\"Markdown-and-I\"><a href=\"#Markdown-and-I\" class=\"headerlink\" title=\"Markdown and I\"></a>Markdown and I</h2><p><strong>Markdown</strong> is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found <a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p><strong>MacDown</strong> is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.</p>\n<p><img src=\"http://d.pr/i/10UGP+\" alt=\"MacDown Screenshot\"></p>\n<p>I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the <a href=\"#markdown-pane\"><strong>Markdown</strong> preference pane</a>.</p>\n<p>You can specify extra HTML rendering options through the <a href=\"#rendering-pane\"><strong>Rendering</strong> preference pane</a>.</p>\n<p>You can customize the editor window to you liking in the <a href=\"#editor-pane\"><strong>Editor</strong> preferences pane</a>:</p>\n<p>You can configure various application (that’s me!) behaviors in the <a href=\"#general-pane\"><strong>General</strong> preference pane</a>.</p>\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>Before I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the <a href=\"#markdown-pane\"><strong>Markdown</strong> preference pane</a>. Lets jump right in.  </p>\n<h3 id=\"Line-Breaks\"><a href=\"#Line-Breaks\" class=\"headerlink\" title=\"Line Breaks\"></a>Line Breaks</h3><p>To force a line break, put two spaces and a newline (return) at the end of the line.</p>\n<ul>\n<li><p>This two-line bullet<br>won’t break</p>\n</li>\n<li><p>This two-line bullet<br>will break</p>\n</li>\n</ul>\n<p>Here is the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* This two-line bullet </span><br><span class=\"line\">won&#39;t break</span><br><span class=\"line\"></span><br><span class=\"line\">* This two-line bullet  </span><br><span class=\"line\">will break</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Strong-and-Emphasize\"><a href=\"#Strong-and-Emphasize\" class=\"headerlink\" title=\"Strong and Emphasize\"></a>Strong and Emphasize</h3><p><strong>Strong</strong>: <code>**Strong**</code> or <code>__Strong__</code> (Command-B)<br><em>Emphasize</em>: <code>*Emphasize*</code> or <code>_Emphasize_</code>[^emphasize] (Command-I)</p>\n<h3 id=\"Headers-like-this-one\"><a href=\"#Headers-like-this-one\" class=\"headerlink\" title=\"Headers (like this one!)\"></a>Headers (like this one!)</h3><pre><code>Header 1\n========\n\nHeader 2\n--------</code></pre><p>or</p>\n<pre><code># Header 1\n## Header 2\n### Header 3\n#### Header 4\n##### Header 5\n###### Header 6</code></pre><h3 id=\"Links-and-Email\"><a href=\"#Links-and-Email\" class=\"headerlink\" title=\"Links and Email\"></a>Links and Email</h3><h4 id=\"Inline\"><a href=\"#Inline\" class=\"headerlink\" title=\"Inline\"></a>Inline</h4><p>Just put angle brackets around an email and it becomes clickable: <a href=\"mailto:&#x75;&#114;&#x61;&#110;&#x75;&#115;&#106;&#x72;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;\">&#x75;&#114;&#x61;&#110;&#x75;&#115;&#106;&#x72;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;</a><br><code>&lt;uranusjr@gmail.com&gt;</code>  </p>\n<p>Same thing with urls: <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\">http://macdown.uranusjr.com</a><br><code>&lt;http://macdown.uranusjr.com&gt;</code>  </p>\n<p>Perhaps you want to some link text like this: <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\" title=\"Title\">Macdown Website</a><br><code>[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;)</code> (The title is optional)  </p>\n<h4 id=\"Reference-style\"><a href=\"#Reference-style\" class=\"headerlink\" title=\"Reference style\"></a>Reference style</h4><p>Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  </p>\n<p>Make <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\" title=\"Title\">a link</a> <code>[a link][arbitrary_id]</code> then on it’s own line anywhere else in the file:<br><code>[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot;</code></p>\n<p>If the link text itself would make a good id, you can link <a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\">like this</a> <code>[like this][]</code>, then on it’s own line anywhere else in the file:<br><code>[like this]: http://macdown.uranusjr.com</code>  </p>\n<h3 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h3><h4 id=\"Inline-1\"><a href=\"#Inline-1\" class=\"headerlink\" title=\"Inline\"></a>Inline</h4><p><code>![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;)</code></p>\n<h4 id=\"Reference-style-1\"><a href=\"#Reference-style-1\" class=\"headerlink\" title=\"Reference style\"></a>Reference style</h4><p><code>![Alt Image Text][image-id]</code><br>on it’s own line elsewhere:<br><code>[image-id]: path/or/url/to.jpg &quot;Optional Title&quot;</code></p>\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><ul>\n<li>Lists must be preceded by a blank line (or block element)</li>\n<li>Unordered lists start each item with a <code>*</code></li>\n</ul>\n<ul>\n<li><code>-</code> works too<ul>\n<li>Indent a level to make a nested list<ol>\n<li>Ordered lists are supported.</li>\n<li>Start each item (number-period-space) like <code>1.</code></li>\n<li>It doesn’t matter what number you use, I will render them sequentially</li>\n<li>So you might want to start each line with <code>1.</code> and let me sort it out</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p>Here is the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Lists must be preceded by a blank line (or block element)</span><br><span class=\"line\">* Unordered lists start each item with a &#96;*&#96;</span><br><span class=\"line\">- &#96;-&#96; works too</span><br><span class=\"line\">    * Indent a level to make a nested list</span><br><span class=\"line\">        1. Ordered lists are supported.</span><br><span class=\"line\">        2. Start each item (number-period-space) like &#96;1. &#96;</span><br><span class=\"line\">        42. It doesn&#39;t matter what number you use, I will render them sequentially</span><br><span class=\"line\">        1. So you might want to start each line with &#96;1.&#96; and let me sort it out</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Block-Quote\"><a href=\"#Block-Quote\" class=\"headerlink\" title=\"Block Quote\"></a>Block Quote</h3><blockquote>\n<p>Angle brackets <code>&gt;</code> are used for block quotes.<br>Technically not every line needs to start with a <code>&gt;</code> as long as<br>there are no empty lines between paragraphs.<br>Looks kinda ugly though.</p>\n<blockquote>\n<p>Block quotes can be nested.  </p>\n<blockquote>\n<p>Multiple Levels</p>\n</blockquote>\n</blockquote>\n<p>Most markdown syntaxes work inside block quotes.</p>\n<ul>\n<li>Lists</li>\n<li><a href=\"http://macdown.uranusjr.com\" target=\"_blank\" rel=\"noopener\" title=\"Title\">Links</a></li>\n<li>Etc.</li>\n</ul>\n</blockquote>\n<p>Here is the code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Angle brackets &#96;&gt;&#96; are used for block quotes.  </span><br><span class=\"line\">Technically not every line needs to start with a &#96;&gt;&#96; as long as</span><br><span class=\"line\">there are no empty lines between paragraphs.  </span><br><span class=\"line\">&gt; Looks kinda ugly though.</span><br><span class=\"line\">&gt; &gt; Block quotes can be nested.  </span><br><span class=\"line\">&gt; &gt; &gt; Multiple Levels</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; Most markdown syntaxes work inside block quotes.</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; * Lists</span><br><span class=\"line\">&gt; * [Links][arbitrary_id]</span><br><span class=\"line\">&gt; * Etc.</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Inline-Code\"><a href=\"#Inline-Code\" class=\"headerlink\" title=\"Inline Code\"></a>Inline Code</h3><p><code>Inline code</code> is indicated by surrounding it with backticks:<br><code>`Inline code`</code></p>\n<p>If your <code>code has `backticks`</code> that need to be displayed, you can use double backticks:  </p>\n<figure class=\"highlight plain\"><figcaption><span>``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Block Code</span><br><span class=\"line\">If you indent at least four spaces or one tab, I&#39;ll display a code block.</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&#39;This is a code block&#39;)</span><br><span class=\"line\">    print(&#39;The block must be preceded by a blank line&#39;)</span><br><span class=\"line\">    print(&#39;Then indent at least 4 spaces or 1 tab&#39;)</span><br><span class=\"line\">        print(&#39;Nesting does nothing. Your code is displayed Literally&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.</span><br><span class=\"line\"></span><br><span class=\"line\">### Horizontal Rules</span><br><span class=\"line\">If you type three asterisks &#96;***&#96; or three dashes &#96;---&#96; on a line, I&#39;ll display a horizontal rule:</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## &lt;a name&#x3D;&quot;markdown-pane&quot;&gt;&lt;&#x2F;a&gt;The Markdown Preference Pane</span><br><span class=\"line\">This is where I keep all preferences related to how I parse markdown into html.  </span><br><span class=\"line\">![Markdown preferences pane](http:&#x2F;&#x2F;d.pr&#x2F;i&#x2F;RQEi+)</span><br><span class=\"line\"></span><br><span class=\"line\">### Document Formatting</span><br><span class=\"line\">The ***Smartypants*** extension automatically transforms straight quotes (&#96;&quot;&#96; and &#96;&#39;&#96;) in your text into typographer’s quotes (&#96;“&#96;, &#96;”&#96;, &#96;‘&#96;, and &#96;’&#96;) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Block Formatting</span><br><span class=\"line\"></span><br><span class=\"line\">#### Table</span><br><span class=\"line\"></span><br><span class=\"line\">This is a table:</span><br><span class=\"line\"></span><br><span class=\"line\">First Header  | Second Header</span><br><span class=\"line\">------------- | -------------</span><br><span class=\"line\">Content Cell  | Content Cell</span><br><span class=\"line\">Content Cell  | Content Cell</span><br><span class=\"line\"></span><br><span class=\"line\">You can align cell contents with syntax like this:</span><br><span class=\"line\"></span><br><span class=\"line\">| Left Aligned  | Center Aligned  | Right Aligned |</span><br><span class=\"line\">|:------------- |:---------------:| -------------:|</span><br><span class=\"line\">| col 3 is      | some wordy text |         $1600 |</span><br><span class=\"line\">| col 2 is      | centered        |           $12 |</span><br><span class=\"line\">| zebra stripes | are neat        |            $1 |</span><br><span class=\"line\"></span><br><span class=\"line\">The left- and right-most pipes (&#96;|&#96;) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on &#96;:&#96; marks.</span><br><span class=\"line\"></span><br><span class=\"line\">#### &lt;a name&#x3D;&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">This is a fenced code block:</span><br></pre></td></tr></table></figure>\n<p>print(‘Hello world!’)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">You can also use waves (&#96;~&#96;) instead of back ticks (&#96;&#96; &#96; &#96;&#96;):</span><br><span class=\"line\"></span><br><span class=\"line\">~~~</span><br><span class=\"line\">print(&#39;Hello world!&#39;)</span><br><span class=\"line\">~~~</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:</span><br><span class=\"line\"></span><br><span class=\"line\">![Syntax highlighting example](http:&#x2F;&#x2F;d.pr&#x2F;i&#x2F;9HM6+)</span><br><span class=\"line\"></span><br><span class=\"line\">I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http:&#x2F;&#x2F;macdown.uranusjr.com&#x2F;features&#x2F;) for a full list of supported syntaxes.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Inline Formatting</span><br><span class=\"line\"></span><br><span class=\"line\">The following is a list of optional inline markups supported:</span><br><span class=\"line\"></span><br><span class=\"line\">Option name         | Markup           | Result if enabled     |</span><br><span class=\"line\">--------------------|------------------|-----------------------|</span><br><span class=\"line\">Intra-word emphasis | So A\\*maz\\*ing   | So A&lt;em&gt;maz&lt;&#x2F;em&gt;ing   |</span><br><span class=\"line\">Strikethrough       | \\~~Much wow\\~~   | &lt;del&gt;Much wow&lt;&#x2F;del&gt;   |</span><br><span class=\"line\">Underline [^under]  | \\_So doge\\_      | &lt;u&gt;So doge&lt;&#x2F;u&gt;        |</span><br><span class=\"line\">Quote [^quote]      | \\&quot;Such editor\\&quot;  | &lt;q&gt;Such editor&lt;&#x2F;q&gt;    |</span><br><span class=\"line\">Highlight           | \\&#x3D;&#x3D;So good\\&#x3D;&#x3D;    | &lt;mark&gt;So good&lt;&#x2F;mark&gt;  |</span><br><span class=\"line\">Superscript         | hoge\\^(fuga)     | hoge&lt;sup&gt;fuga&lt;&#x2F;sup&gt;   |</span><br><span class=\"line\">Autolink            | http:&#x2F;&#x2F;t.co      | &lt;http:&#x2F;&#x2F;t.co&gt;         |</span><br><span class=\"line\">Footnotes           | [\\^4] and [\\^4]: | [^4] and footnote 4   |</span><br><span class=\"line\"></span><br><span class=\"line\">[^4]: You don&#39;t have to use a number. Arbitrary things like &#96;[^footy note4]&#96; and &#96;[^footy note4]:&#96; will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## &lt;a name&#x3D;&quot;rendering-pane&quot;&gt;&lt;&#x2F;a&gt;The Rendering Preference Pane</span><br><span class=\"line\">This is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  </span><br><span class=\"line\">![Rendering preferences pane](http:&#x2F;&#x2F;d.pr&#x2F;i&#x2F;rT4d+)</span><br><span class=\"line\"></span><br><span class=\"line\">### CSS</span><br><span class=\"line\">You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.</span><br><span class=\"line\"></span><br><span class=\"line\">### Syntax Highlighting</span><br><span class=\"line\">You have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.</span><br><span class=\"line\"></span><br><span class=\"line\">### TeX-like Math Syntax</span><br><span class=\"line\">I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\\\( 1 + 1 \\\\) or this (in MathML): &lt;math&gt;&lt;mn&gt;1&lt;&#x2F;mn&gt;&lt;mo&gt;+&lt;&#x2F;mo&gt;&lt;mn&gt;1&lt;&#x2F;mn&gt;&lt;&#x2F;math&gt;, and block math:</span><br><span class=\"line\"></span><br><span class=\"line\">\\\\[</span><br><span class=\"line\">    A^T_S &#x3D; B</span><br><span class=\"line\">\\\\]</span><br><span class=\"line\"></span><br><span class=\"line\">or (in MathML)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;math display&#x3D;&quot;block&quot;&gt;</span><br><span class=\"line\">    &lt;msubsup&gt;&lt;mi&gt;A&lt;&#x2F;mi&gt; &lt;mi&gt;S&lt;&#x2F;mi&gt; &lt;mi&gt;T&lt;&#x2F;mi&gt;&lt;&#x2F;msubsup&gt;</span><br><span class=\"line\">    &lt;mo&gt;&#x3D;&lt;&#x2F;mo&gt;</span><br><span class=\"line\">    &lt;mi&gt;B&lt;&#x2F;mi&gt;</span><br><span class=\"line\">&lt;&#x2F;math&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Task List Syntax</span><br><span class=\"line\">1. [x] I can render checkbox list syntax</span><br><span class=\"line\">    * [x] I support nesting</span><br><span class=\"line\">    * [x] I support ordered *and* unordered lists</span><br><span class=\"line\">2. [ ] I don&#39;t support clicking checkboxes directly in the html window</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Jekyll front-matter</span><br><span class=\"line\">If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with &#96;---&#96;. For example:</span><br></pre></td></tr></table></figure>\n<hr>\n<p>title: “Macdown is my friend”<br>date: 2014-06-06 20:00:00</p>\n<hr>\n<pre><code>\n### Render newline literally\nNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.\n\n\n\n\n\n## &lt;a name=&quot;general-pane&quot;&gt;&lt;/a&gt;The General Preferences Pane\n\nThis is where I keep preferences related to application behavior.  \n![General preferences pane](http://d.pr/i/rvwu+)\n\nThe General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  \n\n## &lt;a name=&quot;editor-pane&quot;&gt;&lt;/a&gt;The Editor Preference Pane\nThis is where I keep preferences related to the behavior and styling of the editing window.  \n![Editor preferences pane](http://d.pr/i/6OL5+)\n\n\n### Styling\n\nMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.\n\nYou can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.\n\nI offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.\n\n\n\n\n\n## Hack On\n\nThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).\n\nHappy writing!\n\n\n[^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized \n\n[^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.\n\n[^quote]: **Quote** replaces literal `&quot;` characters with html `&lt;q&gt;` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.\n\n[^math]: Internet connection required.\n\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4xzj99w000088s67e771oji","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9ao000o88s63yo5frks"},{"post_id":"ck4xzj99w000088s67e771oji","category_id":"ck4xzj9af000a88s65ubt4530","_id":"ck4xzj9ap000q88s6ak0f18ml"},{"post_id":"ck4xzj9af000988s65jb41cl0","category_id":"ck4xzj9an000l88s68kbgf45q","_id":"ck4xzj9aw001088s6a4im42ls"},{"post_id":"ck4xzj9af000988s65jb41cl0","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9aw001388s6d2lc1jlg"},{"post_id":"ck4xzj9ag000c88s60t88eq65","category_id":"ck4xzj9ar000s88s6gkanfall","_id":"ck4xzj9ax001688s6ceue3a9p"},{"post_id":"ck4xzj9ag000c88s60t88eq65","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9ax001888s63ygog1i9"},{"post_id":"ck4xzj9ai000e88s693veg5qc","category_id":"ck4xzj9ar000s88s6gkanfall","_id":"ck4xzj9ay001b88s6ajn13mzp"},{"post_id":"ck4xzj9ai000e88s693veg5qc","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9ay001c88s6fajrb282"},{"post_id":"ck4xzj9aj000h88s62iv46y3y","category_id":"ck4xzj9ar000s88s6gkanfall","_id":"ck4xzj9az001f88s64vre12v4"},{"post_id":"ck4xzj9aj000h88s62iv46y3y","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9b0001h88s636fwb1j8"},{"post_id":"ck4xzj9al000k88s65d2p26ae","category_id":"ck4xzj9ar000s88s6gkanfall","_id":"ck4xzj9b2001j88s61gt506a5"},{"post_id":"ck4xzj9al000k88s65d2p26ae","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9b2001m88s62qw0bqut"},{"post_id":"ck4xzj9ae000888s6418ved7h","category_id":"ck4xzj9aj000g88s6818fc3w1","_id":"ck4xzj9b3001o88s68muh3yir"},{"post_id":"ck4xzj9ae000888s6418ved7h","category_id":"ck4xzj9ay001a88s641tg4tx7","_id":"ck4xzj9b3001r88s62qfabb0t"},{"post_id":"ck4xzj9an000m88s6966j9vkt","category_id":"ck4xzj9ar000s88s6gkanfall","_id":"ck4xzj9b4001t88s6fuj410o0"},{"post_id":"ck4xzj9an000m88s6966j9vkt","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9b4001w88s6e2op7d2r"},{"post_id":"ck4xzj9ap000p88s68p45fbjy","category_id":"ck4xzj9b2001l88s64oup5bzh","_id":"ck4xzj9b5001y88s6dp378i84"},{"post_id":"ck4xzj9ap000p88s68p45fbjy","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9b5001z88s6bcyn4kvd"},{"post_id":"ck4xzj9aq000r88s68lln6hj0","category_id":"ck4xzj9b3001q88s67rbo5wh4","_id":"ck4xzj9b5002088s64nkrgypc"},{"post_id":"ck4xzj9aq000r88s68lln6hj0","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9b5002288s60w3s03e3"},{"post_id":"ck4xzj9as000u88s65un4axtj","category_id":"ck4xzj9b4001v88s6ddu939jq","_id":"ck4xzj9b6002488s6dwv3ec7p"},{"post_id":"ck4xzj9as000u88s65un4axtj","category_id":"ck4xzj9aa000488s60zx0c2jq","_id":"ck4xzj9b6002588s6dv7r9adc"},{"post_id":"ck4xzj9b9002688s6cm5v8115","category_id":"ck4xzj9bf002888s69mwaf5sd","_id":"ck4xzj9bf002a88s6c5i18ov1"}],"PostTag":[{"post_id":"ck4xzj99w000088s67e771oji","tag_id":"ck4xzj9a7000288s6ckrzc83y","_id":"ck4xzj9ah000d88s6bgxe4ti0"},{"post_id":"ck4xzj99w000088s67e771oji","tag_id":"ck4xzj9ad000788s69d8n96s4","_id":"ck4xzj9ai000f88s60at7g7dd"},{"post_id":"ck4xzj9ae000888s6418ved7h","tag_id":"ck4xzj9ag000b88s62cxg6ni3","_id":"ck4xzj9al000j88s66mkadtty"},{"post_id":"ck4xzj9af000988s65jb41cl0","tag_id":"ck4xzj9ak000i88s68otcc0e4","_id":"ck4xzj9as000v88s68k1098xh"},{"post_id":"ck4xzj9af000988s65jb41cl0","tag_id":"ck4xzj9ao000n88s64spmejw3","_id":"ck4xzj9au000w88s61om7ebq1"},{"post_id":"ck4xzj9ag000c88s60t88eq65","tag_id":"ck4xzj9ar000t88s653ew03ok","_id":"ck4xzj9av000z88s6ehlt0qsc"},{"post_id":"ck4xzj9ai000e88s693veg5qc","tag_id":"ck4xzj9av000y88s69jcu7dpz","_id":"ck4xzj9ax001488s6h9bj67b8"},{"post_id":"ck4xzj9aj000h88s62iv46y3y","tag_id":"ck4xzj9aw001288s6az78h20c","_id":"ck4xzj9ay001988s6ed1w9gp4"},{"post_id":"ck4xzj9al000k88s65d2p26ae","tag_id":"ck4xzj9ax001788s6ggcb0rhk","_id":"ck4xzj9az001e88s6914v3enl"},{"post_id":"ck4xzj9an000m88s6966j9vkt","tag_id":"ck4xzj9ay001d88s68t4b43e8","_id":"ck4xzj9b2001k88s6bspt8mo2"},{"post_id":"ck4xzj9ap000p88s68p45fbjy","tag_id":"ck4xzj9b0001i88s634o41zwc","_id":"ck4xzj9b3001p88s60vcw0fxk"},{"post_id":"ck4xzj9aq000r88s68lln6hj0","tag_id":"ck4xzj9b3001n88s615dhfxgo","_id":"ck4xzj9b4001u88s64vi1fp8s"},{"post_id":"ck4xzj9as000u88s65un4axtj","tag_id":"ck4xzj9b4001s88s6ab9abk1h","_id":"ck4xzj9b5002188s6auzu3zg4"},{"post_id":"ck4xzj9as000u88s65un4axtj","tag_id":"ck4xzj9b5001x88s6gqez4jmr","_id":"ck4xzj9b5002388s62lmla0nm"},{"post_id":"ck4xzj9b9002688s6cm5v8115","tag_id":"ck4xzj9be002788s652op7299","_id":"ck4xzj9bf002988s6cp625wqc"}],"Tag":[{"name":"测滑返回","_id":"ck4xzj9a7000288s6ckrzc83y"},{"name":"动画","_id":"ck4xzj9ad000788s69d8n96s4"},{"name":"MVVM","_id":"ck4xzj9ag000b88s62cxg6ni3"},{"name":"线程安全","_id":"ck4xzj9ak000i88s68otcc0e4"},{"name":"线程的分类","_id":"ck4xzj9ao000n88s64spmejw3"},{"name":"variable","_id":"ck4xzj9ar000t88s653ew03ok"},{"name":"class","_id":"ck4xzj9av000y88s69jcu7dpz"},{"name":"运行时","_id":"ck4xzj9aw001288s6az78h20c"},{"name":"method","_id":"ck4xzj9ax001788s6ggcb0rhk"},{"name":"消息转发","_id":"ck4xzj9ay001d88s68t4b43e8"},{"name":"sdwebimage","_id":"ck4xzj9b0001i88s634o41zwc"},{"name":"NSCalendar","_id":"ck4xzj9b3001n88s615dhfxgo"},{"name":"UITextField","_id":"ck4xzj9b4001s88s6ab9abk1h"},{"name":"inputView","_id":"ck4xzj9b5001x88s6gqez4jmr"},{"name":"macdown","_id":"ck4xzj9be002788s652op7299"}]}}